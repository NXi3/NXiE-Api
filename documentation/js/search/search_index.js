var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AccountsController.html",[0,1.471,1,2.436]],["body/controllers/AccountsController.html",[0,0.878,1,2.275,2,0.827,3,0.152,4,0.152,5,0.136,6,1.816,7,1.455,8,1.229,9,0.342,10,1.46,11,3.485,12,3.483,13,4.916,14,3.088,15,4.547,16,3.333,17,1.953,18,0.022,19,2.13,20,6.177,21,2.516,22,1.816,23,5.168,24,3.714,25,2.13,26,1.235,27,2.13,28,2.206,29,3.33,30,4.636,31,4.636,32,4.636,33,3.33,34,1.026,35,3.33,36,2.13,37,2.13,38,3.33,39,2.516,40,3.33,41,2.13,42,2.13,43,1.784,44,2.13,45,2.13,46,2.13,47,2.13,48,0.421,49,0.996,50,1.816,51,0.389,52,2.196,53,1.816,54,2.13,55,4.547,56,4.916,57,1.816,58,0.78,59,2.8,60,2.13,61,1.455,62,2.13,63,0.996,64,2.13,65,2.13,66,3.33,67,2.13,68,3.33,69,1.816,70,0.152,71,0.075,72,1.064,73,1.141,74,4.751,75,3.33,76,4.289,77,4.289,78,2.13,79,2.13,80,3.33,81,2.13,82,2.13,83,2.13,84,2.13,85,0.01,86,0.01]],["title/modules/AccountsModule.html",[87,0.876,88,2.23]],["body/modules/AccountsModule.html",[1,3.821,2,1.916,3,0.26,4,0.26,5,0.232,14,2.644,18,0.022,34,1.125,48,0.53,51,0.666,52,3.744,53,3.112,70,0.26,71,0.128,85,0.015,86,0.015,87,1.212,88,4.124,89,1.417,90,2.165,91,3.112,92,3.112,93,3.112,94,2.466,95,1.823,96,1.823,97,3.65,98,2.466,99,3.086,100,3.65,101,2.493,102,1.955,103,3.112,104,3.65,105,3.086,106,3.65,107,3.086,108,3.65,109,2.105,110,3.65]],["title/injectables/AccountsService.html",[52,1.91,111,0.927]],["body/injectables/AccountsService.html",[3,0.193,4,0.193,5,0.172,9,0.435,10,1.753,11,3.71,12,3.279,14,2.81,16,3.279,18,0.022,26,1.487,28,2.567,34,1.724,48,0.415,51,0.495,52,2.142,70,0.193,71,0.095,85,0.012,86,0.012,102,1.451,103,2.31,111,1.039,112,1.267,113,2.31,114,2.731,115,3.998,116,5.246,117,1.997,118,2.71,119,4.473,120,2.71,121,2.221,122,1.845,123,0.867,124,2.084,125,3.998,126,3.998,127,2.71,128,4.227,129,2.71,130,3.998,131,1.705,132,3.583,133,2.71,134,2.142,135,2.731,136,2.71,137,2.71,138,2.71,139,2.31,140,1.267,141,2.71,142,1.851,143,2.924,144,2.71,145,2.71,146,3.963]],["title/entities/Address.html",[107,2.23,147,1.306]],["body/entities/Address.html",[3,0.217,4,0.217,5,0.194,8,1.76,9,0.49,17,2.438,18,0.022,26,1.541,34,2.014,48,0.402,58,1.116,70,0.217,71,0.107,85,0.013,86,0.013,107,2.724,123,1.146,131,1.93,140,1.426,147,1.116,148,1.524,149,2.6,150,1.505,151,5.083,152,5.083,153,5.083,154,5.083,155,5.083,156,5.083,157,4.006,158,3.05,159,3.05,160,3.05,161,3.05,162,3.292,163,2.304,164,3.05,165,3.05,166,2.083,167,3.05,168,3.05,169,3.519,170,2.976,171,2.514,172,3.001,173,2.304,174,3.05,175,1.634,176,3.05]],["title/controllers/AppController.html",[0,1.471,177,2.436]],["body/controllers/AppController.html",[0,2.522,2,1.982,3,0.364,4,0.364,5,0.325,18,0.021,48,0.404,51,0.932,70,0.364,71,0.179,85,0.018,86,0.018,177,4.177,178,4.353,179,5.106]],["title/modules/AppModule.html",[87,0.876,180,2.436]],["body/modules/AppModule.html",[2,1.365,3,0.163,4,0.163,5,0.145,18,0.022,48,0.516,51,0.417,70,0.163,71,0.08,85,0.011,86,0.011,87,0.863,89,0.887,90,1.542,94,1.756,95,1.141,96,1.141,98,1.141,109,2.028,177,2.927,180,4.463,181,1.948,182,1.948,183,3.43,184,3.43,185,3.43,186,3.43,187,3.43,188,2.285,189,1.948,190,1.726,191,2.998,192,4.286,193,1.56,194,2.285,195,2.285,196,2.285,197,1.948,198,1.948,199,2.285,200,2.285,201,2.285,202,2.401,203,2.285,204,2.401,205,2.285,206,2.285,207,2.285,208,2.285,209,2.285,210,2.285,211,1.002,212,2.285,213,2.285,214,2.285,215,1.948,216,5.901,217,2.285,218,6.827,219,2.285,220,4.286,221,2.285,222,2.285,223,2.285,224,2.285,225,1.948,226,2.285,227,2.285,228,1.948,229,2.285,230,2.285,231,2.285,232,2.285,233,2.285,234,2.285,235,2.285,236,2.285,237,2.285,238,2.285,239,2.285,240,2.285,241,2.285,242,2.285,243,2.285,244,2.285,245,2.285,246,2.285,247,1.948,248,2.285,249,2.285,250,2.285,251,2.285,252,2.285,253,2.285,254,2.285,255,2.285,256,1.948,257,3.516,258,3.516]],["title/guards/AuthGuard.html",[202,2.436,259,2.695]],["body/guards/AuthGuard.html",[3,0.182,4,0.182,5,0.163,9,0.411,10,1.679,11,2.459,18,0.022,26,1.127,28,1.679,39,1.931,43,2.051,48,0.453,51,0.466,70,0.182,71,0.09,72,1.277,85,0.012,86,0.012,111,0.995,117,1.277,121,2.146,122,1.782,123,0.996,124,2.013,131,1.115,135,2.615,142,3.482,143,2.293,193,1.746,202,2.615,211,1.679,260,1.931,261,2.179,262,4.346,263,3.829,264,2.556,265,5.731,266,5.066,267,2.556,268,3.264,269,4.346,270,2.556,271,2.179,272,3.829,273,5.066,274,2.556,275,3.914,276,3.914,277,1.931,278,1.931,279,1.746,280,2.179,281,1.931,282,2.556,283,2.179,284,3.187,285,3.264,286,2.556,287,2.179,288,2.179,289,2.556,290,2.556,291,2.179,292,5.098,293,2.556,294,3.264,295,2.556,296,2.556,297,2.556,298,2.556,299,2.179,300,2.556,301,2.556,302,2.556,303,2.556,304,1.746,305,2.556,306,1.931,307,2.179,308,2.556,309,2.556,310,2.556]],["title/entities/Billing.html",[105,2.23,147,1.306]],["body/entities/Billing.html",[3,0.239,4,0.239,5,0.213,8,1.934,9,0.539,17,2.359,18,0.022,26,1.492,34,2.058,48,0.423,58,1.227,70,0.239,71,0.118,85,0.014,86,0.014,105,2.911,123,1.109,131,1.915,140,1.567,147,1.227,148,1.675,150,1.609,157,3.655,163,2.533,166,2.29,169,3.336,170,3.181,171,2.687,172,2.939,173,2.533,175,1.796,311,2.858,312,5.351,313,5.351,314,5.351,315,5.351,316,3.352,317,3.352,318,3.352,319,3.352,320,3.352,321,3.352,322,3.352,323,3.352]],["title/injectables/CaslAbilityFactory.html",[111,0.927,324,2.695]],["body/injectables/CaslAbilityFactory.html",[3,0.228,4,0.228,5,0.203,9,0.513,10,1.974,18,0.022,26,0.784,28,1.401,34,1.839,39,3.401,43,1.711,48,0.472,49,2.437,51,0.583,70,0.321,71,0.112,85,0.014,86,0.014,111,1.17,112,1.493,121,1.493,122,1.24,123,1.033,124,1.401,143,1.595,211,1.401,284,1.997,324,3.401,325,3.401,326,2.413,327,4.502,328,4.502,329,3.194,330,4.445,331,4.502,332,4.502,333,4.502,334,3.839,335,2.723,336,2.723,337,3.194,338,2.723,339,3.194,340,2.723,341,2.723,342,4.502,343,3.194,344,3.194,345,3.939,346,3.194,347,4.502,348,3.194,349,3.194,350,2.723,351,3.194,352,3.194,353,2.723,354,3.194,355,3.194,356,1.711,357,3.194,358,3.194,359,3.194,360,3.194,361,3.194,362,3.194]],["title/modules/ConfigurationModule.html",[87,0.876,363,2.436]],["body/modules/ConfigurationModule.html",[3,0.306,4,0.306,5,0.273,18,0.021,48,0.434,51,0.784,70,0.306,71,0.151,85,0.017,86,0.017,87,1.349,89,1.668,90,2.41,94,2.745,95,2.146,96,2.146,98,2.745,99,3.435,363,4.689,364,3.662,365,3.662,366,3.662,367,4.477,368,4.295,369,4.295]],["title/injectables/ConfigurationService.html",[111,0.927,367,2.23]],["body/injectables/ConfigurationService.html",[3,0.2,4,0.2,5,0.179,9,0.452,10,1.803,18,0.022,26,1.395,28,2.343,48,0.222,51,0.514,70,0.2,71,0.099,73,2.202,85,0.012,86,0.012,111,1.069,112,1.315,117,2.054,121,2.656,122,2.206,123,1.169,124,2.492,131,2.06,142,2.808,143,2.668,162,3.106,211,1.234,275,3.505,367,2.57,370,2.4,371,4.111,372,4.111,373,4.111,374,2.814,375,5.342,376,4.857,377,2.814,378,4.111,379,4.111,380,2.814,381,5.342,382,4.111,383,4.857,384,2.814,385,2.126,386,2.126,387,4.111,388,2.814,389,2.808,390,4.111,391,2.814,392,4.111,393,2.814,394,2.814,395,2.814,396,2.814,397,2.814]],["title/classes/CreatePostsDto.html",[71,0.125,398,2.436]],["body/classes/CreatePostsDto.html",[3,0.282,4,0.282,5,0.252,9,0.636,17,2.261,18,0.021,26,1.429,48,0.313,70,0.282,71,0.183,73,3.702,85,0.016,86,0.016,123,1.063,131,1.922,150,1.799,356,2.118,398,3.557,399,3.372,400,4.4,401,4.965,402,4.965,403,5.823,404,3.954,405,3.954,406,3.954,407,4.676,408,4.676,409,2.701]],["title/modules/DatabaseModule.html",[87,0.876,183,2.23]],["body/modules/DatabaseModule.html",[3,0.293,4,0.293,5,0.261,18,0.022,48,0.469,51,0.75,70,0.293,71,0.144,85,0.016,86,0.016,87,1.311,89,1.595,101,2.806,102,2.201,109,3.081,123,0.75,134,2.201,148,2.052,175,2.201,183,3.338,189,4.553,190,3.104,211,2.342,215,3.503,228,3.503,410,4.109,411,6.281,412,4.109,413,4.109,414,4.109,415,4.109,416,4.109,417,4.109,418,4.109,419,4.109,420,2.37,421,4.109,422,4.109,423,4.109,424,4.109,425,4.109]],["title/controllers/ImagesController.html",[0,1.471,426,2.436]],["body/controllers/ImagesController.html",[0,1.987,2,1.871,3,0.343,4,0.343,5,0.307,7,3.292,18,0.022,48,0.467,51,0.88,70,0.343,71,0.169,72,2.408,73,2.582,85,0.018,86,0.018,426,4.034,427,4.11,428,4.82,429,3.684,430,4.11,431,4.82]],["title/modules/ImagesModule.html",[87,0.876,184,2.23]],["body/modules/ImagesModule.html",[2,2.146,3,0.309,4,0.309,5,0.276,18,0.022,48,0.481,51,0.791,70,0.309,71,0.152,85,0.017,86,0.017,87,1.357,89,1.683,90,2.424,94,2.761,95,2.165,96,2.165,98,2.761,184,4.231,426,4.156,429,3.905,430,3.696,432,3.696,433,3.696,434,4.335,435,4.335]],["title/injectables/ImagesService.html",[111,0.927,429,2.058]],["body/injectables/ImagesService.html",[3,0.368,4,0.368,5,0.328,18,0.021,48,0.408,51,0.942,70,0.368,71,0.181,85,0.019,86,0.019,111,1.6,112,2.413,429,3.551,436,4.401]],["title/injectables/LocalStrategy.html",[111,0.927,437,2.23]],["body/injectables/LocalStrategy.html",[3,0.25,4,0.25,5,0.224,9,0.565,10,2.11,11,2.938,18,0.022,26,1.181,28,1.541,34,1.69,43,1.882,48,0.466,51,0.641,70,0.25,71,0.123,72,1.755,73,1.882,85,0.015,86,0.015,111,1.25,112,1.643,117,1.755,121,2.249,122,1.868,123,0.878,124,2.11,131,1.858,134,1.882,135,3.286,143,1.755,276,4.102,284,2.197,294,2.996,304,2.4,420,3.403,437,3.007,438,2.996,439,4.811,440,3.514,441,3.403,442,3.514,443,4.811,444,4.811,445,3.514,446,3.514,447,2.655,448,3.514,449,2.996,450,2.655,451,2.996,452,2.655,453,3.514,454,3.514,455,3.514]],["title/classes/LoginDto.html",[71,0.125,456,2.436]],["body/classes/LoginDto.html",[3,0.281,4,0.281,5,0.251,9,0.633,17,2.256,18,0.022,26,1.427,48,0.41,58,1.441,70,0.281,71,0.182,85,0.016,86,0.016,123,1.061,131,1.92,132,3.969,134,3.113,150,1.794,172,2.888,356,2.109,407,4.668,408,4.668,409,2.69,420,3.353,456,3.547,457,3.358,458,3.938,459,3.938,460,5.194,461,3.938,462,3.938,463,4.428]],["title/entities/Post.html",[49,1.667,147,1.306]],["body/entities/Post.html",[3,0.187,4,0.187,5,0.167,9,0.421,17,2.442,18,0.022,24,1.511,26,1.544,34,1.782,48,0.408,49,1.823,58,0.959,70,0.187,71,0.092,85,0.012,86,0.012,122,1.808,123,1.148,131,1.792,140,1.224,147,0.959,148,1.309,150,1.347,169,3.902,171,1.511,172,1.823,175,1.403,350,4.704,353,3.972,389,2.663,400,3.519,401,3.972,402,3.972,464,2.234,465,4.658,466,4.658,467,3.899,468,4.658,469,2.62,470,2.62,471,2.62,472,2.62,473,2.62,474,5.783,475,2.62,476,2.62,477,2.946,478,1.979,479,2.946,480,2.663,481,2.62,482,2.62,483,2.62,484,2.62,485,2.946,486,3.325,487,3.9,488,2.946,489,1.979,490,2.62,491,2.62,492,1.979,493,1.979,494,1.979,495,2.62]],["title/controllers/PostsController.html",[0,1.471,496,2.436]],["body/controllers/PostsController.html",[0,0.99,2,0.932,3,0.171,4,0.171,5,0.153,7,1.64,8,1.385,9,0.386,10,1.601,11,3.566,12,3.498,16,3.636,17,2.062,18,0.022,21,2.759,22,2.047,23,5.339,24,3.613,26,1.304,28,2.33,43,1.956,48,0.349,49,2.719,50,2.047,51,0.438,55,4.771,56,4.771,57,2.047,58,0.879,69,2.047,70,0.171,71,0.084,72,1.199,73,1.286,74,4.529,76,4.529,77,4.529,85,0.011,86,0.011,114,3.973,345,4.394,492,4.731,496,2.494,497,2.047,498,4.938,499,4.938,500,5.312,501,4.938,502,2.401,503,2.401,504,3.651,505,2.401,506,2.401,507,2.401,508,2.401,509,3.651,510,2.401,511,2.401,512,2.401,513,2.401,514,2.549,515,2.047,516,2.401,517,2.047,518,2.401,519,2.401,520,2.401,521,2.401,522,2.401]],["title/modules/PostsModule.html",[87,0.876,185,2.23]],["body/modules/PostsModule.html",[2,2.011,3,0.279,4,0.279,5,0.25,18,0.022,48,0.507,49,1.833,51,0.716,70,0.279,71,0.138,85,0.016,86,0.016,87,1.271,89,1.522,90,2.271,94,2.587,95,1.959,96,1.959,98,2.587,99,3.238,101,2.679,102,2.101,109,2.262,185,4.2,496,3.961,514,4.078,515,3.344,523,3.344,524,3.344,525,3.344,526,3.922,527,3.922,528,3.344,529,3.922]],["title/injectables/PostsService.html",[111,0.927,514,2.058]],["body/injectables/PostsService.html",[3,0.235,4,0.235,5,0.21,9,0.531,10,2.022,11,2.845,12,3.593,16,3.593,18,0.022,26,1.537,28,2.651,48,0.454,49,1.545,51,0.603,70,0.235,71,0.116,85,0.014,86,0.014,102,1.771,111,1.199,112,1.545,114,3.925,117,2.304,119,4.9,121,1.545,122,1.283,123,0.603,124,1.45,128,2.497,139,2.818,140,1.545,142,2.258,143,3.019,146,4.342,304,2.258,514,2.661,528,2.818,530,2.818,531,5.747,532,5.747,533,3.306,534,3.306,535,4.612,536,3.306,537,3.306,538,3.306,539,3.306,540,3.306,541,3.306,542,3.306]],["title/entities/Profile.html",[14,1.91,147,1.306]],["body/entities/Profile.html",[3,0.251,4,0.251,5,0.224,8,2.035,9,0.567,14,2.583,17,2.294,18,0.022,26,1.45,34,2.081,48,0.434,58,1.291,70,0.251,71,0.124,85,0.015,86,0.015,123,1.078,131,1.86,140,1.649,147,1.291,148,1.762,150,1.666,157,3.294,163,2.665,166,2.409,169,3.171,170,3.294,171,2.783,172,2.892,173,2.665,175,1.889,543,3.007,544,5.496,545,5.496,546,5.496,547,3.527,548,3.527,549,3.527,550,3.527,551,3.527,552,3.527,553,3.527]],["title/classes/RegisterDto.html",[71,0.125,554,2.436]],["body/classes/RegisterDto.html",[3,0.244,4,0.244,5,0.218,9,0.55,17,2.377,18,0.022,26,1.503,48,0.374,58,1.254,70,0.244,71,0.166,85,0.014,86,0.014,123,1.118,131,1.977,132,3.697,134,2.899,150,1.633,172,2.959,356,1.835,407,4.783,408,4.783,409,2.339,420,3.123,463,4.03,554,3.229,555,2.92,556,4.615,557,4.615,558,3.425,559,3.425,560,5.413,561,3.425,562,3.425,563,3.425,564,3.425,565,3.425,566,3.425,567,5.413,568,3.425,569,3.425]],["title/interfaces/RequestWithUser.html",[570,2.23,571,2.695]],["body/interfaces/RequestWithUser.html",[3,0.33,4,0.33,5,0.295,9,0.744,18,0.021,34,2.174,48,0.455,70,0.33,85,0.017,86,0.017,123,0.845,150,1.99,273,5.349,278,3.499,452,4.354,570,2.895,571,4.354,572,3.499,573,3.949,574,4.631]],["title/entities/Role.html",[63,1.667,147,1.306]],["body/entities/Role.html",[3,0.249,4,0.249,5,0.223,9,0.88,17,1.863,18,0.022,24,2.02,26,1.178,48,0.433,58,1.281,63,2.243,70,0.249,71,0.123,85,0.014,86,0.014,122,2.396,123,0.999,131,1.856,140,1.636,147,1.281,148,1.749,150,1.657,169,2.768,171,2.02,172,2.559,175,1.875,211,2.104,385,2.645,467,4.45,477,3.626,478,2.645,479,4.137,480,3.278,485,3.626,488,3.626,489,2.645,493,2.645,494,2.645,575,2.985,576,3.501,577,3.501,578,4.091,579,3.501,580,2.985,581,3.501,582,3.501,583,3.501,584,4.091,585,2.985]],["title/guards/RolesGuard.html",[204,2.436,259,2.695]],["body/guards/RolesGuard.html",[3,0.255,4,0.255,5,0.228,9,0.575,10,2.137,18,0.022,26,1.196,28,1.57,34,1.103,48,0.47,51,0.653,63,1.674,70,0.255,71,0.126,72,1.789,85,0.015,86,0.015,111,1.267,117,1.789,121,2.278,122,1.892,123,0.889,124,2.137,143,2.434,193,2.446,204,3.328,211,1.57,260,2.705,262,5.069,266,5.471,268,4.155,269,5.069,271,3.053,283,3.053,284,3.046,287,3.053,288,3.053,291,3.053,389,3.328,586,3.053,587,3.581,588,3.581,589,3.581,590,3.581,591,2.705,592,3.581,593,4.873,594,3.581,595,3.581,596,3.581]],["title/modules/RolesModule.html",[87,0.876,597,2.23]],["body/modules/RolesModule.html",[2,1.807,3,0.332,4,0.332,5,0.296,18,0.022,48,0.497,51,0.849,63,2.175,70,0.332,71,0.163,85,0.017,86,0.017,87,1.419,89,1.807,98,2.325,99,2.909,101,3.179,102,2.493,109,2.685,117,2.325,597,3.613,598,4.654,599,4.654,600,4.654]],["title/modules/SecurityModule.html",[87,0.876,186,2.23]],["body/modules/SecurityModule.html",[3,0.229,4,0.229,5,0.205,18,0.022,48,0.514,51,0.587,70,0.229,71,0.113,85,0.014,86,0.014,87,1.11,88,3.88,89,1.248,90,1.984,94,2.26,95,1.606,96,1.606,98,2.26,99,2.828,109,2.61,186,4.312,211,1.41,277,2.43,279,2.196,280,2.742,306,2.43,307,2.742,437,3.88,441,3.948,447,2.43,450,2.43,451,2.742,597,3.88,601,2.742,602,2.742,603,2.742,604,2.742,605,3.216,606,3.216,607,3.216,608,3.216,609,3.216,610,3.216,611,3.216,612,3.216,613,3.216,614,3.216,615,3.216,616,3.216,617,3.216]],["title/injectables/SecurityService.html",[111,0.927,441,2.058]],["body/injectables/SecurityService.html",[3,0.161,4,0.161,5,0.144,9,0.364,10,1.53,11,3.67,13,3.632,15,3.632,18,0.022,26,1.444,28,2.498,34,1.684,43,1.212,48,0.432,51,0.413,52,2.565,70,0.161,71,0.079,72,1.13,85,0.011,86,0.011,111,0.907,112,1.058,117,1.13,121,2.238,122,1.859,123,0.874,124,2.1,128,3.618,131,1.591,134,1.212,135,3.733,143,2.938,146,3.618,284,2.993,304,2.384,338,1.929,420,3.153,441,2.013,456,3.27,554,3.27,618,1.929,619,4.788,620,4.788,621,4.788,622,4.788,623,3.49,624,2.263,625,2.263,626,3.49,627,2.263,628,3.49,629,2.263,630,2.263,631,2.263,632,3.49,633,2.263,634,2.263,635,3.49,636,2.263,637,2.976,638,2.263,639,2.263,640,2.263,641,2.263,642,3.49,643,3.49,644,2.263,645,3.49,646,2.263,647,2.263,648,2.263,649,2.263,650,2.263,651,2.263,652,2.263,653,2.263,654,2.263]],["title/classes/TokenDto.html",[71,0.125,655,2.695]],["body/classes/TokenDto.html",[3,0.299,4,0.299,5,0.267,9,0.675,17,2.327,18,0.022,26,1.472,48,0.332,58,1.537,70,0.299,71,0.147,85,0.016,86,0.016,123,1.094,131,1.844,150,1.871,162,4.092,172,3.192,356,2.25,655,4.092,656,3.581,657,5.995,658,5.995,659,5.995,660,4.2,661,4.2,662,4.2]],["title/interfaces/TokenPayload.html",[570,2.23,663,2.695]],["body/interfaces/TokenPayload.html",[3,0.354,4,0.354,5,0.316,9,0.799,18,0.021,70,0.354,85,0.018,86,0.018,123,0.907,131,1.885,150,2.079,570,3.108,572,3.756,663,4.547,664,4.239,665,6.727]],["title/classes/UpdatePostsDto.html",[71,0.125,666,2.695]],["body/classes/UpdatePostsDto.html",[3,0.356,4,0.356,5,0.318,18,0.021,48,0.477,58,1.829,70,0.356,71,0.176,85,0.018,86,0.018,356,2.677,398,3.414,452,3.776,666,4.562,667,4.262,668,4.998,669,4.998,670,4.998]],["title/entities/User.html",[34,1.099,147,1.306]],["body/entities/User.html",[3,0.119,4,0.119,5,0.107,8,0.968,9,0.562,14,2.93,17,2.326,18,0.022,24,0.968,26,1.471,34,0.847,48,0.432,49,2.366,58,0.614,59,2.387,61,2.387,63,1.889,70,0.119,71,0.097,85,0.008,86,0.008,105,3.419,107,3.419,122,1.861,123,1.163,124,1.773,131,1.886,132,2.387,134,1.872,140,0.784,147,0.614,148,1.746,150,0.95,157,1.146,166,2.387,169,3.048,170,2.761,171,0.968,172,2.751,175,0.899,211,1.956,389,3.273,420,2.016,467,3.054,477,2.078,478,1.267,479,3.054,480,1.878,485,2.078,486,3.446,488,2.078,489,1.267,492,1.267,493,1.267,494,1.267,517,2.98,556,2.98,557,2.98,578,4.505,580,1.43,584,4.505,585,2.345,671,1.43,672,3.495,673,3.495,674,1.678,675,1.678,676,1.678,677,1.678,678,1.678,679,1.678,680,1.678,681,1.678,682,1.678,683,4.042,684,1.678,685,1.678,686,1.678,687,1.678,688,1.678,689,1.678,690,1.678,691,2.75,692,1.678,693,1.678,694,1.678,695,1.678,696,1.678,697,2.75,698,1.678,699,2.75,700,1.678,701,1.678,702,1.678,703,2.75,704,2.75,705,2.75,706,1.678,707,1.678,708,1.678,709,2.75,710,1.43,711,1.678,712,1.678,713,1.678,714,1.678,715,1.678,716,1.678,717,1.678,718,1.678,719,1.678,720,1.678]],["title/controllers/VideosController.html",[0,1.471,721,2.436]],["body/controllers/VideosController.html",[0,1.987,2,1.871,3,0.343,4,0.343,5,0.307,7,3.292,18,0.022,48,0.467,51,0.88,70,0.343,71,0.169,72,2.408,73,2.582,85,0.018,86,0.018,721,4.034,722,4.11,723,4.82,724,3.684,725,4.11,726,4.82]],["title/modules/VideosModule.html",[87,0.876,187,2.23]],["body/modules/VideosModule.html",[2,2.146,3,0.309,4,0.309,5,0.276,18,0.022,48,0.481,51,0.791,70,0.309,71,0.152,85,0.017,86,0.017,87,1.357,89,1.683,90,2.424,94,2.761,95,2.165,96,2.165,98,2.761,187,4.231,721,4.156,724,3.905,725,3.696,727,3.696,728,3.696,729,4.335,730,4.335]],["title/injectables/VideosService.html",[111,0.927,724,2.058]],["body/injectables/VideosService.html",[3,0.368,4,0.368,5,0.328,18,0.021,48,0.408,51,0.942,70,0.368,71,0.181,85,0.019,86,0.019,111,1.6,112,2.413,724,3.551,731,4.401]],["title/coverage.html",[732,4.144]],["body/coverage.html",[0,2.135,1,1.549,5,0.144,6,1.934,14,1.215,18,0.022,34,0.699,43,1.215,49,1.06,52,1.215,59,1.549,61,1.549,63,1.06,71,0.182,85,0.011,86,0.011,87,0.557,105,1.418,107,1.418,111,1.53,113,1.934,123,0.414,147,2.003,149,1.934,177,1.549,178,1.934,202,1.549,204,1.549,259,2.642,261,1.934,279,1.549,281,1.714,311,1.934,324,1.714,325,1.714,326,1.714,367,1.418,370,1.934,398,1.549,399,1.934,426,1.549,427,1.934,429,1.309,436,1.934,437,1.418,438,1.934,441,1.309,456,1.549,457,1.934,464,1.934,480,1.549,496,1.549,497,1.934,514,1.309,530,1.934,543,1.934,554,1.549,555,1.934,570,2.186,571,1.714,573,1.934,575,1.934,586,1.934,591,1.714,618,1.934,655,1.714,656,1.934,663,1.714,664,1.934,666,1.714,667,1.934,671,1.934,721,1.549,722,1.934,724,1.309,731,1.934,732,1.934,733,2.268,734,2.268,735,7.2,736,4.794,737,2.268,738,6.942,739,4.794,740,2.268,741,3.223,742,5.179,743,2.981,744,5.701,745,1.714,746,1.934,747,1.934,748,3.496,749,2.981,750,4.266,751,2.981,752,2.268,753,1.934,754,1.934,755,1.934,756,1.934,757,1.934,758,1.934,759,2.268,760,2.268]],["title/dependencies.html",[90,1.88,761,2.543]],["body/dependencies.html",[18,0.022,51,0.428,58,0.859,71,0.126,85,0.011,86,0.011,90,1.029,102,1.257,140,1.097,190,1.773,191,2.001,193,1.603,197,2.001,198,2.001,225,2.001,247,2.001,256,2.001,277,1.773,278,2.712,335,2.001,409,1.603,447,1.773,449,4.484,450,1.773,637,2.001,710,2.001,745,1.773,762,2.347,763,2.347,764,3.589,765,2.347,766,2.347,767,2.347,768,2.347,769,2.347,770,2.347,771,2.347,772,2.347,773,4.358,774,2.347,775,2.347,776,3.589,777,2.347,778,2.347,779,2.347,780,2.347,781,2.347,782,4.358,783,3.589,784,2.347,785,2.347,786,2.347,787,2.347,788,2.347,789,2.347,790,2.347,791,2.347,792,2.347,793,2.347,794,2.347,795,2.347,796,2.347,797,3.589,798,2.347,799,2.347,800,2.347,801,2.347,802,3.589,803,2.347,804,2.347,805,2.347,806,2.347,807,2.347,808,2.347,809,2.347,810,2.347,811,2.347,812,2.347,813,2.347,814,2.347,815,2.347,816,2.347,817,2.347,818,2.347,819,2.347,820,2.347,821,2.347,822,2.347,823,2.347,824,2.347,825,2.347,826,2.347,827,2.347,828,2.347,829,2.347,830,2.347,831,2.347,832,2.347,833,2.347,834,2.347,835,2.347,836,2.347,837,2.347,838,2.347,839,2.347,840,2.347,841,3.589,842,2.347,843,2.347,844,2.347,845,2.347,846,2.347,847,2.347,848,2.347,849,2.347,850,2.347,851,2.347,852,2.347,853,2.347,854,2.347,855,2.347,856,2.347,857,2.347,858,2.347,859,2.347,860,2.347,861,2.347,862,2.347,863,2.347,864,2.347,865,2.347,866,2.347,867,2.347,868,2.347,869,2.347,870,2.347,871,2.347,872,3.589,873,2.347,874,2.347,875,2.347,876,2.347,877,2.347,878,2.347,879,2.347,880,2.347,881,4.358,882,2.347,883,3.589,884,2.347]],["title/miscellaneous/enumerations.html",[885,1.49,886,3.656]],["body/miscellaneous/enumerations.html",[9,0.723,12,3.538,16,3.538,18,0.022,21,4.276,34,1.744,63,2.645,85,0.017,86,0.017,114,3.865,336,4.825,345,4.276,386,5.3,885,2.247,886,3.836,887,4.499,888,4.499,889,4.499,890,5.659,891,4.499,892,5.659]],["title/miscellaneous/functions.html",[885,1.49,893,3.656]],["body/miscellaneous/functions.html",[9,0.748,18,0.019,85,0.017,86,0.017,121,2.175,122,1.807,123,0.849,124,2.041,741,3.516,743,5.876,746,3.968,753,3.968,754,5.36,755,3.968,756,5.36,757,3.968,758,4.928,885,2.325,893,3.968,894,3.968,895,4.654,896,4.654,897,4.654,898,4.654,899,4.654,900,5.78,901,4.654]],["title/index.html",[9,0.479,902,2.983,903,2.983]],["body/index.html",[18,0.019,85,0.019,86,0.019,904,5.523,905,5.523,906,5.523,907,5.523]],["title/modules.html",[89,1.887]],["body/modules.html",[18,0.017,85,0.017,86,0.017,88,2.799,89,1.739,180,3.059,183,2.799,184,2.799,185,2.799,186,2.799,187,2.799,363,3.059,597,2.799,908,6.929,909,6.929,910,6.929,911,7.072,912,5.642,913,5.642]],["title/overview.html",[914,4.144]],["body/overview.html",[2,1.151,18,0.021,52,3.335,85,0.013,86,0.013,88,3.777,89,1.151,90,1.872,91,2.527,92,2.527,93,2.527,94,2.132,95,1.481,96,1.481,112,1.385,148,1.481,180,4.604,181,2.527,182,2.527,183,3.127,184,3.626,185,3.777,186,4.214,187,3.626,260,2.239,356,1.588,363,3.962,364,2.527,365,2.527,366,2.527,367,3.892,429,2.886,432,2.527,433,2.527,437,3.127,441,3.592,514,3.592,523,2.527,524,2.527,525,2.527,572,2.239,597,3.127,601,2.527,602,2.527,603,2.527,604,2.527,724,2.886,727,2.527,728,2.527,914,2.527,915,2.964,916,4.269,917,2.964,918,2.964,919,4.269]],["title/properties.html",[150,1.481,761,2.543]],["body/properties.html",[18,0.021,24,3.061,85,0.019,86,0.019,150,1.833,400,4.009,920,5.306,921,5.306,922,5.306,923,5.306]],["title/miscellaneous/typealiases.html",[885,1.49,924,4.288]],["body/miscellaneous/typealiases.html",[9,0.825,18,0.02,85,0.019,86,0.019,123,0.937,325,3.879,326,4.959,330,4.377,334,4.377,340,5.232,341,5.232,885,2.564,925,5.134,926,6.136]],["title/miscellaneous/variables.html",[885,1.49,927,3.656]],["body/miscellaneous/variables.html",[9,0.633,18,0.022,59,3.547,61,4.386,63,1.841,85,0.016,86,0.016,87,1.275,123,1.128,131,1.512,211,1.727,279,3.547,281,3.924,285,3.358,299,3.358,306,2.975,385,4.983,386,4.983,591,3.924,741,2.975,745,3.924,747,3.358,749,3.358,751,3.358,885,1.967,894,4.428,927,3.358,928,5.194,929,3.938,930,5.194,931,3.938,932,3.938,933,3.938,934,3.938]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":921,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["0.1.4",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["0.10.3",{"_index":800,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":810,"title":{},"body":{"dependencies.html":{}}}],["0.3.12",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":809,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["0.6.3",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["0.7.6",{"_index":768,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":738,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":750,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":748,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":739,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":736,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":740,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":737,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":752,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["1.0.4",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["1.1.22",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["1.11.0",{"_index":821,"title":{},"body":{"dependencies.html":{}}}],["1.17.3",{"_index":830,"title":{},"body":{"dependencies.html":{}}}],["1.2.1",{"_index":879,"title":{},"body":{"dependencies.html":{}}}],["1.3.5",{"_index":802,"title":{},"body":{"dependencies.html":{}}}],["1.4.1",{"_index":779,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":815,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":817,"title":{},"body":{"dependencies.html":{}}}],["1.6.22",{"_index":877,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":812,"title":{},"body":{"dependencies.html":{}}}],["1.8.14",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":647,"title":{},"body":{"injectables/SecurityService.html":{}}}],["10.0.2",{"_index":780,"title":{},"body":{"dependencies.html":{}}}],["14.9.0",{"_index":823,"title":{},"body":{"dependencies.html":{}}}],["16.0.3",{"_index":825,"title":{},"body":{"dependencies.html":{}}}],["17.0.2",{"_index":883,"title":{},"body":{"dependencies.html":{}}}],["17.8.4",{"_index":837,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":919,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":770,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":786,"title":{},"body":{"dependencies.html":{}}}],["2.2.4",{"_index":839,"title":{},"body":{"dependencies.html":{}}}],["2.3.1",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["2.4.0",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":30,"title":{},"body":{"controllers/AccountsController.html":{}}}],["3.0.1",{"_index":787,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["3.0.3",{"_index":832,"title":{},"body":{"dependencies.html":{}}}],["3.1.9",{"_index":826,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":792,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":819,"title":{},"body":{"dependencies.html":{}}}],["4.1.12",{"_index":798,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":808,"title":{},"body":{"dependencies.html":{}}}],["4.10.4",{"_index":805,"title":{},"body":{"dependencies.html":{}}}],["4.3.7",{"_index":840,"title":{},"body":{"dependencies.html":{}}}],["403",{"_index":23,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/PostsController.html":{}}}],["5",{"_index":916,"title":{},"body":{"overview.html":{}}}],["5.1.0",{"_index":803,"title":{},"body":{"dependencies.html":{}}}],["5.1.6",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":807,"title":{},"body":{"dependencies.html":{}}}],["5.3.1",{"_index":836,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":917,"title":{},"body":{"overview.html":{}}}],["6.0.1",{"_index":834,"title":{},"body":{"dependencies.html":{}}}],["6.2.1",{"_index":788,"title":{},"body":{"dependencies.html":{}}}],["6.4.0",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":828,"title":{},"body":{"dependencies.html":{}}}],["6.9.1",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["60s",{"_index":617,"title":{},"body":{"modules/SecurityModule.html":{}}}],["64",{"_index":584,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["64})@apiproperty({type",{"_index":681,"title":{},"body":{"entities/User.html":{}}}],["64})@column({length",{"_index":579,"title":{},"body":{"entities/Role.html":{}}}],["64})@index({unique",{"_index":580,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["7.2.0",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":918,"title":{},"body":{"overview.html":{}}}],["8.10.0",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["8.2.0",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":915,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":773,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":793,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":776,"title":{},"body":{"dependencies.html":{}}}],["9.2.2",{"_index":790,"title":{},"body":{"dependencies.html":{}}}],["9.3.10",{"_index":782,"title":{},"body":{"dependencies.html":{}}}],["ability",{"_index":330,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory.ts",{"_index":326,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory.ts:19",{"_index":329,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilitybuilder",{"_index":331,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilityclass",{"_index":332,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["access",{"_index":39,"title":{},"body":{"controllers/AccountsController.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{}}}],["accesstoken",{"_index":657,"title":{},"body":{"classes/TokenDto.html":{}}}],["account",{"_index":20,"title":{},"body":{"controllers/AccountsController.html":{}}}],["account.'})@apiresponse({status",{"_index":35,"title":{},"body":{"controllers/AccountsController.html":{}}}],["accountname",{"_index":312,"title":{},"body":{"entities/Billing.html":{}}}],["accountnumber",{"_index":313,"title":{},"body":{"entities/Billing.html":{}}}],["accounts",{"_index":8,"title":{},"body":{"controllers/AccountsController.html":{},"entities/Address.html":{},"entities/Billing.html":{},"controllers/PostsController.html":{},"entities/Profile.html":{},"entities/User.html":{}}}],["accounts.controller",{"_index":100,"title":{},"body":{"modules/AccountsModule.html":{}}}],["accounts.service",{"_index":53,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{}}}],["accounts/entities/user.entity",{"_index":490,"title":{},"body":{"entities/Post.html":{}}}],["accountscontroller",{"_index":1,"title":{"controllers/AccountsController.html":{}},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"coverage.html":{}}}],["accountsmodule",{"_index":88,"title":{"modules/AccountsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/SecurityModule.html":{},"modules.html":{},"overview.html":{}}}],["accountsservice",{"_index":52,"title":{"injectables/AccountsService.html":{}},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"injectables/SecurityService.html":{},"coverage.html":{},"overview.html":{}}}],["accounttype",{"_index":314,"title":{},"body":{"entities/Billing.html":{}}}],["action",{"_index":336,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/enumerations.html":{}}}],["addid",{"_index":493,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["address",{"_index":107,"title":{"entities/Address.html":{}},"body":{"modules/AccountsModule.html":{},"entities/Address.html":{},"entities/User.html":{},"coverage.html":{}}}],["address.entity",{"_index":707,"title":{},"body":{"entities/User.html":{}}}],["address.user",{"_index":716,"title":{},"body":{"entities/User.html":{}}}],["address.user)@joincolumn({name",{"_index":674,"title":{},"body":{"entities/User.html":{}}}],["address_id",{"_index":717,"title":{},"body":{"entities/User.html":{}}}],["address_id'})@apiproperty",{"_index":675,"title":{},"body":{"entities/User.html":{}}}],["admin",{"_index":21,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/PostsController.html":{},"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":925,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amqp",{"_index":795,"title":{},"body":{"dependencies.html":{}}}],["amqplib",{"_index":799,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["api/accounts/accounts.service",{"_index":640,"title":{},"body":{"injectables/SecurityService.html":{}}}],["api/accounts/entities/user.entity",{"_index":338,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/SecurityService.html":{}}}],["api/images/images.module",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["api/posts/entities/post.entity",{"_index":339,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["api/posts/posts.module",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["api/videos/videos.module",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["apibody",{"_index":54,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apioperation",{"_index":55,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/PostsController.html":{}}}],["apioperation({summary",{"_index":500,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":172,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"classes/TokenDto.html":{},"entities/User.html":{}}}],["apiproperty({type",{"_index":577,"title":{},"body":{"entities/Role.html":{}}}],["apiresponse",{"_index":56,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/PostsController.html":{}}}],["apitags",{"_index":57,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/PostsController.html":{}}}],["apitags('account",{"_index":65,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apitags('social",{"_index":516,"title":{},"body":{"controllers/PostsController.html":{}}}],["app",{"_index":901,"title":{},"body":{"miscellaneous/functions.html":{}}}],["app.controller",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["appability",{"_index":341,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["appcontroller",{"_index":177,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":180,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps/.../action.enum.ts",{"_index":887,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../auth.interface.ts",{"_index":928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../casl",{"_index":926,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../constants.ts",{"_index":929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":894,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/.../repl.ts",{"_index":895,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../role.enum.ts",{"_index":888,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../roles.decorator.ts",{"_index":930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/api/src/api/accounts/accounts.controller.ts",{"_index":6,"title":{},"body":{"controllers/AccountsController.html":{},"coverage.html":{}}}],["apps/api/src/api/accounts/accounts.controller.ts:22",{"_index":45,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apps/api/src/api/accounts/accounts.controller.ts:32",{"_index":37,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apps/api/src/api/accounts/accounts.controller.ts:39",{"_index":42,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apps/api/src/api/accounts/accounts.controller.ts:45",{"_index":47,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apps/api/src/api/accounts/accounts.controller.ts:51",{"_index":27,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apps/api/src/api/accounts/accounts.module",{"_index":606,"title":{},"body":{"modules/SecurityModule.html":{}}}],["apps/api/src/api/accounts/accounts.module.ts",{"_index":97,"title":{},"body":{"modules/AccountsModule.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts",{"_index":113,"title":{},"body":{"injectables/AccountsService.html":{},"coverage.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:12",{"_index":133,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:18",{"_index":127,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:22",{"_index":137,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:26",{"_index":138,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:30",{"_index":129,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:34",{"_index":136,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:7",{"_index":120,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts",{"_index":149,"title":{},"body":{"entities/Address.html":{},"coverage.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:12",{"_index":165,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:15",{"_index":158,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:18",{"_index":160,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:21",{"_index":159,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:24",{"_index":161,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:28",{"_index":168,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:9",{"_index":164,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/billing.entity.ts",{"_index":311,"title":{},"body":{"entities/Billing.html":{},"coverage.html":{}}}],["apps/api/src/api/accounts/entities/billing.entity.ts:12",{"_index":318,"title":{},"body":{"entities/Billing.html":{}}}],["apps/api/src/api/accounts/entities/billing.entity.ts:15",{"_index":317,"title":{},"body":{"entities/Billing.html":{}}}],["apps/api/src/api/accounts/entities/billing.entity.ts:18",{"_index":319,"title":{},"body":{"entities/Billing.html":{}}}],["apps/api/src/api/accounts/entities/billing.entity.ts:22",{"_index":321,"title":{},"body":{"entities/Billing.html":{}}}],["apps/api/src/api/accounts/entities/billing.entity.ts:9",{"_index":316,"title":{},"body":{"entities/Billing.html":{}}}],["apps/api/src/api/accounts/entities/profile.entity.ts",{"_index":543,"title":{},"body":{"entities/Profile.html":{},"coverage.html":{}}}],["apps/api/src/api/accounts/entities/profile.entity.ts:12",{"_index":547,"title":{},"body":{"entities/Profile.html":{}}}],["apps/api/src/api/accounts/entities/profile.entity.ts:15",{"_index":549,"title":{},"body":{"entities/Profile.html":{}}}],["apps/api/src/api/accounts/entities/profile.entity.ts:19",{"_index":551,"title":{},"body":{"entities/Profile.html":{}}}],["apps/api/src/api/accounts/entities/profile.entity.ts:9",{"_index":548,"title":{},"body":{"entities/Profile.html":{}}}],["apps/api/src/api/accounts/entities/user.entity",{"_index":574,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts",{"_index":671,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:31",{"_index":685,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:35",{"_index":701,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:39",{"_index":684,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:43",{"_index":687,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:48",{"_index":682,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:53",{"_index":689,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:59",{"_index":695,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:64",{"_index":676,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:69",{"_index":679,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:73",{"_index":692,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:81",{"_index":700,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:86",{"_index":702,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:90",{"_index":686,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/images/images.controller.ts",{"_index":427,"title":{},"body":{"controllers/ImagesController.html":{},"coverage.html":{}}}],["apps/api/src/api/images/images.module.ts",{"_index":434,"title":{},"body":{"modules/ImagesModule.html":{}}}],["apps/api/src/api/images/images.service.ts",{"_index":436,"title":{},"body":{"injectables/ImagesService.html":{},"coverage.html":{}}}],["apps/api/src/api/posts/dto/createposts.dto.ts",{"_index":399,"title":{},"body":{"classes/CreatePostsDto.html":{},"coverage.html":{}}}],["apps/api/src/api/posts/dto/createposts.dto.ts:10",{"_index":405,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["apps/api/src/api/posts/dto/createposts.dto.ts:14",{"_index":404,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["apps/api/src/api/posts/dto/createposts.dto.ts:6",{"_index":406,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["apps/api/src/api/posts/dto/updateposts.dto.ts",{"_index":667,"title":{},"body":{"classes/UpdatePostsDto.html":{},"coverage.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts",{"_index":464,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:22",{"_index":481,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:25",{"_index":483,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:28",{"_index":473,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:31",{"_index":472,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:35",{"_index":471,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:38",{"_index":482,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:41",{"_index":475,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:44",{"_index":484,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:47",{"_index":476,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/posts.controller.ts",{"_index":497,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["apps/api/src/api/posts/posts.controller.ts:13",{"_index":503,"title":{},"body":{"controllers/PostsController.html":{}}}],["apps/api/src/api/posts/posts.controller.ts:18",{"_index":508,"title":{},"body":{"controllers/PostsController.html":{}}}],["apps/api/src/api/posts/posts.controller.ts:23",{"_index":513,"title":{},"body":{"controllers/PostsController.html":{}}}],["apps/api/src/api/posts/posts.controller.ts:28",{"_index":511,"title":{},"body":{"controllers/PostsController.html":{}}}],["apps/api/src/api/posts/posts.controller.ts:33",{"_index":506,"title":{},"body":{"controllers/PostsController.html":{}}}],["apps/api/src/api/posts/posts.module.ts",{"_index":526,"title":{},"body":{"modules/PostsModule.html":{}}}],["apps/api/src/api/posts/posts.service.ts",{"_index":530,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["apps/api/src/api/posts/posts.service.ts:12",{"_index":536,"title":{},"body":{"injectables/PostsService.html":{}}}],["apps/api/src/api/posts/posts.service.ts:16",{"_index":540,"title":{},"body":{"injectables/PostsService.html":{}}}],["apps/api/src/api/posts/posts.service.ts:20",{"_index":537,"title":{},"body":{"injectables/PostsService.html":{}}}],["apps/api/src/api/posts/posts.service.ts:24",{"_index":538,"title":{},"body":{"injectables/PostsService.html":{}}}],["apps/api/src/api/posts/posts.service.ts:28",{"_index":539,"title":{},"body":{"injectables/PostsService.html":{}}}],["apps/api/src/api/posts/posts.service.ts:7",{"_index":534,"title":{},"body":{"injectables/PostsService.html":{}}}],["apps/api/src/api/videos/videos.controller.ts",{"_index":722,"title":{},"body":{"controllers/VideosController.html":{},"coverage.html":{}}}],["apps/api/src/api/videos/videos.module.ts",{"_index":729,"title":{},"body":{"modules/VideosModule.html":{}}}],["apps/api/src/api/videos/videos.service.ts",{"_index":731,"title":{},"body":{"injectables/VideosService.html":{},"coverage.html":{}}}],["apps/api/src/app.controller.ts",{"_index":178,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/api/src/app.module.ts",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/api/src/main.ts",{"_index":741,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/repl.ts",{"_index":746,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["apps/api/src/security/constants.ts",{"_index":747,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/security/dto/login.dto.ts",{"_index":457,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["apps/api/src/security/dto/login.dto.ts:14",{"_index":459,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/security/dto/login.dto.ts:19",{"_index":461,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/security/dto/login.dto.ts:8",{"_index":462,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/security/dto/register.dto.ts",{"_index":555,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["apps/api/src/security/dto/register.dto.ts:15",{"_index":561,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/security/dto/register.dto.ts:21",{"_index":562,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/security/dto/register.dto.ts:28",{"_index":559,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/security/dto/register.dto.ts:34",{"_index":564,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/security/dto/register.dto.ts:9",{"_index":565,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/security/dto/token.dto.ts",{"_index":656,"title":{},"body":{"classes/TokenDto.html":{},"coverage.html":{}}}],["apps/api/src/security/dto/token.dto.ts:11",{"_index":662,"title":{},"body":{"classes/TokenDto.html":{}}}],["apps/api/src/security/dto/token.dto.ts:5",{"_index":661,"title":{},"body":{"classes/TokenDto.html":{}}}],["apps/api/src/security/dto/token.dto.ts:8",{"_index":660,"title":{},"body":{"classes/TokenDto.html":{}}}],["apps/api/src/security/guards/auth.guard.ts",{"_index":261,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["apps/api/src/security/guards/auth.guard.ts:14",{"_index":267,"title":{},"body":{"guards/AuthGuard.html":{}}}],["apps/api/src/security/guards/auth.guard.ts:17",{"_index":270,"title":{},"body":{"guards/AuthGuard.html":{}}}],["apps/api/src/security/guards/auth.guard.ts:44",{"_index":274,"title":{},"body":{"guards/AuthGuard.html":{}}}],["apps/api/src/security/guards/roles.guard.ts",{"_index":586,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["apps/api/src/security/guards/roles.guard.ts:10",{"_index":589,"title":{},"body":{"guards/RolesGuard.html":{}}}],["apps/api/src/security/guards/roles.guard.ts:7",{"_index":588,"title":{},"body":{"guards/RolesGuard.html":{}}}],["apps/api/src/security/interfaces/auth.interface.ts",{"_index":749,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/security/interfaces/requestwithuser.interface.ts",{"_index":573,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["apps/api/src/security/interfaces/tokenpayload.interface.ts",{"_index":664,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["apps/api/src/security/roles/casl/casl",{"_index":325,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/security/roles/decorators/roles.decorator.ts",{"_index":751,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/security/roles/entities/role.entity.ts",{"_index":575,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["apps/api/src/security/roles/entities/role.entity.ts:14",{"_index":576,"title":{},"body":{"entities/Role.html":{}}}],["apps/api/src/security/roles/entities/role.entity.ts:19",{"_index":581,"title":{},"body":{"entities/Role.html":{}}}],["apps/api/src/security/roles/enum/action.enum.ts",{"_index":889,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/api/src/security/roles/enum/role.enum.ts",{"_index":891,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/api/src/security/roles/roles.module.ts",{"_index":598,"title":{},"body":{"modules/RolesModule.html":{}}}],["apps/api/src/security/security.module.ts",{"_index":605,"title":{},"body":{"modules/SecurityModule.html":{}}}],["apps/api/src/security/security.service.ts",{"_index":618,"title":{},"body":{"injectables/SecurityService.html":{},"coverage.html":{}}}],["apps/api/src/security/security.service.ts:12",{"_index":636,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:21",{"_index":633,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:30",{"_index":629,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:34",{"_index":630,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:38",{"_index":631,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:42",{"_index":627,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:46",{"_index":634,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:9",{"_index":625,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/strategies/local.strategy.ts",{"_index":438,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["apps/api/src/security/strategies/local.strategy.ts:12",{"_index":445,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["apps/api/src/security/strategies/local.strategy.ts:7",{"_index":442,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["appwrite",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["assigning",{"_index":297,"title":{},"body":{"guards/AuthGuard.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SecurityService.html":{}}}],["authguard",{"_index":202,"title":{"guards/AuthGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"coverage.html":{}}}],["author",{"_index":400,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{},"properties.html":{}}}],["authorid",{"_index":350,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"entities/Post.html":{}}}],["authservice",{"_index":443,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["autoloadentities",{"_index":425,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["available",{"_index":913,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":544,"title":{},"body":{"entities/Profile.html":{}}}],["await",{"_index":304,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"injectables/SecurityService.html":{}}}],["axios",{"_index":801,"title":{},"body":{"dependencies.html":{}}}],["basic",{"_index":67,"title":{},"body":{"controllers/AccountsController.html":{}}}],["bcrypt",{"_index":637,"title":{},"body":{"injectables/SecurityService.html":{},"dependencies.html":{}}}],["bcrypt.hash(register.password",{"_index":646,"title":{},"body":{"injectables/SecurityService.html":{}}}],["bearer",{"_index":310,"title":{},"body":{"guards/AuthGuard.html":{}}}],["beforeinsert",{"_index":485,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["billing",{"_index":105,"title":{"entities/Billing.html":{}},"body":{"modules/AccountsModule.html":{},"entities/Billing.html":{},"entities/User.html":{},"coverage.html":{}}}],["billing.entity",{"_index":708,"title":{},"body":{"entities/User.html":{}}}],["billing.user",{"_index":718,"title":{},"body":{"entities/User.html":{}}}],["billing.user)@joincolumn({name",{"_index":677,"title":{},"body":{"entities/User.html":{}}}],["billing_id",{"_index":719,"title":{},"body":{"entities/User.html":{}}}],["billing_id'})@apiproperty",{"_index":678,"title":{},"body":{"entities/User.html":{}}}],["bio",{"_index":545,"title":{},"body":{"entities/Profile.html":{}}}],["boolean",{"_index":389,"title":{},"body":{"injectables/ConfigurationService.html":{},"entities/Post.html":{},"guards/RolesGuard.html":{},"entities/User.html":{}}}],["booleans",{"_index":720,"title":{},"body":{"entities/User.html":{}}}],["bootstrap",{"_index":743,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":911,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":908,"title":{},"body":{"modules.html":{}}}],["build",{"_index":342,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["bull",{"_index":804,"title":{},"body":{"dependencies.html":{}}}],["cache",{"_index":806,"title":{},"body":{"dependencies.html":{}}}],["can(action.manage",{"_index":344,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.read",{"_index":348,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.update",{"_index":349,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["canactivate",{"_index":262,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":268,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["cannot(action.delete",{"_index":352,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["cascade",{"_index":697,"title":{},"body":{"entities/User.html":{}}}],["casl/ability",{"_index":335,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"dependencies.html":{}}}],["caslabilityfactory",{"_index":324,"title":{"injectables/CaslAbilityFactory.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{}}}],["catch",{"_index":308,"title":{},"body":{"guards/AuthGuard.html":{}}}],["chalk",{"_index":745,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["city",{"_index":151,"title":{},"body":{"entities/Address.html":{}}}],["class",{"_index":71,"title":{"classes/CreatePostsDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/TokenDto.html":{},"classes/UpdatePostsDto.html":{}},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":356,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/CreatePostsDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/TokenDto.html":{},"classes/UpdatePostsDto.html":{},"overview.html":{}}}],["classic",{"_index":874,"title":{},"body":{"dependencies.html":{}}}],["clsx",{"_index":878,"title":{},"body":{"dependencies.html":{}}}],["cluster_accountsmodule",{"_index":91,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_exports",{"_index":92,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_providers",{"_index":93,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_configurationmodule",{"_index":364,"title":{},"body":{"modules/ConfigurationModule.html":{},"overview.html":{}}}],["cluster_configurationmodule_exports",{"_index":365,"title":{},"body":{"modules/ConfigurationModule.html":{},"overview.html":{}}}],["cluster_configurationmodule_providers",{"_index":366,"title":{},"body":{"modules/ConfigurationModule.html":{},"overview.html":{}}}],["cluster_imagesmodule",{"_index":432,"title":{},"body":{"modules/ImagesModule.html":{},"overview.html":{}}}],["cluster_imagesmodule_providers",{"_index":433,"title":{},"body":{"modules/ImagesModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":523,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":525,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_providers",{"_index":524,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_securitymodule",{"_index":601,"title":{},"body":{"modules/SecurityModule.html":{},"overview.html":{}}}],["cluster_securitymodule_exports",{"_index":604,"title":{},"body":{"modules/SecurityModule.html":{},"overview.html":{}}}],["cluster_securitymodule_imports",{"_index":603,"title":{},"body":{"modules/SecurityModule.html":{},"overview.html":{}}}],["cluster_securitymodule_providers",{"_index":602,"title":{},"body":{"modules/SecurityModule.html":{},"overview.html":{}}}],["cluster_videosmodule",{"_index":727,"title":{},"body":{"modules/VideosModule.html":{},"overview.html":{}}}],["cluster_videosmodule_providers",{"_index":728,"title":{},"body":{"modules/VideosModule.html":{},"overview.html":{}}}],["column",{"_index":169,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Post.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["column()@apiproperty",{"_index":157,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Profile.html":{},"entities/User.html":{}}}],["column()@apiproperty()@exclude",{"_index":688,"title":{},"body":{"entities/User.html":{}}}],["column()@apiproperty({type",{"_index":683,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":680,"title":{},"body":{"entities/User.html":{}}}],["compression",{"_index":811,"title":{},"body":{"dependencies.html":{}}}],["condition",{"_index":290,"title":{},"body":{"guards/AuthGuard.html":{}}}],["configmodule",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule.forroot",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":411,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_host",{"_index":417,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_name",{"_index":422,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_password",{"_index":421,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_port",{"_index":418,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_schema",{"_index":423,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_user",{"_index":419,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configuration.service",{"_index":369,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configurationmodule",{"_index":363,"title":{"modules/ConfigurationModule.html":{}},"body":{"modules/ConfigurationModule.html":{},"modules.html":{},"overview.html":{}}}],["configurationservice",{"_index":367,"title":{"injectables/ConfigurationService.html":{}},"body":{"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"coverage.html":{},"overview.html":{}}}],["connection",{"_index":796,"title":{},"body":{"dependencies.html":{}}}],["const",{"_index":284,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{}}}],["constants",{"_index":280,"title":{},"body":{"guards/AuthGuard.html":{},"modules/SecurityModule.html":{}}}],["constructor",{"_index":117,"title":{},"body":{"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/ConfigurationService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/SecurityService.html":{}}}],["constructor(authservice",{"_index":440,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(env",{"_index":374,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["constructor(jwtservice",{"_index":264,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(postsrepository",{"_index":533,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":72,"title":{},"body":{"controllers/AccountsController.html":{},"guards/AuthGuard.html":{},"controllers/ImagesController.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"controllers/VideosController.html":{}}}],["constructor(reflector",{"_index":587,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(userrepository",{"_index":118,"title":{},"body":{"injectables/AccountsService.html":{}}}],["constructor(userservice",{"_index":624,"title":{},"body":{"injectables/SecurityService.html":{}}}],["content",{"_index":401,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{}}}],["context",{"_index":271,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":288,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":287,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":291,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AccountsController.html":{},"controllers/AppController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}},"body":{"controllers/AccountsController.html":{},"controllers/AppController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{},"coverage.html":{}}}],["controller('accounts",{"_index":69,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/PostsController.html":{}}}],["controller('images",{"_index":431,"title":{},"body":{"controllers/ImagesController.html":{}}}],["controller('videos",{"_index":726,"title":{},"body":{"controllers/VideosController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"overview.html":{}}}],["cookie",{"_index":813,"title":{},"body":{"dependencies.html":{}}}],["country",{"_index":152,"title":{},"body":{"entities/Address.html":{}}}],["county",{"_index":153,"title":{},"body":{"entities/Address.html":{}}}],["cover",{"_index":546,"title":{},"body":{"entities/Profile.html":{}}}],["coverage",{"_index":732,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cpx",{"_index":816,"title":{},"body":{"dependencies.html":{}}}],["create",{"_index":114,"title":{},"body":{"injectables/AccountsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"miscellaneous/enumerations.html":{}}}],["create(user",{"_index":126,"title":{},"body":{"injectables/AccountsService.html":{}}}],["created",{"_index":75,"title":{},"body":{"controllers/AccountsController.html":{}}}],["created.'})@apioperation({summary",{"_index":33,"title":{},"body":{"controllers/AccountsController.html":{}}}],["createdat",{"_index":465,"title":{},"body":{"entities/Post.html":{}}}],["createforuser",{"_index":327,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createforuser(user",{"_index":328,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createposts.dto",{"_index":669,"title":{},"body":{"classes/UpdatePostsDto.html":{}}}],["createpostsdto",{"_index":398,"title":{"classes/CreatePostsDto.html":{}},"body":{"classes/CreatePostsDto.html":{},"classes/UpdatePostsDto.html":{},"coverage.html":{}}}],["crypto",{"_index":818,"title":{},"body":{"dependencies.html":{}}}],["csurf",{"_index":820,"title":{},"body":{"dependencies.html":{}}}],["database",{"_index":215,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["database/database",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["database_host",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["database_name",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["database_password",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["database_port",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["database_schema",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["database_user",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":183,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":474,"title":{},"body":{"entities/Post.html":{}}}],["decorators",{"_index":17,"title":{},"body":{"controllers/AccountsController.html":{},"entities/Address.html":{},"entities/Billing.html":{},"classes/CreatePostsDto.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"classes/TokenDto.html":{},"entities/User.html":{}}}],["default",{"_index":385,"title":{},"body":{"injectables/ConfigurationService.html":{},"entities/Role.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":376,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["defaultstrategy",{"_index":612,"title":{},"body":{"modules/SecurityModule.html":{}}}],["defined",{"_index":26,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"entities/User.html":{}}}],["delete",{"_index":12,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"miscellaneous/enumerations.html":{}}}],["delete('delete",{"_index":84,"title":{},"body":{"controllers/AccountsController.html":{}}}],["delete('post:delete",{"_index":522,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('post:delete:soft",{"_index":521,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletedat",{"_index":466,"title":{},"body":{"entities/Post.html":{}}}],["dependencies",{"_index":90,"title":{"dependencies.html":{}},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/ImagesModule.html":{},"modules/PostsModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":24,"title":{},"body":{"controllers/AccountsController.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Role.html":{},"entities/User.html":{},"properties.html":{}}}],["details",{"_index":359,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["detection#use",{"_index":355,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["detectsubjecttype",{"_index":360,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["discord",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["discord.js",{"_index":822,"title":{},"body":{"dependencies.html":{}}}],["docker",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["docs",{"_index":907,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["docusaurus/core",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["docusaurus/preset",{"_index":873,"title":{},"body":{"dependencies.html":{}}}],["dom",{"_index":884,"title":{},"body":{"dependencies.html":{}}}],["dotenv",{"_index":824,"title":{},"body":{"dependencies.html":{}}}],["dto/login.dto",{"_index":639,"title":{},"body":{"injectables/SecurityService.html":{}}}],["dto/register.dto",{"_index":638,"title":{},"body":{"injectables/SecurityService.html":{}}}],["ejs",{"_index":256,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["elliptic",{"_index":827,"title":{},"body":{"dependencies.html":{}}}],["email",{"_index":132,"title":{},"body":{"injectables/AccountsService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["emitter",{"_index":778,"title":{},"body":{"dependencies.html":{}}}],["entities",{"_index":148,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"modules/DatabaseModule.html":{},"entities/Post.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/address.entity",{"_index":108,"title":{},"body":{"modules/AccountsModule.html":{}}}],["entities/billing.entity",{"_index":106,"title":{},"body":{"modules/AccountsModule.html":{}}}],["entities/post.entity",{"_index":528,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["entities/profile.entity",{"_index":104,"title":{},"body":{"modules/AccountsModule.html":{}}}],["entities/role.entity",{"_index":599,"title":{},"body":{"modules/RolesModule.html":{}}}],["entities/user.entity",{"_index":103,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{}}}],["entity",{"_index":147,"title":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Post.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Post.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('address",{"_index":174,"title":{},"body":{"entities/Address.html":{}}}],["entity('billing",{"_index":322,"title":{},"body":{"entities/Billing.html":{}}}],["entity('post",{"_index":491,"title":{},"body":{"entities/Post.html":{}}}],["entity('profile",{"_index":552,"title":{},"body":{"entities/Profile.html":{}}}],["entity('roles",{"_index":582,"title":{},"body":{"entities/Role.html":{}}}],["entity('user",{"_index":713,"title":{},"body":{"entities/User.html":{}}}],["enum/action.enum",{"_index":337,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["enumerations",{"_index":886,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":378,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["everything",{"_index":347,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["exclude",{"_index":709,"title":{},"body":{"entities/User.html":{}}}],["executioncontext",{"_index":269,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["expires_in",{"_index":658,"title":{},"body":{"classes/TokenDto.html":{}}}],["expiresin",{"_index":616,"title":{},"body":{"modules/SecurityModule.html":{}}}],["export",{"_index":70,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{}}}],["exports",{"_index":99,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ConfigurationModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{}}}],["express",{"_index":278,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/RequestWithUser.html":{},"dependencies.html":{}}}],["extends",{"_index":452,"title":{},"body":{"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdatePostsDto.html":{}}}],["extensions",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["extractsubjecttype",{"_index":333,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["extracttokenfromheader",{"_index":263,"title":{},"body":{"guards/AuthGuard.html":{}}}],["extracttokenfromheader(request",{"_index":272,"title":{},"body":{"guards/AuthGuard.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"coverage.html":{}}}],["findone",{"_index":115,"title":{},"body":{"injectables/AccountsService.html":{}}}],["findone(username",{"_index":130,"title":{},"body":{"injectables/AccountsService.html":{}}}],["firstname",{"_index":556,"title":{},"body":{"classes/RegisterDto.html":{},"entities/User.html":{}}}],["forbidden",{"_index":77,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/PostsController.html":{}}}],["forbidden.'})@delete('delete",{"_index":25,"title":{},"body":{"controllers/AccountsController.html":{}}}],["forbidden.'})@delete('post:delete",{"_index":505,"title":{},"body":{"controllers/PostsController.html":{}}}],["forbidden.'})@delete('post:delete:soft",{"_index":510,"title":{},"body":{"controllers/PostsController.html":{}}}],["forbidden.'})@get('post:read",{"_index":507,"title":{},"body":{"controllers/PostsController.html":{}}}],["forbidden.'})@get('profile",{"_index":41,"title":{},"body":{"controllers/AccountsController.html":{}}}],["forbidden.'})@post('login",{"_index":36,"title":{},"body":{"controllers/AccountsController.html":{}}}],["forbidden.'})@post('post:create",{"_index":502,"title":{},"body":{"controllers/PostsController.html":{}}}],["forbidden.'})@post('register",{"_index":44,"title":{},"body":{"controllers/AccountsController.html":{}}}],["forbidden.'})@put('post:update",{"_index":512,"title":{},"body":{"controllers/PostsController.html":{}}}],["forbidden.'})@put('update",{"_index":46,"title":{},"body":{"controllers/AccountsController.html":{}}}],["forgotpassword",{"_index":619,"title":{},"body":{"injectables/SecurityService.html":{}}}],["function",{"_index":742,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":893,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('post:read",{"_index":519,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('profile",{"_index":81,"title":{},"body":{"controllers/AccountsController.html":{}}}],["get(key",{"_index":379,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getall",{"_index":116,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getarray",{"_index":371,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getarray(key",{"_index":382,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getboolean",{"_index":372,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getboolean(key",{"_index":387,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getnumber",{"_index":373,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getnumber(key",{"_index":390,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getpost",{"_index":531,"title":{},"body":{"injectables/PostsService.html":{}}}],["getposts",{"_index":532,"title":{},"body":{"injectables/PostsService.html":{}}}],["getting",{"_index":902,"title":{"index.html":{}},"body":{}}],["global",{"_index":614,"title":{},"body":{"modules/SecurityModule.html":{}}}],["graph",{"_index":912,"title":{},"body":{"modules.html":{}}}],["grpc",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["grpc/grpc",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["grpc/proto",{"_index":766,"title":{},"body":{"dependencies.html":{}}}],["grpc_host",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["grpc_package",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["grpc_proto_path",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["guard",{"_index":259,"title":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":260,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["guest",{"_index":892,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hads",{"_index":831,"title":{},"body":{"dependencies.html":{}}}],["handlers",{"_index":302,"title":{},"body":{"guards/AuthGuard.html":{}}}],["hard",{"_index":504,"title":{},"body":{"controllers/PostsController.html":{}}}],["harddelete",{"_index":498,"title":{},"body":{"controllers/PostsController.html":{}}}],["hashedpassword",{"_index":645,"title":{},"body":{"injectables/SecurityService.html":{}}}],["helmet",{"_index":833,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":300,"title":{},"body":{"guards/AuthGuard.html":{}}}],["host",{"_index":416,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["https://casl.js.org/v5/en/guide/subject",{"_index":354,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["id",{"_index":467,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["id'})@apiproperty({description",{"_index":478,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["identifier",{"_index":480,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["images",{"_index":428,"title":{},"body":{"controllers/ImagesController.html":{}}}],["images.controller",{"_index":435,"title":{},"body":{"modules/ImagesModule.html":{}}}],["images.service",{"_index":430,"title":{},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{}}}],["imagescontroller",{"_index":426,"title":{"controllers/ImagesController.html":{}},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"coverage.html":{}}}],["imagesmodule",{"_index":184,"title":{"modules/ImagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ImagesModule.html":{},"modules.html":{},"overview.html":{}}}],["imagesservice",{"_index":429,"title":{"injectables/ImagesService.html":{}},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"coverage.html":{},"overview.html":{}}}],["implements",{"_index":283,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":48,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{}}}],["imports",{"_index":109,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":900,"title":{},"body":{"miscellaneous/functions.html":{}}}],["infersubjects",{"_index":334,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{}}}],["inject",{"_index":413,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["injectable",{"_index":111,"title":{"injectables/AccountsService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"injectables/SecurityService.html":{},"injectables/VideosService.html":{}},"body":{"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"injectables/VideosService.html":{},"coverage.html":{}}}],["injectables",{"_index":112,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"injectables/SecurityService.html":{},"injectables/VideosService.html":{},"overview.html":{}}}],["injectrepository",{"_index":139,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":541,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(user",{"_index":141,"title":{},"body":{"injectables/AccountsService.html":{}}}],["interface",{"_index":570,"title":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":572,"title":{},"body":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"overview.html":{}}}],["interfaces/auth.interface",{"_index":282,"title":{},"body":{"guards/AuthGuard.html":{}}}],["ioredis",{"_index":835,"title":{},"body":{"dependencies.html":{}}}],["is_public_key",{"_index":281,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isadmin",{"_index":672,"title":{},"body":{"entities/User.html":{}}}],["isemail",{"_index":463,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isglobal",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":407,"title":{},"body":{"classes/CreatePostsDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty()@isstring()@minlength(16)@apiproperty",{"_index":563,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isnotempty()@isstring()@minlength(3)@apiproperty",{"_index":560,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isnotempty()@isstring()@minlength(8)@isemail()@apiproperty",{"_index":558,"title":{},"body":{"classes/RegisterDto.html":{}}}],["ispublic",{"_index":285,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ispublished",{"_index":353,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"entities/Post.html":{}}}],["isstring",{"_index":408,"title":{},"body":{"classes/CreatePostsDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isnotempty",{"_index":403,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["isstring()@isnotempty()@apiproperty",{"_index":460,"title":{},"body":{"classes/LoginDto.html":{}}}],["isstring()@isnotempty()@isemail()@apiproperty",{"_index":458,"title":{},"body":{"classes/LoginDto.html":{}}}],["item",{"_index":361,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["item.constructor",{"_index":362,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["joi",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.number().required",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":251,"title":{},"body":{"modules/AppModule.html":{}}}],["joincolumn",{"_index":486,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["jointable",{"_index":703,"title":{},"body":{"entities/User.html":{}}}],["js",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["js/react",{"_index":876,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["jwt_expiration_time",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_secret",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtconstants",{"_index":279,"title":{},"body":{"guards/AuthGuard.html":{},"modules/SecurityModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":307,"title":{},"body":{"guards/AuthGuard.html":{},"modules/SecurityModule.html":{}}}],["jwtmodule",{"_index":608,"title":{},"body":{"modules/SecurityModule.html":{}}}],["jwtmodule.register",{"_index":613,"title":{},"body":{"modules/SecurityModule.html":{}}}],["jwtservice",{"_index":265,"title":{},"body":{"guards/AuthGuard.html":{}}}],["k",{"_index":392,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["kafka",{"_index":244,"title":{},"body":{"modules/AppModule.html":{}}}],["kafka_client_id",{"_index":246,"title":{},"body":{"modules/AppModule.html":{}}}],["kafka_host",{"_index":245,"title":{},"body":{"modules/AppModule.html":{}}}],["kafkajs",{"_index":838,"title":{},"body":{"dependencies.html":{}}}],["key",{"_index":381,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["lastname",{"_index":557,"title":{},"body":{"classes/RegisterDto.html":{},"entities/User.html":{}}}],["length",{"_index":585,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["libs/.../microservice.ts",{"_index":896,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../nodemailer.ts",{"_index":897,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../swagger.ts",{"_index":898,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/configuration/src/configuration.module.ts",{"_index":368,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["libs/configuration/src/configuration.service.ts",{"_index":370,"title":{},"body":{"injectables/ConfigurationService.html":{},"coverage.html":{}}}],["libs/configuration/src/configuration.service.ts:10",{"_index":380,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["libs/configuration/src/configuration.service.ts:14",{"_index":391,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["libs/configuration/src/configuration.service.ts:18",{"_index":388,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["libs/configuration/src/configuration.service.ts:22",{"_index":384,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["libs/configuration/src/configuration.service.ts:4",{"_index":377,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["libs/configuration/src/function/microservice.ts",{"_index":753,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/configuration/src/function/nodemailer.ts",{"_index":755,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/configuration/src/function/swagger.ts",{"_index":757,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/database/src/database.module.ts",{"_index":410,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["license",{"_index":922,"title":{},"body":{"properties.html":{}}}],["literal",{"_index":375,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["load",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["loader",{"_index":767,"title":{},"body":{"dependencies.html":{}}}],["local",{"_index":450,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/SecurityModule.html":{},"dependencies.html":{}}}],["localstrategy",{"_index":437,"title":{"injectables/LocalStrategy.html":{}},"body":{"injectables/LocalStrategy.html":{},"modules/SecurityModule.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":13,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/SecurityService.html":{}}}],["login(login",{"_index":628,"title":{},"body":{"injectables/SecurityService.html":{}}}],["login.password",{"_index":654,"title":{},"body":{"injectables/SecurityService.html":{}}}],["logindto",{"_index":456,"title":{"classes/LoginDto.html":{}},"body":{"classes/LoginDto.html":{},"injectables/SecurityService.html":{},"coverage.html":{}}}],["logout",{"_index":620,"title":{},"body":{"injectables/SecurityService.html":{}}}],["manage",{"_index":890,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["management",{"_index":66,"title":{},"body":{"controllers/AccountsController.html":{}}}],["manager",{"_index":797,"title":{},"body":{"dependencies.html":{}}}],["manytomany",{"_index":704,"title":{},"body":{"entities/User.html":{}}}],["manytomany(undefined",{"_index":696,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":487,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":469,"title":{},"body":{"entities/Post.html":{}}}],["matching",{"_index":86,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":578,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["mdx",{"_index":875,"title":{},"body":{"dependencies.html":{}}}],["metadata",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{}}}],["microservices",{"_index":754,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["minlength",{"_index":566,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minlength(16",{"_index":569,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minlength(3",{"_index":567,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minlength(8",{"_index":568,"title":{},"body":{"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":885,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":87,"title":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/ImagesModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/ImagesModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":89,"title":{"modules.html":{}},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/ImagesModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{},"modules.html":{},"overview.html":{}}}],["mqtt",{"_index":247,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["mqtt_host",{"_index":248,"title":{},"body":{"modules/AppModule.html":{}}}],["name",{"_index":122,"title":{},"body":{"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/LocalStrategy.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["nestjs/axios",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["nestjs/bull",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":51,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/cqrs",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["nestjs/event",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":277,"title":{},"body":{"guards/AuthGuard.html":{},"modules/SecurityModule.html":{},"dependencies.html":{}}}],["nestjs/microservices",{"_index":781,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":447,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/SecurityModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":783,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":785,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":58,"title":{},"body":{"controllers/AccountsController.html":{},"entities/Address.html":{},"entities/Billing.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"classes/TokenDto.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":789,"title":{},"body":{"dependencies.html":{}}}],["nestjs/throttler",{"_index":791,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":102,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/RolesModule.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":794,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":43,"title":{},"body":{"controllers/AccountsController.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/SecurityService.html":{},"coverage.html":{}}}],["node",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["node_port",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["nodemailer",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["npm",{"_index":905,"title":{},"body":{"index.html":{}}}],["null",{"_index":644,"title":{},"body":{"injectables/SecurityService.html":{}}}],["number",{"_index":162,"title":{},"body":{"entities/Address.html":{},"injectables/ConfigurationService.html":{},"classes/TokenDto.html":{}}}],["number(this.get(key",{"_index":395,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["nxie",{"_index":904,"title":{},"body":{"index.html":{}}}],["object",{"_index":299,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["onetomany",{"_index":705,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":690,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":170,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Profile.html":{},"entities/User.html":{}}}],["onetoone(undefined",{"_index":166,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Profile.html":{},"entities/User.html":{}}}],["only]'})@apiresponse({status",{"_index":22,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/PostsController.html":{}}}],["optional",{"_index":124,"title":{},"body":{"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":96,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/ImagesModule.html":{},"modules/PostsModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{},"overview.html":{}}}],["overview",{"_index":914,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":761,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":121,"title":{},"body":{"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"miscellaneous/functions.html":{}}}],["parser",{"_index":814,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":668,"title":{},"body":{"classes/UpdatePostsDto.html":{}}}],["partialtype(createpostsdto",{"_index":670,"title":{},"body":{"classes/UpdatePostsDto.html":{}}}],["passport",{"_index":449,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":607,"title":{},"body":{"modules/SecurityModule.html":{}}}],["passportmodule.register",{"_index":611,"title":{},"body":{"modules/SecurityModule.html":{}}}],["passportstrategy",{"_index":446,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":453,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["password",{"_index":420,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/SecurityService.html":{},"entities/User.html":{}}}],["path",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":298,"title":{},"body":{"guards/AuthGuard.html":{}}}],["permissions",{"_index":583,"title":{},"body":{"entities/Role.html":{}}}],["pg",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["port",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["post",{"_index":49,"title":{"entities/Post.html":{}},"body":{"controllers/AccountsController.html":{},"injectables/CaslAbilityFactory.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"coverage.html":{}}}],["post'})@apiresponse({status",{"_index":501,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('login",{"_index":79,"title":{},"body":{"controllers/AccountsController.html":{}}}],["post('post:create",{"_index":518,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('register",{"_index":78,"title":{},"body":{"controllers/AccountsController.html":{}}}],["post.authorid",{"_index":691,"title":{},"body":{"entities/User.html":{}}}],["postcode",{"_index":154,"title":{},"body":{"entities/Address.html":{}}}],["postgres",{"_index":415,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["posts",{"_index":517,"title":{},"body":{"controllers/PostsController.html":{},"entities/User.html":{}}}],["posts.controller",{"_index":527,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":515,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/entities/post.entity",{"_index":712,"title":{},"body":{"entities/User.html":{}}}],["postscontroller",{"_index":496,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":185,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":535,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":514,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["primarycolumn",{"_index":171,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Post.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["primarycolumn('uuid",{"_index":477,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["primarycolumn()@apiproperty",{"_index":163,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Profile.html":{}}}],["prism",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["private",{"_index":142,"title":{},"body":{"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/ConfigurationService.html":{},"injectables/PostsService.html":{}}}],["profile",{"_index":14,"title":{"entities/Profile.html":{}},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Profile.html":{},"entities/User.html":{},"coverage.html":{}}}],["profile'})@apiresponse({status",{"_index":40,"title":{},"body":{"controllers/AccountsController.html":{}}}],["profile.entity",{"_index":706,"title":{},"body":{"entities/User.html":{}}}],["profile.user",{"_index":714,"title":{},"body":{"entities/User.html":{}}}],["profile.user)@joincolumn({name",{"_index":693,"title":{},"body":{"entities/User.html":{}}}],["profile_id",{"_index":715,"title":{},"body":{"entities/User.html":{}}}],["profile_id'})@apiproperty",{"_index":694,"title":{},"body":{"entities/User.html":{}}}],["promise",{"_index":135,"title":{},"body":{"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SecurityService.html":{}}}],["promise.resolve(undefined",{"_index":146,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/PostsService.html":{},"injectables/SecurityService.html":{}}}],["properties",{"_index":150,"title":{"properties.html":{}},"body":{"entities/Address.html":{},"entities/Billing.html":{},"classes/CreatePostsDto.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"properties.html":{}}}],["propertyno",{"_index":155,"title":{},"body":{"entities/Address.html":{}}}],["provide",{"_index":257,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":98,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/ImagesModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{}}}],["public",{"_index":59,"title":{},"body":{"controllers/AccountsController.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@apiresponse({status",{"_index":29,"title":{},"body":{"controllers/AccountsController.html":{}}}],["put",{"_index":50,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/PostsController.html":{}}}],["put('post:update",{"_index":520,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('update",{"_index":82,"title":{},"body":{"controllers/AccountsController.html":{}}}],["rabbitmq",{"_index":239,"title":{},"body":{"modules/AppModule.html":{}}}],["rabbitmq_host",{"_index":240,"title":{},"body":{"modules/AppModule.html":{}}}],["rabbitmq_password",{"_index":243,"title":{},"body":{"modules/AppModule.html":{}}}],["rabbitmq_queue",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["rabbitmq_username",{"_index":242,"title":{},"body":{"modules/AppModule.html":{}}}],["react",{"_index":881,"title":{},"body":{"dependencies.html":{}}}],["read",{"_index":345,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"controllers/PostsController.html":{},"miscellaneous/enumerations.html":{}}}],["readonly",{"_index":73,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"controllers/ImagesController.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["record",{"_index":31,"title":{},"body":{"controllers/AccountsController.html":{}}}],["redis",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_host",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_password",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_port",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_username",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["reflect",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":266,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":621,"title":{},"body":{"injectables/SecurityService.html":{}}}],["refreshtoken",{"_index":659,"title":{},"body":{"classes/TokenDto.html":{}}}],["register",{"_index":15,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/SecurityService.html":{}}}],["register(register",{"_index":632,"title":{},"body":{"injectables/SecurityService.html":{}}}],["register.email",{"_index":651,"title":{},"body":{"injectables/SecurityService.html":{}}}],["register.username",{"_index":649,"title":{},"body":{"injectables/SecurityService.html":{}}}],["registerdto",{"_index":554,"title":{"classes/RegisterDto.html":{}},"body":{"classes/RegisterDto.html":{},"injectables/SecurityService.html":{},"coverage.html":{}}}],["registration",{"_index":68,"title":{},"body":{"controllers/AccountsController.html":{}}}],["render",{"_index":179,"title":{},"body":{"controllers/AppController.html":{}}}],["renderer",{"_index":882,"title":{},"body":{"dependencies.html":{}}}],["renderpath",{"_index":253,"title":{},"body":{"modules/AppModule.html":{}}}],["repository",{"_index":119,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/PostsService.html":{}}}],["request",{"_index":273,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/RequestWithUser.html":{}}}],["request.headers.authorization?.split",{"_index":309,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request['user",{"_index":303,"title":{},"body":{"guards/AuthGuard.html":{}}}],["requestwithuser",{"_index":571,"title":{"interfaces/RequestWithUser.html":{}},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["require('chalk",{"_index":931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requiredroles",{"_index":593,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":595,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":95,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/ImagesModule.html":{},"modules/PostsModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{},"overview.html":{}}}],["resetpassword",{"_index":622,"title":{},"body":{"injectables/SecurityService.html":{}}}],["result",{"_index":643,"title":{},"body":{"injectables/SecurityService.html":{}}}],["results",{"_index":85,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":143,"title":{},"body":{"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{}}}],["returns",{"_index":28,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{}}}],["rimraf",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":63,"title":{"entities/Role.html":{}},"body":{"controllers/AccountsController.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["roles",{"_index":61,"title":{},"body":{"controllers/AccountsController.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":83,"title":{},"body":{"controllers/AccountsController.html":{}}}],["roles(role.admin)@apioperation({summary",{"_index":19,"title":{},"body":{"controllers/AccountsController.html":{}}}],["roles(role.user",{"_index":80,"title":{},"body":{"controllers/AccountsController.html":{}}}],["roles(role.user)@apioperation({summary",{"_index":38,"title":{},"body":{"controllers/AccountsController.html":{}}}],["roles/decorators/roles.decorator",{"_index":592,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles/entities/role.entity",{"_index":590,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles/roles.module",{"_index":610,"title":{},"body":{"modules/SecurityModule.html":{}}}],["roles_key",{"_index":591,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":204,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesmodule",{"_index":597,"title":{"modules/RolesModule.html":{}},"body":{"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"modules.html":{},"overview.html":{}}}],["rootpath",{"_index":250,"title":{},"body":{"modules/AppModule.html":{}}}],["route",{"_index":301,"title":{},"body":{"guards/AuthGuard.html":{}}}],["run",{"_index":906,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["schema",{"_index":175,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"modules/DatabaseModule.html":{},"entities/Post.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["secret",{"_index":306,"title":{},"body":{"guards/AuthGuard.html":{},"modules/SecurityModule.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["security.service",{"_index":451,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/SecurityModule.html":{}}}],["security/guards/auth.guard",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["security/guards/roles.guard",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["security/interfaces/auth.interface",{"_index":60,"title":{},"body":{"controllers/AccountsController.html":{}}}],["security/roles/decorators/roles.decorator",{"_index":62,"title":{},"body":{"controllers/AccountsController.html":{}}}],["security/roles/entities/role.entity",{"_index":711,"title":{},"body":{"entities/User.html":{}}}],["security/roles/enum/role.enum",{"_index":64,"title":{},"body":{"controllers/AccountsController.html":{}}}],["security/security.module",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["securitymodule",{"_index":186,"title":{"modules/SecurityModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SecurityModule.html":{},"modules.html":{},"overview.html":{}}}],["securityservice",{"_index":441,"title":{"injectables/SecurityService.html":{}},"body":{"injectables/LocalStrategy.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"coverage.html":{},"overview.html":{}}}],["see",{"_index":289,"title":{},"body":{"guards/AuthGuard.html":{}}}],["separator",{"_index":383,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["servestaticmodule",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":249,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticoptions",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["session",{"_index":829,"title":{},"body":{"dependencies.html":{}}}],["setmetadata(is_public_key",{"_index":932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setupnodemailer",{"_index":756,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswagger",{"_index":758,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswagger(app",{"_index":899,"title":{},"body":{"miscellaneous/functions.html":{}}}],["signoptions",{"_index":615,"title":{},"body":{"modules/SecurityModule.html":{}}}],["social",{"_index":492,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{},"entities/User.html":{}}}],["socket.io",{"_index":784,"title":{},"body":{"dependencies.html":{}}}],["soft",{"_index":509,"title":{},"body":{"controllers/PostsController.html":{}}}],["softdelete",{"_index":499,"title":{},"body":{"controllers/PostsController.html":{}}}],["sortcode",{"_index":315,"title":{},"body":{"entities/Billing.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{}}}],["sqlite3",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["started",{"_index":903,"title":{"index.html":{}},"body":{}}],["statements",{"_index":734,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":198,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["status",{"_index":74,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/PostsController.html":{}}}],["strategies/local.strategy",{"_index":609,"title":{},"body":{"modules/SecurityModule.html":{}}}],["strategy",{"_index":448,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["street",{"_index":156,"title":{},"body":{"entities/Address.html":{}}}],["string",{"_index":131,"title":{},"body":{"injectables/AccountsService.html":{},"entities/Address.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":357,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["subjects",{"_index":340,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["successfully",{"_index":32,"title":{},"body":{"controllers/AccountsController.html":{}}}],["summary",{"_index":76,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/PostsController.html":{}}}],["super",{"_index":454,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["support",{"_index":909,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":910,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":424,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["table",{"_index":760,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":759,"title":{},"body":{"coverage.html":{}}}],["this.authservice.validateuser(username",{"_index":455,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.defaults[key",{"_index":394,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["this.env[key",{"_index":393,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["this.extracttokenfromheader(request",{"_index":293,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.get(key",{"_index":396,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["this.get(key).split(separator",{"_index":397,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["this.id",{"_index":494,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":305,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.postsrepository.find",{"_index":542,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":286,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":594,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.userrepository.findone",{"_index":144,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.userrepository.save(user",{"_index":145,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.userservice.create(user",{"_index":652,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.userservice.findone(login.username",{"_index":653,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.userservice.findone(username",{"_index":641,"title":{},"body":{"injectables/SecurityService.html":{}}}],["throw",{"_index":294,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["title",{"_index":402,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{}}}],["token",{"_index":292,"title":{},"body":{"guards/AuthGuard.html":{}}}],["tokendto",{"_index":655,"title":{"classes/TokenDto.html":{}},"body":{"classes/TokenDto.html":{},"coverage.html":{}}}],["tokenpayload",{"_index":663,"title":{"interfaces/TokenPayload.html":{}},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["transformer",{"_index":710,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["true",{"_index":211,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"modules/DatabaseModule.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/SecurityModule.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["true})@jointable({name",{"_index":698,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":295,"title":{},"body":{"guards/AuthGuard.html":{}}}],["twitter",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":123,"title":{},"body":{"injectables/AccountsService.html":{},"entities/Address.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":924,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":140,"title":{},"body":{"injectables/AccountsService.html":{},"entities/Address.html":{},"entities/Billing.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":101,"title":{},"body":{"modules/AccountsModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":529,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":600,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":110,"title":{},"body":{"modules/AccountsModule.html":{}}}],["typeormmodule.forrootasync",{"_index":412,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":358,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["unauthorizedexception",{"_index":276,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":275,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/ConfigurationService.html":{}}}],["unique",{"_index":479,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["unity",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["unknown",{"_index":128,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/PostsService.html":{},"injectables/SecurityService.html":{}}}],["unlicensed",{"_index":923,"title":{},"body":{"properties.html":{}}}],["update",{"_index":16,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"miscellaneous/enumerations.html":{}}}],["updatedat",{"_index":468,"title":{},"body":{"entities/Post.html":{}}}],["updatepostsdto",{"_index":666,"title":{"classes/UpdatePostsDto.html":{}},"body":{"classes/UpdatePostsDto.html":{},"coverage.html":{}}}],["useclass",{"_index":258,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":414,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["user",{"_index":34,"title":{"entities/User.html":{}},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/LocalStrategy.html":{},"entities/Post.html":{},"entities/Profile.html":{},"interfaces/RequestWithUser.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user.address",{"_index":176,"title":{},"body":{"entities/Address.html":{}}}],["user.address)@apiproperty",{"_index":167,"title":{},"body":{"entities/Address.html":{}}}],["user.billing",{"_index":323,"title":{},"body":{"entities/Billing.html":{}}}],["user.billing)@apiproperty",{"_index":320,"title":{},"body":{"entities/Billing.html":{}}}],["user.email",{"_index":650,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.entity",{"_index":173,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Profile.html":{}}}],["user.id",{"_index":351,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["user.isadmin",{"_index":343,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["user.password",{"_index":642,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.posts",{"_index":495,"title":{},"body":{"entities/Post.html":{}}}],["user.posts)@joincolumn({name",{"_index":470,"title":{},"body":{"entities/Post.html":{}}}],["user.profile",{"_index":553,"title":{},"body":{"entities/Profile.html":{}}}],["user.profile)@apiproperty",{"_index":550,"title":{},"body":{"entities/Profile.html":{}}}],["user.roles?.includes(role",{"_index":596,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.username",{"_index":648,"title":{},"body":{"injectables/SecurityService.html":{}}}],["userid",{"_index":665,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["username",{"_index":134,"title":{},"body":{"injectables/AccountsService.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/SecurityService.html":{},"entities/User.html":{}}}],["userrepository",{"_index":125,"title":{},"body":{"injectables/AccountsService.html":{}}}],["users_roles",{"_index":699,"title":{},"body":{"entities/User.html":{}}}],["userservice",{"_index":626,"title":{},"body":{"injectables/SecurityService.html":{}}}],["uuid",{"_index":489,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["v4",{"_index":488,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["validate",{"_index":439,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(username",{"_index":444,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateuser",{"_index":623,"title":{},"body":{"injectables/SecurityService.html":{}}}],["validateuser(username",{"_index":635,"title":{},"body":{"injectables/SecurityService.html":{}}}],["validation",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["validationschema",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":409,"title":{},"body":{"classes/CreatePostsDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["value",{"_index":386,"title":{},"body":{"injectables/ConfigurationService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":744,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":927,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verified",{"_index":673,"title":{},"body":{"entities/User.html":{}}}],["version",{"_index":920,"title":{},"body":{"properties.html":{}}}],["videos",{"_index":723,"title":{},"body":{"controllers/VideosController.html":{}}}],["videos.controller",{"_index":730,"title":{},"body":{"modules/VideosModule.html":{}}}],["videos.service",{"_index":725,"title":{},"body":{"controllers/VideosController.html":{},"modules/VideosModule.html":{}}}],["videoscontroller",{"_index":721,"title":{"controllers/VideosController.html":{}},"body":{"controllers/VideosController.html":{},"modules/VideosModule.html":{},"coverage.html":{}}}],["videosmodule",{"_index":187,"title":{"modules/VideosModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VideosModule.html":{},"modules.html":{},"overview.html":{}}}],["videosservice",{"_index":724,"title":{"injectables/VideosService.html":{}},"body":{"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"coverage.html":{},"overview.html":{}}}],["we're",{"_index":296,"title":{},"body":{"guards/AuthGuard.html":{}}}],["web/www",{"_index":252,"title":{},"body":{"modules/AppModule.html":{}}}],["webgl",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["write",{"_index":346,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["zoom",{"_index":94,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/ImagesModule.html":{},"modules/PostsModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AccountsController.html":{"url":"controllers/AccountsController.html","title":"controller - AccountsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AccountsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/accounts/accounts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                accounts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                profile\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Admin)@ApiOperation({summary: 'Delete Account Profile [Admin Only]'})@ApiResponse({status: 403, description: 'Forbidden.'})@Delete('delete')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@ApiResponse({status: 200, description: 'The record has been successfully created.'})@ApiOperation({summary: 'Login User Account.'})@ApiResponse({status: 403, description: 'Forbidden.'})@Post('login')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    profile()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.User)@ApiOperation({summary: 'Access Account Profile'})@ApiResponse({status: 403, description: 'Forbidden.'})@Get('profile')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@ApiResponse({status: 200, description: 'The record has been successfully created.'})@ApiOperation({summary: 'Register A New Account.'})@ApiResponse({status: 403, description: 'Forbidden.'})@Post('register')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.User)@ApiOperation({summary: 'Update Account Profile'})@ApiResponse({status: 403, description: 'Forbidden.'})@Put('update')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Post, Put } from '@nestjs/common';\nimport { AccountsService } from './accounts.service';\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { Public } from '../../security/interfaces/auth.interface';\nimport { Roles } from '../../security/roles/decorators/roles.decorator';\nimport { Role } from '../../security/roles/enum/role.enum';\n\n@ApiTags('Account Management: Basic Account Registration & Login')\n@Controller('accounts')\nexport class AccountsController {\n  constructor(private readonly accountsService: AccountsService) {}\n\n  // ACCOUNT REGISTRATION & LOGIN\n  @Public()\n  @ApiResponse({\n    status: 200,\n    description: 'The record has been successfully created.',\n  })\n  @ApiOperation({ summary: 'Register A New Account.' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Post('register')\n  async register() {}\n\n  @Public()\n  @ApiResponse({\n    status: 200,\n    description: 'The record has been successfully created.',\n  })\n  @ApiOperation({ summary: 'Login User Account.' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Post('login')\n  async login() {}\n\n  // ACCOUNT MANAGEMENT\n  @Roles(Role.User)\n  @ApiOperation({ summary: 'Access Account Profile' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Get('profile')\n  async profile() {}\n\n  @Roles(Role.User)\n  @ApiOperation({ summary: 'Update Account Profile' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Put('update')\n  async update() {}\n\n  @Roles(Role.Admin)\n  @ApiOperation({ summary: 'Delete Account Profile [Admin Only]' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Delete('delete')\n  async delete() {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AccountsModule.html":{"url":"modules/AccountsModule.html","title":"module - AccountsModule","body":"\n                   \n\n\n\n\n    Modules\n    AccountsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\n\nAccountsService \n\nAccountsService \n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/api/accounts/accounts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AccountsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AccountsService } from './accounts.service';\nimport { AccountsController } from './accounts.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { Profile } from './entities/profile.entity';\nimport { Billing } from './entities/billing.entity';\nimport { Address } from './entities/address.entity';\n\n@Module({\n  controllers: [AccountsController],\n  providers: [AccountsService],\n  imports: [TypeOrmModule.forFeature([User, Profile, Billing, Address])],\n  exports: [AccountsService],\n})\nexport class AccountsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountsService.html":{"url":"injectables/AccountsService.html","title":"injectable - AccountsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/accounts/accounts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                profile\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/api/accounts/accounts.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(username: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    profile()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class AccountsService {\n  constructor(\n    @InjectRepository(User) private userRepository: Repository,\n  ) {}\n\n  async findOne(username: string, email: string): Promise {\n    return this.userRepository.findOne({\n      where: [{ username }, { email }],\n    });\n  }\n\n  async create(user: User) {\n    return this.userRepository.save(user);\n  }\n\n  async profile() {\n    return Promise.resolve(undefined);\n  }\n\n  async update() {\n    return Promise.resolve(undefined);\n  }\n\n  async delete() {\n    return Promise.resolve(undefined);\n  }\n\n  async getAll() {\n    return Promise.resolve(undefined);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Address.html":{"url":"entities/Address.html","title":"entity - Address","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/accounts/entities/address.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                            \n                                country\n                            \n                            \n                                county\n                            \n                            \n                                postcode\n                            \n                            \n                                propertyNo\n                            \n                            \n                                street\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        county\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postcode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        propertyNo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        street\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.address)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToOne, PrimaryColumn } from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { User } from './user.entity';\n\n@Entity('address', { schema: 'accounts' })\nexport class Address {\n  @PrimaryColumn()\n  @ApiProperty()\n  propertyNo: number;\n  @Column()\n  @ApiProperty()\n  street: string;\n  @Column()\n  @ApiProperty()\n  city: string;\n  @Column()\n  @ApiProperty()\n  county: string;\n  @Column()\n  @ApiProperty()\n  country: string;\n  @Column()\n  @ApiProperty()\n  postcode: string;\n\n  @OneToOne(() => User, (user) => user.address)\n  @ApiProperty()\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get, Render } from '@nestjs/common';\n\n@Controller('')\nexport class AppController {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nImagesModule\n\nImagesModule\n\nAppModule -->\n\nImagesModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nSecurityModule\n\nSecurityModule\n\nAppModule -->\n\nSecurityModule->AppModule\n\n\n\n\n\nVideosModule\n\nVideosModule\n\nAppModule -->\n\nVideosModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                        \n                            ImagesModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            SecurityModule\n                        \n                        \n                            VideosModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport * as Joi from 'joi';\nimport { APP_GUARD } from '@nestjs/core';\nimport { DatabaseModule } from '@database/database';\nimport { AppController } from './app.controller';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { SecurityModule } from './security/security.module';\nimport { AuthGuard } from './security/guards/auth.guard';\nimport { RolesGuard } from './security/guards/roles.guard';\nimport { PostsModule } from './api/posts/posts.module';\nimport { VideosModule } from './api/videos/videos.module';\nimport { ImagesModule } from './api/images/images.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [],\n      validationSchema: Joi.object({\n        // DATABASE VALIDATION\n        DATABASE_HOST: Joi.string().required(),\n        DATABASE_PORT: Joi.number().required(),\n        DATABASE_USER: Joi.string().required(),\n        DATABASE_PASSWORD: Joi.string().required(),\n        DATABASE_NAME: Joi.string().required(),\n        DATABASE_SCHEMA: Joi.string().required(),\n        // JWT VALIDATION\n        JWT_SECRET: Joi.string().required(),\n        JWT_EXPIRATION_TIME: Joi.string().required(),\n        // PORT VALIDATION\n        NODE_PORT: Joi.number().required(),\n        // REDIS VALIDATION\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PORT: Joi.number().required(),\n        REDIS_PASSWORD: Joi.string().required(),\n        REDIS_USERNAME: Joi.string().required(),\n        // GRPC VALIDATION\n        GRPC_HOST: Joi.string().required(),\n        GRPC_PACKAGE: Joi.string().required(),\n        GRPC_PROTO_PATH: Joi.string().required(),\n        // RABBITMQ VALIDATION\n        RABBITMQ_HOST: Joi.string().required(),\n        RABBITMQ_QUEUE: Joi.string().required(),\n        RABBITMQ_USERNAME: Joi.string().required(),\n        RABBITMQ_PASSWORD: Joi.string().required(),\n        // KAFKA VALIDATION\n        KAFKA_HOST: Joi.string().required(),\n        KAFKA_CLIENT_ID: Joi.string().required(),\n        // MQTT VALIDATION\n        MQTT_HOST: Joi.string().required(),\n      }),\n    }),\n    DatabaseModule,\n    SecurityModule,\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'web/www'),\n      renderPath: '/',\n      serveStaticOptions: {\n        extensions: ['ejs'],\n      },\n    }),\n    PostsModule,\n    VideosModule,\n    ImagesModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: AuthGuard,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/api/src/security/guards/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/security/guards/auth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/guards/auth.guard.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                    \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/guards/auth.guard.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport { Reflector } from '@nestjs/core';\nimport { jwtConstants } from '../constants';\nimport { IS_PUBLIC_KEY } from '../interfaces/auth.interface';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private jwtService: JwtService, private reflector: Reflector) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      // 💡 See this condition\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      // 💡 We're assigning the payload to the request object here\n      // so that we can access it in our route handlers\n      request['user'] = await this.jwtService.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Billing.html":{"url":"entities/Billing.html","title":"entity - Billing","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Billing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/accounts/entities/billing.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accountName\n                            \n                            \n                                accountNumber\n                            \n                            \n                                accountType\n                            \n                            \n                                sortCode\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accountName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/billing.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        accountNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/billing.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        accountType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/billing.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sortCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/billing.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.billing)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/billing.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToOne, PrimaryColumn } from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { User } from './user.entity';\n\n@Entity('billing', { schema: 'accounts' })\nexport class Billing {\n  @PrimaryColumn()\n  @ApiProperty()\n  accountName: string;\n  @Column()\n  @ApiProperty()\n  accountType: string;\n  @Column()\n  @ApiProperty()\n  accountNumber: string;\n  @Column()\n  @ApiProperty()\n  sortCode: string;\n\n  @OneToOne(() => User, (user) => user.billing)\n  @ApiProperty()\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslAbilityFactory.html":{"url":"injectables/CaslAbilityFactory.html","title":"injectable - CaslAbilityFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaslAbilityFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/roles/casl/casl-ability.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/roles/casl/casl-ability.factory.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Action } from '../enum/action.enum';\nimport { User } from '../../../api/accounts/entities/user.entity';\nimport { Post } from '../../../api/posts/entities/post.entity';\n\ntype Subjects = InferSubjects | 'all';\n\nexport type AppAbility = Ability;\n\n@Injectable()\nexport class CaslAbilityFactory {\n  createForUser(user: User) {\n    const { can, cannot, build } = new AbilityBuilder\n    >(Ability as AbilityClass);\n\n    if (user.isAdmin) {\n      can(Action.Manage, 'all'); // read-write access to everything\n    } else {\n      can(Action.Read, 'all'); // read-only access to everything\n    }\n\n    can(Action.Update, Post, { authorId: user.id });\n    cannot(Action.Delete, Post, { isPublished: true });\n\n    return build({\n      // Read https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types for details\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigurationModule.html":{"url":"modules/ConfigurationModule.html","title":"module - ConfigurationModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigurationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConfigurationModule\n\n\n\ncluster_ConfigurationModule_exports\n\n\n\ncluster_ConfigurationModule_providers\n\n\n\n\nConfigurationService \n\nConfigurationService \n\n\n\nConfigurationModule\n\nConfigurationModule\n\nConfigurationService  -->\n\nConfigurationModule->ConfigurationService \n\n\n\n\n\nConfigurationService\n\nConfigurationService\n\nConfigurationModule -->\n\nConfigurationService->ConfigurationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/configuration/src/configuration.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConfigurationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ConfigurationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigurationService } from './configuration.service';\n\n@Module({\n  providers: [ConfigurationService],\n  exports: [ConfigurationService],\n})\nexport class ConfigurationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigurationService.html":{"url":"injectables/ConfigurationService.html","title":"injectable - ConfigurationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConfigurationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/configuration/src/configuration.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                getArray\n                            \n                            \n                                getBoolean\n                            \n                            \n                                getNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(env: literal type, defaults: literal type)\n                    \n                \n                        \n                            \n                                Defined in libs/configuration/src/configuration.service.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        env\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaults\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/configuration/src/configuration.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getArray\n                        \n                    \n                \n            \n            \n                \ngetArray(key: string, separator: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/configuration/src/configuration.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    separator\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ','\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBoolean\n                        \n                    \n                \n            \n            \n                \ngetBoolean(key: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/configuration/src/configuration.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNumber\n                        \n                    \n                \n            \n            \n                \ngetNumber(key: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/configuration/src/configuration.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ConfigurationService {\n  constructor(\n    private readonly env: { [k: string]: string | undefined },\n    private readonly defaults: { [k: string]: string | undefined } = {},\n  ) {}\n\n  get(key: string): string {\n    return this.env[key] || this.defaults[key];\n  }\n\n  getNumber(key: string): number {\n    return Number(this.get(key));\n  }\n\n  getBoolean(key: string): boolean {\n    return this.get(key) === 'true';\n  }\n\n  getArray(key: string, separator = ','): string[] {\n    return this.get(key).split(separator);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostsDto.html":{"url":"classes/CreatePostsDto.html","title":"class - CreatePostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/posts/dto/createPosts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                author\n                            \n                            \n                                    Readonly\n                                content\n                            \n                            \n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/dto/createPosts.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/dto/createPosts.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/dto/createPosts.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostsDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly content: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly author: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/database/src/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DATABASE_HOST'),\n        port: configService.get('DATABASE_PORT'),\n        username: configService.get('DATABASE_USER'),\n        password: configService.get('DATABASE_PASSWORD'),\n        database: configService.get('DATABASE_NAME'),\n        schema: configService.get('DATABASE_SCHEMA'),\n        entities: [],\n        synchronize: true,\n        autoLoadEntities: true,\n      }),\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ImagesController.html":{"url":"controllers/ImagesController.html","title":"controller - ImagesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ImagesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/images/images.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                images\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { ImagesService } from './images.service';\n\n@Controller('images')\nexport class ImagesController {\n  constructor(private readonly imagesService: ImagesService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ImagesModule.html":{"url":"modules/ImagesModule.html","title":"module - ImagesModule","body":"\n                   \n\n\n\n\n    Modules\n    ImagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ImagesModule\n\n\n\ncluster_ImagesModule_providers\n\n\n\n\nImagesService\n\nImagesService\n\n\n\nImagesModule\n\nImagesModule\n\nImagesModule -->\n\nImagesService->ImagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/api/images/images.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ImagesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ImagesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ImagesService } from './images.service';\nimport { ImagesController } from './images.controller';\n\n@Module({\n  controllers: [ImagesController],\n  providers: [ImagesService]\n})\nexport class ImagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ImagesService.html":{"url":"injectables/ImagesService.html","title":"injectable - ImagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ImagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/images/images.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ImagesService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: SecurityService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/security/strategies/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        SecurityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/strategies/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { SecurityService } from '../security.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: SecurityService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/login.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/login.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/login.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty()\n  username: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/posts/entities/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                authorId\n                            \n                            \n                                content\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                id\n                            \n                            \n                                isPublished\n                            \n                            \n                                title\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts)@JoinColumn({name: 'authorId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid', {name: 'id'})@ApiProperty({description: 'unique identifier'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPublished\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeInsert,\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryColumn,\n} from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { v4 } from 'uuid';\nimport { User } from \"../../accounts/entities/user.entity\";\n\n@Entity('post', { schema: 'social' })\nexport class Post {\n  @BeforeInsert()\n  addId() {\n    this.id = v4();\n  }\n\n  @PrimaryColumn('uuid', { name: 'id' })\n  @ApiProperty({ description: 'unique identifier' })\n  id: string;\n\n  @Column()\n  title: string;\n\n  @Column()\n  content: string;\n\n  @Column()\n  authorId: string;\n\n  @ManyToOne(() => User, (user) => user.posts)\n  @JoinColumn({ name: 'authorId' })\n  author: User;\n\n  @Column()\n  isPublished: boolean;\n\n  @Column()\n  createdAt: Date;\n\n  @Column()\n  updatedAt: Date;\n\n  @Column()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                accounts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                hardDelete\n                            \n                            \n                                    Async\n                                read\n                            \n                            \n                                    Async\n                                softDelete\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create A New Social Post'})@ApiResponse({status: 403, description: 'Forbidden.'})@Post('post:create')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hardDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    hardDelete()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: '[Hard] Delete A Social Post [Admin Only]'})@ApiResponse({status: 403, description: 'Forbidden.'})@Delete('post:delete')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        read\n                        \n                    \n                \n            \n            \n                \n                    \n                    read()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Read A Social Post'})@ApiResponse({status: 403, description: 'Forbidden.'})@Get('post:read')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    softDelete()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: '[Soft] Delete A Social Post'})@ApiResponse({status: 403, description: 'Forbidden.'})@Delete('post:delete:soft')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update A Social Post'})@ApiResponse({status: 403, description: 'Forbidden.'})@Put('post:update')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Post, Put } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Social Posts: Create, Read, Update, Delete')\n@Controller('accounts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @ApiOperation({ summary: 'Create A New Social Post' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Post('post:create')\n  async create() {}\n\n  @ApiOperation({ summary: 'Read A Social Post' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Get('post:read')\n  async read() {}\n\n  @ApiOperation({ summary: 'Update A Social Post' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Put('post:update')\n  async update() {}\n\n  @ApiOperation({ summary: '[Soft] Delete A Social Post' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Delete('post:delete:soft')\n  async softDelete() {}\n\n  @ApiOperation({ summary: '[Hard] Delete A Social Post [Admin Only]' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Delete('post:delete')\n  async hardDelete() {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_exports\n\n\n\n\nPostsService \n\nPostsService \n\n\n\nPostsModule\n\nPostsModule\n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/api/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './entities/post.entity';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [TypeOrmModule.forFeature([Post])],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                getPost\n                            \n                            \n                                    Async\n                                getPosts\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/api/posts/posts.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPost\n                        \n                    \n                \n            \n            \n                \ngetPost()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPosts()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Post } from './entities/post.entity';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    @InjectRepository(Post) private postsRepository: Repository,\n  ) {}\n\n  create() {\n    return Promise.resolve(undefined);\n  }\n\n  update() {\n    return Promise.resolve(undefined);\n  }\n\n  delete() {\n    return Promise.resolve(undefined);\n  }\n\n  getPost() {\n    return Promise.resolve(undefined);\n  }\n\n  async getPosts() {\n    return await this.postsRepository.find();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Profile.html":{"url":"entities/Profile.html","title":"entity - Profile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/accounts/entities/profile.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                cover\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/profile.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/profile.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/profile.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.profile)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/profile.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToOne, PrimaryColumn } from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { User } from './user.entity';\n\n@Entity('profile', { schema: 'accounts' })\nexport class Profile {\n  @PrimaryColumn()\n  @ApiProperty()\n  bio: string;\n  @Column()\n  @ApiProperty()\n  avatar: string;\n  @Column()\n  @ApiProperty()\n  cover: string;\n\n  @OneToOne(() => User, (user) => user.profile)\n  @ApiProperty()\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstname\n                            \n                            \n                                lastname\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(8)@IsEmail()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/register.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(3)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/register.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(3)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/register.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(16)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/register.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(3)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/register.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class RegisterDto {\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @ApiProperty()\n  username: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @ApiProperty()\n  firstname: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @ApiProperty()\n  lastname: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(8)\n  @IsEmail()\n  @ApiProperty()\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(16)\n  @ApiProperty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/interfaces/requestWithUser.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { User } from 'apps/api/src/api/accounts/entities/user.entity';\nimport { Request } from 'express';\n\nexport interface RequestWithUser extends Request {\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/roles/entities/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid', {name: 'id'})@ApiProperty({description: 'unique identifier'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/roles/entities/role.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, maxLength: 64})@Column({length: 64})@Index({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/roles/entities/role.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BeforeInsert, Column, Entity, Index, PrimaryColumn } from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { v4 } from 'uuid';\n\n@Entity('roles', { schema: 'permissions' })\nexport default class Role {\n  @BeforeInsert()\n  addId() {\n    this.id = v4();\n  }\n\n  @PrimaryColumn('uuid', { name: 'id' })\n  @ApiProperty({ description: 'unique identifier' })\n  id: string;\n\n  @ApiProperty({ type: String, maxLength: 64 })\n  @Column({ length: 64 })\n  @Index({ unique: true })\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/api/src/security/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/security/guards/roles.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/guards/roles.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport Role from '../roles/entities/role.entity';\nimport { ROLES_KEY } from '../roles/decorators/roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    const { user } = context.switchToHttp().getRequest();\n    return requiredRoles.some((role) => user.roles?.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/security/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport Role from './entities/role.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role])],\n  controllers: [],\n  providers: [],\n  exports: [],\n})\nexport class RolesModule {\n  constructor() {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SecurityModule.html":{"url":"modules/SecurityModule.html","title":"module - SecurityModule","body":"\n                   \n\n\n\n\n    Modules\n    SecurityModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SecurityModule\n\n\n\ncluster_SecurityModule_providers\n\n\n\ncluster_SecurityModule_imports\n\n\n\ncluster_SecurityModule_exports\n\n\n\n\nAccountsModule\n\nAccountsModule\n\n\n\nSecurityModule\n\nSecurityModule\n\nSecurityModule -->\n\nAccountsModule->SecurityModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nSecurityModule -->\n\nRolesModule->SecurityModule\n\n\n\n\n\nSecurityService \n\nSecurityService \n\nSecurityService  -->\n\nSecurityModule->SecurityService \n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nSecurityModule -->\n\nLocalStrategy->SecurityModule\n\n\n\n\n\nSecurityService\n\nSecurityService\n\nSecurityModule -->\n\nSecurityService->SecurityModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/security/security.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LocalStrategy\n                        \n                        \n                            SecurityService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AccountsModule\n                        \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SecurityService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SecurityService } from './security.service';\nimport { AccountsModule } from 'apps/api/src/api/accounts/accounts.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { RolesModule } from './roles/roles.module';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    AccountsModule,\n    RolesModule,\n    PassportModule.register({ defaultStrategy: 'local' }),\n    JwtModule.register({\n      global: true,\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  providers: [SecurityService, LocalStrategy],\n  exports: [SecurityService],\n})\nexport class SecurityModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SecurityService.html":{"url":"injectables/SecurityService.html","title":"injectable - SecurityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SecurityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/security.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: AccountsService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/security/security.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        AccountsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    forgotPassword()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(login: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    login\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(register: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    register\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { RegisterDto } from './dto/register.dto';\nimport { LoginDto } from './dto/login.dto';\nimport { AccountsService } from '../api/accounts/accounts.service';\nimport { User } from '../api/accounts/entities/user.entity';\n\n@Injectable()\nexport class SecurityService {\n  constructor(private userService: AccountsService) {}\n\n  async validateUser(username: string, password: string): Promise {\n    const user = await this.userService.findOne(username, password);\n    if (user && user.password === password) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async register(register: RegisterDto): Promise {\n    const hashedPassword = await bcrypt.hash(register.password, 10);\n    const user = new User();\n    user.username = register.username;\n    user.email = register.email;\n    user.password = hashedPassword;\n    return this.userService.create(user);\n  }\n\n  async login(login: LoginDto): Promise {\n    return this.userService.findOne(login.username, login.password);\n  }\n\n  async logout() {\n    return Promise.resolve(undefined);\n  }\n\n  async refresh() {\n    return Promise.resolve(undefined);\n  }\n\n  async forgotPassword() {\n    return Promise.resolve(undefined);\n  }\n\n  async resetPassword() {\n    return Promise.resolve(undefined);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenDto.html":{"url":"classes/TokenDto.html","title":"class - TokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/dto/token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                            \n                                expires_in\n                            \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/token.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/token.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/token.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class TokenDto {\n  @ApiProperty()\n  expires_in: number;\n\n  @ApiProperty()\n  accessToken: string;\n\n  @ApiProperty()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/interfaces/tokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayload {\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostsDto.html":{"url":"classes/UpdatePostsDto.html","title":"class - UpdatePostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/posts/dto/updatePosts.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePostsDto } from \"./createPosts.dto\";\n\nexport class UpdatePostsDto extends PartialType(CreatePostsDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/accounts/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                billing\n                            \n                            \n                                    Optional\n                                email\n                            \n                            \n                                firstname\n                            \n                            \n                                id\n                            \n                            \n                                isAdmin\n                            \n                            \n                                lastname\n                            \n                            \n                                password\n                            \n                            \n                                    Public\n                                    Optional\n                                posts\n                            \n                            \n                                profile\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                            \n                                verified\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, address => address.user)@JoinColumn({name: 'address_id'})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        billing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Billing\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, billing => billing.user)@JoinColumn({name: 'billing_id'})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, length: 64})@ApiProperty({type: String, maxLength: 64})@Index({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty({type: String, maxLength: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid', {name: 'id'})@ApiProperty({description: 'unique identifier'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isAdmin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty({type: String, maxLength: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.authorId)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Profile\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, profile => profile.user)@JoinColumn({name: 'profile_id'})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, {cascade: true})@JoinTable({name: 'users_roles'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty({type: String, maxLength: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty({type: Boolean})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:86\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeInsert,\n  Column,\n  Entity,\n  Index,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  OneToMany,\n  OneToOne,\n  PrimaryColumn,\n} from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { v4 } from 'uuid';\nimport { Profile } from './profile.entity';\nimport { Address } from './address.entity';\nimport { Billing } from './billing.entity';\nimport { Exclude } from 'class-transformer';\nimport Role from '../../../security/roles/entities/role.entity';\nimport { Post } from '../../posts/entities/post.entity';\n\n@Entity('user', { schema: 'accounts' })\nexport class User {\n  @BeforeInsert()\n  addId() {\n    this.id = v4();\n  }\n\n  @PrimaryColumn('uuid', { name: 'id' })\n  @ApiProperty({ description: 'unique identifier' })\n  id: string;\n\n  @Column()\n  @ApiProperty({ type: String, maxLength: 64 })\n  username: string;\n\n  @Column()\n  @ApiProperty({ type: String, maxLength: 64 })\n  firstname: string;\n\n  @Column()\n  @ApiProperty({ type: String, maxLength: 64 })\n  lastname: string;\n\n  @Column({ unique: true, length: 64 })\n  @ApiProperty({ type: String, maxLength: 64 })\n  @Index({ unique: true })\n  email?: string;\n\n  @Column()\n  @ApiProperty()\n  @Exclude()\n  password: string;\n\n  // OTHER ENTITIES\n  @OneToOne(() => Profile, (profile) => profile.user)\n  @JoinColumn({ name: 'profile_id' })\n  @ApiProperty()\n  profile: Profile;\n\n  @OneToOne(() => Address, (address) => address.user)\n  @JoinColumn({ name: 'address_id' })\n  @ApiProperty()\n  address: Address;\n\n  @OneToOne(() => Billing, (billing) => billing.user)\n  @JoinColumn({ name: 'billing_id' })\n  @ApiProperty()\n  billing: Billing;\n\n  // // SOCIAL ENTITIES\n  @OneToMany(() => Post, (post: Post) => post.authorId)\n  public posts?: Post[];\n\n  @ManyToMany(() => Role, {\n    cascade: true,\n  })\n  @JoinTable({\n    name: 'users_roles',\n  })\n  roles: Role[];\n\n  // BOOLEANS\n  @Column()\n  @ApiProperty({ type: Boolean })\n  verified: boolean;\n\n  @Column()\n  @ApiProperty()\n  isAdmin: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/VideosController.html":{"url":"controllers/VideosController.html","title":"controller - VideosController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  VideosController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/videos/videos.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                videos\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { VideosService } from './videos.service';\n\n@Controller('videos')\nexport class VideosController {\n  constructor(private readonly videosService: VideosService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VideosModule.html":{"url":"modules/VideosModule.html","title":"module - VideosModule","body":"\n                   \n\n\n\n\n    Modules\n    VideosModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VideosModule\n\n\n\ncluster_VideosModule_providers\n\n\n\n\nVideosService\n\nVideosService\n\n\n\nVideosModule\n\nVideosModule\n\nVideosModule -->\n\nVideosService->VideosModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/api/videos/videos.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            VideosService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            VideosController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { VideosService } from './videos.service';\nimport { VideosController } from './videos.controller';\n\n@Module({\n  controllers: [VideosController],\n  providers: [VideosService]\n})\nexport class VideosModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VideosService.html":{"url":"injectables/VideosService.html","title":"injectable - VideosService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VideosService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/videos/videos.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class VideosService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/api/src/api/accounts/accounts.controller.ts\n            \n            controller\n            AccountsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/api/accounts/accounts.service.ts\n            \n            injectable\n            AccountsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                apps/api/src/api/accounts/entities/address.entity.ts\n            \n            entity\n            Address\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/accounts/entities/billing.entity.ts\n            \n            entity\n            Billing\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/accounts/entities/profile.entity.ts\n            \n            entity\n            Profile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/accounts/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/images/images.controller.ts\n            \n            controller\n            ImagesController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/images/images.service.ts\n            \n            injectable\n            ImagesService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/posts/dto/createPosts.dto.ts\n            \n            class\n            CreatePostsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/api/posts/dto/updatePosts.dto.ts\n            \n            class\n            UpdatePostsDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/posts/entities/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/api/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                apps/api/src/api/videos/videos.controller.ts\n            \n            controller\n            VideosController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/videos/videos.service.ts\n            \n            injectable\n            VideosService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            chalk\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/repl.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/security/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/security/dto/token.dto.ts\n            \n            class\n            TokenDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/security/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/security/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/api/src/security/interfaces/auth.interface.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/interfaces/auth.interface.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/interfaces/requestWithUser.interface.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/security/interfaces/tokenPayload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/security/roles/casl/casl-ability.factory.ts\n            \n            injectable\n            CaslAbilityFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/security/roles/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/roles/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/roles/entities/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/security.service.ts\n            \n            injectable\n            SecurityService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                apps/api/src/security/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                libs/configuration/src/configuration.service.ts\n            \n            injectable\n            ConfigurationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                libs/configuration/src/function/microservice.ts\n            \n            function\n            microServices\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/configuration/src/function/nodemailer.ts\n            \n            function\n            setupNodemailer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/configuration/src/function/swagger.ts\n            \n            function\n            setupSwagger\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @casl/ability : ^6.4.0\n        \n            @grpc/grpc-js : ^1.8.14\n        \n            @grpc/proto-loader : ^0.7.6\n        \n            @nestjs/axios : ^2.0.0\n        \n            @nestjs/bull : ^0.6.3\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.3.1\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/cqrs : ^9.0.3\n        \n            @nestjs/event-emitter : ^1.4.1\n        \n            @nestjs/jwt : ^10.0.2\n        \n            @nestjs/microservices : ^9.3.10\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/platform-socket.io : ^9.3.10\n        \n            @nestjs/schedule : ^2.2.0\n        \n            @nestjs/serve-static : ^3.0.1\n        \n            @nestjs/swagger : ^6.2.1\n        \n            @nestjs/terminus : ^9.2.2\n        \n            @nestjs/throttler : ^4.0.0\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @nestjs/websockets : ^9.3.10\n        \n            amqp-connection-manager : ^4.1.12\n        \n            amqplib : ^0.10.3\n        \n            axios : ^1.3.5\n        \n            bcrypt : ^5.1.0\n        \n            bull : ^4.10.4\n        \n            cache-manager : ^5.1.7\n        \n            chalk : ^4.1.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.6\n        \n            cpx : ^1.5.0\n        \n            crypto-js : ^4.1.1\n        \n            csurf : ^1.11.0\n        \n            discord.js : ^14.9.0\n        \n            dotenv : ^16.0.3\n        \n            ejs : ^3.1.9\n        \n            elliptic : ^6.5.4\n        \n            express-session : ^1.17.3\n        \n            hads : ^3.0.3\n        \n            helmet : ^6.0.1\n        \n            ioredis : ^5.3.1\n        \n            joi : ^17.8.4\n        \n            kafkajs : ^2.2.4\n        \n            mqtt : ^4.3.7\n        \n            node-appwrite : ^8.2.0\n        \n            node-docker-api : ^1.1.22\n        \n            nodemailer : ^6.9.1\n        \n            passport : ^0.6.0\n        \n            passport-discord : ^0.1.4\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            passport-twitter : ^1.0.4\n        \n            pg : ^8.10.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            sqlite3 : ^5.1.6\n        \n            typeorm : ^0.3.12\n        \n            unity-webgl : ^3.3.0\n        \n            @docusaurus/core : 2.4.0\n        \n            @docusaurus/preset-classic : 2.4.0\n        \n            @mdx-js/react : ^1.6.22\n        \n            clsx : ^1.2.1\n        \n            prism-react-renderer : ^1.3.5\n        \n            react : ^17.0.2\n        \n            react-dom : ^17.0.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (apps/.../action.enum.ts)\n                        \n                        \n                            Role   (apps/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/security/roles/enum/action.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Action\n                    \n                \n                        \n                            \n                                 Manage\n                            \n                        \n                        \n                            \n                                Value : manage\n                            \n                        \n                        \n                            \n                                 Create\n                            \n                        \n                        \n                            \n                                Value : create\n                            \n                        \n                        \n                            \n                                 Read\n                            \n                        \n                        \n                            \n                                Value : read\n                            \n                        \n                        \n                            \n                                 Update\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 Delete\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n\n    apps/api/src/security/roles/enum/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 Guest\n                            \n                        \n                        \n                            \n                                Value : guest\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                        \n                            bootstrap   (apps/.../repl.ts)\n                        \n                        \n                            microServices   (libs/.../microservice.ts)\n                        \n                        \n                            setupNodemailer   (libs/.../nodemailer.ts)\n                        \n                        \n                            setupSwagger   (libs/.../swagger.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    apps/api/src/repl.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    libs/configuration/src/function/microservice.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        microServices\n                        \n                    \n                \n            \n            \n                \nmicroServices()\n                \n            \n\n\n\n\n        \n    \n    libs/configuration/src/function/nodemailer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setupNodemailer\n                        \n                    \n                \n            \n            \n                \nsetupNodemailer()\n                \n            \n\n\n\n\n        \n    \n    libs/configuration/src/function/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setupSwagger\n                        \n                    \n                \n            \n            \n                \nsetupSwagger(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNXiE\nnpm run docs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AccountsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigurationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ImagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SecurityModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VideosModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_ConfigurationModule\n\n\n\ncluster_ConfigurationModule_exports\n\n\n\ncluster_ConfigurationModule_providers\n\n\n\ncluster_ImagesModule\n\n\n\ncluster_ImagesModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_SecurityModule\n\n\n\ncluster_SecurityModule_imports\n\n\n\ncluster_SecurityModule_exports\n\n\n\ncluster_SecurityModule_providers\n\n\n\ncluster_VideosModule\n\n\n\ncluster_VideosModule_providers\n\n\n\n\nAccountsService \n\nAccountsService \n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nSecurityModule\n\nSecurityModule\n\nSecurityModule -->\n\nAccountsModule->SecurityModule\n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nImagesModule\n\nImagesModule\n\nAppModule -->\n\nImagesModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\nAppModule -->\n\nSecurityModule->AppModule\n\n\n\n\n\nSecurityService \n\nSecurityService \n\nSecurityService  -->\n\nSecurityModule->SecurityService \n\n\n\n\n\nVideosModule\n\nVideosModule\n\nAppModule -->\n\nVideosModule->AppModule\n\n\n\n\n\nConfigurationService \n\nConfigurationService \n\n\n\nConfigurationModule\n\nConfigurationModule\n\nConfigurationService  -->\n\nConfigurationModule->ConfigurationService \n\n\n\n\n\nConfigurationService\n\nConfigurationService\n\nConfigurationModule -->\n\nConfigurationService->ConfigurationModule\n\n\n\n\n\nImagesService\n\nImagesService\n\nImagesModule -->\n\nImagesService->ImagesModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nSecurityModule -->\n\nRolesModule->SecurityModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nSecurityModule -->\n\nLocalStrategy->SecurityModule\n\n\n\n\n\nSecurityService\n\nSecurityService\n\nSecurityModule -->\n\nSecurityService->SecurityModule\n\n\n\n\n\nVideosService\n\nVideosService\n\nVideosModule -->\n\nVideosService->VideosModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (apps/.../casl-ability.factory.ts)\n                        \n                        \n                            Subjects   (apps/.../casl-ability.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/security/roles/casl/casl-ability.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Subjects\n                \n            \n            \n                \n                            InferSubjects | \"all\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            chalk   (apps/.../main.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (apps/.../auth.interface.ts)\n                        \n                        \n                            jwtConstants   (apps/.../constants.ts)\n                        \n                        \n                            module   (apps/.../main.ts)\n                        \n                        \n                            Public   (apps/.../auth.interface.ts)\n                        \n                        \n                            Roles   (apps/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (apps/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        chalk\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('chalk')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    apps/api/src/security/interfaces/auth.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/security/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: 'secretKey',\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/security/roles/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
