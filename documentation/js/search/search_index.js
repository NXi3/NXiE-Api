var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AccountsController.html",[0,1.511,1,2.475]],["body/controllers/AccountsController.html",[0,0.886,1,2.278,2,0.835,3,0.142,4,0.142,5,0.127,6,1.805,7,1.451,8,1.068,9,0.278,10,1.171,11,2.918,12,3.027,13,4.058,14,3.135,15,3.519,16,2.895,17,1.78,18,0.021,19,2.113,20,6.216,21,2.088,22,1.451,23,4.187,24,3.278,25,2.113,26,1.026,27,2.113,28,1.78,29,2.113,30,3.317,31,4.64,32,4.64,33,4.64,34,3.317,35,1.049,36,3.317,37,2.113,38,2.113,39,1.312,40,1.108,41,1.239,42,2.7,43,3.317,44,2.516,45,3.317,46,2.113,47,2.113,48,2.113,49,1.676,50,2.113,51,2.113,52,2.113,53,2.113,54,0.417,55,2.113,56,0.886,57,1.451,58,0.36,59,2.216,60,1.805,61,2.113,62,3.674,63,3.979,64,1.451,65,0.706,66,2.812,67,2.113,68,1.451,69,2.113,70,1.001,71,2.113,72,2.383,73,1.805,74,2.113,75,3.317,76,2.113,77,3.317,78,1.451,79,0.142,80,0.07,81,0.886,82,1.93,83,1.571,84,3.842,85,3.317,86,3.462,87,3.462,88,2.113,89,2.113,90,1.571,91,1.33,92,2.113,93,2.113,94,2.113,95,1.676,96,0.886,97,2.113,98,3.317,99,2.113,100,2.113,101,2.113,102,0.01,103,0.01]],["title/modules/AccountsModule.html",[104,0.917,105,2.097]],["body/modules/AccountsModule.html",[1,3.551,2,1.755,3,0.209,4,0.209,5,0.187,14,2.402,18,0.021,35,0.985,54,0.512,58,0.531,59,3.717,60,2.662,72,3.603,73,2.662,79,0.209,80,0.104,102,0.013,103,0.013,104,1.129,105,4.13,106,1.232,107,1.976,108,2.662,109,2.662,110,2.662,111,2.662,112,3.898,113,4.172,114,3.898,115,2.243,116,1.575,117,1.575,118,3.116,119,2.243,120,2.583,121,2.794,122,3.116,123,2.14,124,1.686,125,2.662,126,3.116,127,2.794,128,3.116,129,2.794,130,3.116,131,3.116,132,3.116,133,3.116,134,3.116]],["title/injectables/AccountsService.html",[59,1.95,135,0.821]],["body/injectables/AccountsService.html",[3,0.193,4,0.193,5,0.173,9,0.379,10,1.48,11,3.14,12,2.939,14,2.939,16,2.939,18,0.021,26,1.265,28,2.127,35,1.825,39,1.955,40,1.651,41,1.846,42,2.439,54,0.405,58,0.491,59,2.268,79,0.193,80,0.096,81,1.757,82,1.674,90,1.985,96,2.526,102,0.012,103,0.012,124,1.557,125,2.458,135,0.954,136,1.281,137,2.458,138,2.638,139,4.191,140,5.432,141,2.877,142,4.64,143,2.877,144,0.843,145,4.191,146,4.191,147,2.877,148,4.378,149,2.877,150,4.191,151,1.709,152,3.73,153,2.877,154,2.877,155,2.877,156,2.877,157,2.458,158,1.363,159,2.877,160,2.877,161,2.877,162,4.119]],["title/entities/Address.html",[129,2.269,163,1.346]],["body/entities/Address.html",[3,0.217,4,0.217,5,0.194,8,1.628,9,0.424,17,2.271,18,0.021,26,1.309,35,2.112,54,0.393,65,1.076,79,0.217,80,0.107,102,0.013,103,0.013,129,2.861,144,1.097,151,1.92,158,1.526,163,1.203,164,1.628,165,2.752,166,1.518,167,5.266,168,5.266,169,5.266,170,5.266,171,5.266,172,5.266,173,4.142,174,3.222,175,3.222,176,3.222,177,3.222,178,3.447,179,2.443,180,3.222,181,3.222,182,2.212,183,3.222,184,3.222,185,3.642,186,3.121,187,2.644,188,3.111,189,2.443,190,3.222,191,1.743,192,3.222]],["title/controllers/AppController.html",[0,1.511,193,2.475]],["body/controllers/AppController.html",[0,2.611,2,2.066,3,0.351,4,0.351,5,0.314,18,0.02,54,0.389,58,0.891,79,0.351,80,0.174,102,0.018,103,0.018,193,4.279,194,4.464,195,5.225]],["title/modules/AppModule.html",[104,0.917,196,2.475]],["body/modules/AppModule.html",[2,1.537,3,0.175,4,0.175,5,0.156,18,0.021,54,0.494,58,0.443,79,0.175,80,0.086,102,0.011,103,0.011,104,0.989,105,3.38,106,1.028,107,1.731,115,1.965,116,1.314,117,1.314,119,1.314,120,2.263,193,3.199,196,4.427,197,2.221,198,2.221,199,3.657,200,3.657,201,2.6,202,2.221,203,1.971,204,3.322,205,4.659,206,1.785,207,2.6,208,2.6,209,2.6,210,2.221,211,2.221,212,2.6,213,2.221,214,2.6,215,2.67,216,2.6,217,2.67,218,2.6,219,2.6,220,2.6,221,2.6,222,1.09,223,2.6,224,2.6,225,2.6,226,2.221,227,6.192,228,2.6,229,7.023,230,2.6,231,4.659,232,2.6,233,2.6,234,2.6,235,2.6,236,2.221,237,2.6,238,2.6,239,2.221,240,2.6,241,2.6,242,2.6,243,2.6,244,2.6,245,2.6,246,2.6,247,2.6,248,2.6,249,2.6,250,2.6,251,2.6,252,2.6,253,2.6,254,2.6,255,2.6,256,2.6,257,2.6,258,2.221,259,2.6,260,2.6,261,2.6,262,2.6,263,2.6,264,2.6,265,2.6,266,2.6,267,2.221,268,3.889,269,3.889]],["title/guards/AuthGuard.html",[215,2.475,270,2.475]],["body/guards/AuthGuard.html",[3,0.183,4,0.183,5,0.164,9,0.358,10,1.42,11,2.13,18,0.021,26,0.974,28,1.42,39,1.892,40,1.599,41,1.787,42,2.341,44,2.063,49,2.033,54,0.44,58,0.464,79,0.183,80,0.09,81,1.14,82,3.077,91,1.713,96,2.006,102,0.012,103,0.012,135,0.916,144,0.962,151,1.141,206,1.868,215,2.762,222,1.686,271,1.868,272,2.324,273,4.01,274,4.023,275,2.324,276,5.047,277,5.222,278,2.721,279,3.051,280,4.01,281,2.721,282,2.063,283,4.023,284,4.635,285,2.721,286,4.089,287,4.089,288,1.868,289,2.063,290,1.868,291,2.324,292,2.063,293,2.721,294,2.063,295,1.375,296,3.077,297,3.437,298,2.721,299,2.324,300,2.324,301,2.721,302,2.721,303,2.063,304,4.01,305,2.721,306,3.437,307,2.324,308,2.721,309,2.721,310,2.721,311,2.324,312,2.721,313,2.721,314,2.721,315,2.721,316,2.721,317,2.063,318,2.324,319,2.324,320,2.721,321,2.721]],["title/entities/Billing.html",[127,2.269,163,1.346]],["body/entities/Billing.html",[3,0.237,4,0.237,5,0.212,8,1.781,9,0.464,17,2.2,18,0.021,26,1.268,35,2.154,54,0.412,65,1.177,79,0.237,80,0.117,102,0.014,103,0.014,127,3.046,144,1.063,151,1.904,158,1.669,163,1.316,164,1.781,166,1.616,173,3.794,179,2.673,182,2.42,185,3.46,186,3.322,187,2.815,188,3.049,189,2.673,191,1.907,322,3.011,323,5.525,324,5.525,325,5.525,326,5.525,327,3.524,328,3.524,329,3.524,330,3.524,331,3.524,332,3.524,333,3.524,334,3.524]],["title/injectables/CaslAbilityFactory.html",[135,0.821,335,2.734]],["body/injectables/CaslAbilityFactory.html",[3,0.226,4,0.226,5,0.202,9,0.444,10,1.655,18,0.021,26,0.685,28,1.188,35,1.938,39,1.331,40,1.124,41,1.257,44,3.555,49,1.701,54,0.457,56,2.26,58,0.574,79,0.315,80,0.112,96,1.411,102,0.013,103,0.013,135,1.067,136,1.498,144,0.994,222,1.411,296,1.959,335,3.555,336,3.555,337,2.553,338,4.687,339,4.687,340,3.366,341,4.607,342,4.687,343,4.687,344,4.687,345,4.004,346,2.876,347,2.876,348,3.366,349,2.876,350,3.366,351,2.876,352,2.876,353,4.687,354,3.366,355,3.366,356,3.703,357,3.366,358,4.687,359,3.366,360,3.366,361,2.876,362,3.366,363,3.366,364,2.876,365,3.366,366,3.366,367,1.821,368,3.366,369,3.366,370,3.366,371,3.366,372,3.366,373,3.366]],["title/modules/ConfigurationModule.html",[104,0.917,374,2.475]],["body/modules/ConfigurationModule.html",[3,0.299,4,0.299,5,0.267,18,0.021,54,0.421,58,0.759,79,0.299,80,0.148,102,0.016,103,0.016,104,1.435,106,1.759,107,2.512,115,2.852,116,2.249,117,2.249,119,2.852,121,3.553,374,4.795,375,3.802,376,3.802,377,3.802,378,4.576,379,4.45,380,4.45]],["title/injectables/ConfigurationService.html",[135,0.821,378,2.269]],["body/injectables/ConfigurationService.html",[3,0.201,4,0.201,5,0.179,9,0.393,10,1.519,18,0.021,26,1.192,28,1.95,39,2.316,40,1.956,41,2.187,54,0.222,58,0.509,79,0.201,80,0.099,81,1.803,82,2.504,83,2.038,96,2.315,102,0.012,103,0.012,135,0.98,136,1.328,144,1.118,151,2.04,178,3.263,222,1.25,286,3.676,378,2.709,381,2.549,382,4.303,383,4.303,384,4.303,385,2.984,386,5.525,387,5.047,388,2.984,389,3.676,390,4.303,391,2.984,392,5.525,393,4.303,394,5.047,395,2.984,396,2.263,397,2.263,398,4.303,399,2.984,400,2.709,401,4.303,402,2.984,403,4.303,404,2.984,405,2.984,406,2.984,407,2.984,408,2.984]],["title/classes/CreatePostsDto.html",[80,0.12,409,2.475]],["body/classes/CreatePostsDto.html",[3,0.277,4,0.277,5,0.248,9,0.543,17,2.109,18,0.021,26,1.216,54,0.307,79,0.277,80,0.178,83,3.331,102,0.015,103,0.015,144,1.019,151,1.91,166,1.794,367,2.228,409,3.688,410,3.519,411,4.532,412,5.105,413,5.105,414,5.976,415,4.119,416,4.119,417,4.119,418,4.802,419,4.802,420,2.828]],["title/modules/DatabaseModule.html",[104,0.917,199,2.269]],["body/modules/DatabaseModule.html",[3,0.287,4,0.287,5,0.257,18,0.021,54,0.453,58,0.728,79,0.287,80,0.142,90,2.022,95,2.157,102,0.016,103,0.016,104,1.398,106,1.688,120,3.198,123,2.932,124,2.31,144,0.728,164,2.157,191,2.31,199,3.46,202,4.696,203,3.238,222,2.304,226,3.647,239,3.647,421,4.269,422,6.419,423,4.269,424,4.269,425,4.269,426,4.269,427,4.269,428,4.269,429,4.269,430,4.269,431,4.269,432,4.269,433,4.269,434,4.269,435,4.269]],["title/controllers/ImagesController.html",[0,1.511,436,2.475]],["body/controllers/ImagesController.html",[0,1.109,2,1.046,3,0.178,4,0.178,5,0.159,7,1.817,8,1.337,9,0.349,10,1.391,11,3.045,12,3.163,16,3.277,17,1.969,18,0.021,21,2.48,22,1.817,23,4.446,24,3.271,26,1.135,28,1.969,54,0.351,56,1.109,57,1.817,58,0.451,62,4.015,63,4.015,64,1.817,65,0.884,78,1.817,79,0.178,80,0.088,83,1.253,84,3.83,86,3.83,87,3.83,102,0.011,103,0.011,295,1.337,436,2.705,437,2.26,438,3.955,439,3.955,440,5.174,441,6.057,442,4.229,443,2.988,444,5.847,445,2.645,446,2.645,447,2.988,448,5.216,449,2.645,450,2.645,451,2.645,452,2.645,453,2.645,454,2.645,455,2.645,456,2.645,457,2.739,458,2.26,459,2.645,460,2.645,461,2.645,462,2.645,463,2.645,464,2.645]],["title/modules/ImagesModule.html",[104,0.917,112,2.269]],["body/modules/ImagesModule.html",[2,2.244,3,0.302,4,0.302,5,0.27,18,0.021,54,0.464,58,0.765,79,0.302,80,0.149,102,0.016,103,0.016,104,1.443,106,1.774,107,2.526,112,4.337,115,2.868,116,2.268,117,2.268,119,2.868,436,4.274,457,4.008,458,3.835,465,3.835,466,3.835,467,4.488,468,4.488]],["title/injectables/ImagesService.html",[135,0.821,457,2.097]],["body/injectables/ImagesService.html",[3,0.355,4,0.355,5,0.317,18,0.02,54,0.393,58,0.9,79,0.355,80,0.175,102,0.018,103,0.018,135,1.427,136,2.349,457,3.647,469,4.509]],["title/injectables/LocalStrategy.html",[135,0.821,470,2.269]],["body/injectables/LocalStrategy.html",[3,0.248,4,0.248,5,0.221,9,0.486,10,1.761,11,2.516,18,0.021,26,1.015,28,1.301,35,1.788,39,1.972,40,1.666,41,1.862,42,2.902,49,1.862,54,0.452,58,0.628,79,0.248,80,0.122,81,1.545,83,1.745,90,1.745,91,2.32,95,3.061,96,1.545,102,0.014,103,0.014,135,1.136,136,1.64,144,0.85,151,1.85,287,4.261,295,1.862,296,2.144,306,3.148,470,3.14,471,3.148,472,4.988,473,3.685,474,3.525,475,3.685,476,4.988,477,4.988,478,3.685,479,3.685,480,2.795,481,3.685,482,3.148,483,2.795,484,3.148,485,2.795,486,3.685,487,3.685,488,3.685]],["title/classes/LoginDto.html",[80,0.12,489,2.475]],["body/classes/LoginDto.html",[3,0.276,4,0.276,5,0.247,9,0.541,17,2.105,18,0.021,26,1.213,54,0.399,65,1.37,79,0.276,80,0.178,90,2.825,95,3.014,102,0.015,103,0.015,144,1.017,151,1.907,152,4.096,166,1.789,188,2.995,367,2.22,418,4.795,419,4.795,420,2.817,489,3.678,490,3.505,491,4.103,492,4.103,493,5.357,494,4.103,495,4.103,496,4.576]],["title/entities/Post.html",[56,1.511,163,1.346]],["body/entities/Post.html",[3,0.187,4,0.187,5,0.167,9,0.367,17,2.276,18,0.021,24,1.408,26,1.312,35,1.884,40,1.621,54,0.399,56,1.716,65,0.93,79,0.187,80,0.093,102,0.012,103,0.012,144,1.099,151,1.791,158,1.319,163,1.04,164,1.408,166,1.367,185,4.015,187,1.621,188,1.939,191,1.507,361,4.868,364,4.146,400,2.577,411,3.68,412,4.146,413,4.146,497,2.38,498,4.853,499,4.853,500,4.056,501,4.853,502,2.786,503,2.786,504,2.786,505,2.786,506,2.786,507,5.958,508,2.786,509,2.786,510,3.104,511,2.113,512,3.104,513,2.811,514,2.786,515,2.786,516,2.786,517,2.786,518,3.104,519,3.497,520,4.093,521,3.104,522,2.113,523,2.786,524,2.786,525,2.113,526,2.113,527,2.113,528,2.786]],["title/controllers/PostsController.html",[0,1.511,529,2.475]],["body/controllers/PostsController.html",[0,1.074,2,1.013,3,0.172,4,0.172,5,0.154,7,1.759,8,1.294,9,0.338,10,1.358,11,3.027,12,3.126,16,3.242,17,1.942,18,0.021,21,2.421,22,1.759,23,4.41,24,3.245,26,1.119,28,1.942,49,1.943,54,0.344,56,2.512,57,1.759,58,0.437,62,3.967,63,3.967,64,1.759,65,0.856,78,1.759,79,0.172,80,0.085,83,1.213,84,3.778,86,3.778,87,3.778,102,0.011,103,0.011,138,3.772,295,1.294,356,4.115,438,3.893,439,3.893,442,4.172,443,2.917,447,2.917,525,4.871,529,2.641,530,2.188,531,5.133,532,2.561,533,2.561,534,2.561,535,2.561,536,2.561,537,2.561,538,2.561,539,2.561,540,2.561,541,2.561,542,2.687,543,2.188,544,2.561,545,2.188,546,2.561,547,2.561,548,2.561,549,2.561,550,2.561]],["title/modules/PostsModule.html",[104,0.917,113,2.269]],["body/modules/PostsModule.html",[2,2.112,3,0.275,4,0.275,5,0.246,18,0.021,54,0.488,56,1.713,58,0.697,79,0.275,80,0.136,102,0.015,103,0.015,104,1.359,106,1.616,107,2.378,113,4.309,115,2.7,116,2.065,117,2.065,119,2.7,120,2.378,121,3.363,123,2.806,124,2.211,529,4.088,542,4.179,543,3.491,551,3.491,552,3.491,553,3.491,554,4.087,555,4.087,556,3.491,557,4.087]],["title/injectables/PostsService.html",[135,0.821,542,2.097]],["body/injectables/PostsService.html",[3,0.234,4,0.234,5,0.209,9,0.458,10,1.692,11,2.442,12,3.199,16,3.199,18,0.021,26,1.304,28,2.19,39,1.375,40,1.162,41,1.299,54,0.441,56,1.458,58,0.593,79,0.234,80,0.116,81,2.009,82,2.023,91,2.189,96,2.6,102,0.014,103,0.014,124,1.881,135,1.092,136,1.548,138,3.722,142,5.052,144,0.593,148,2.637,157,2.971,158,1.647,162,4.485,542,2.789,556,2.971,558,2.971,559,5.913,560,5.913,561,3.478,562,3.478,563,4.794,564,3.478,565,3.478,566,3.478,567,3.478,568,3.478,569,3.478,570,3.478]],["title/entities/Profile.html",[14,1.95,163,1.346]],["body/entities/Profile.html",[3,0.249,4,0.249,5,0.222,8,1.869,9,0.487,14,2.705,17,2.142,18,0.021,26,1.234,35,2.176,54,0.422,65,1.235,79,0.249,80,0.123,102,0.014,103,0.014,144,1.034,151,1.852,158,1.751,163,1.381,164,1.869,166,1.67,173,3.433,179,2.805,182,2.539,185,3.295,186,3.433,187,2.909,188,3.002,189,2.805,191,2.001,571,3.159,572,5.664,573,5.664,574,5.664,575,3.698,576,3.698,577,3.698,578,3.698,579,3.698,580,3.698,581,3.698]],["title/classes/RegisterDto.html",[80,0.12,582,2.475]],["body/classes/RegisterDto.html",[3,0.242,4,0.242,5,0.216,9,0.474,17,2.216,18,0.021,26,1.277,54,0.366,65,1.201,79,0.242,80,0.163,90,2.644,95,2.822,102,0.014,103,0.014,144,1.07,151,1.963,152,3.834,166,1.639,188,3.068,367,1.946,418,4.913,419,4.913,420,2.47,496,4.191,582,3.369,583,3.073,584,4.77,585,4.77,586,3.597,587,3.597,588,5.584,589,3.597,590,3.597,591,3.597,592,3.597,593,3.597,594,3.597,595,5.584,596,3.597,597,3.597]],["title/interfaces/RequestWithUser.html",[598,2.269,599,2.734]],["body/interfaces/RequestWithUser.html",[3,0.321,4,0.321,5,0.287,9,0.629,18,0.021,35,2.265,54,0.44,79,0.321,102,0.017,103,0.017,144,0.814,166,1.97,284,4.854,289,3.621,485,4.473,598,3.005,599,4.473,600,3.621,601,4.079,602,4.774]],["title/entities/Role.html",[70,1.707,163,1.346]],["body/entities/Role.html",[3,0.247,4,0.247,5,0.221,9,0.744,17,1.757,18,0.021,24,1.856,26,1.012,40,2.112,54,0.421,65,1.227,70,2.357,79,0.247,80,0.122,102,0.014,103,0.014,144,0.962,151,1.848,158,1.739,163,1.371,164,1.856,166,1.662,185,2.895,187,2.137,188,2.673,191,1.987,222,2.085,396,2.785,500,4.588,510,3.774,511,2.785,512,4.28,513,3.417,518,3.774,521,3.774,522,2.785,526,2.785,527,2.785,603,3.137,604,3.672,605,3.672,606,4.251,607,3.672,608,3.137,609,3.672,610,3.672,611,3.672,612,4.251,613,3.137]],["title/guards/RolesGuard.html",[217,2.475,270,2.475]],["body/guards/RolesGuard.html",[3,0.252,4,0.252,5,0.225,9,0.494,10,1.782,18,0.021,26,1.027,28,1.324,35,1.186,39,1.996,40,1.686,41,1.885,54,0.455,58,0.639,70,1.776,79,0.252,80,0.125,81,1.572,96,2.116,102,0.014,103,0.014,135,1.149,144,0.861,206,2.576,217,3.466,222,1.572,271,2.576,273,4.628,277,5.604,279,3.828,280,4.628,282,2.845,294,2.845,295,1.895,296,2.937,299,3.205,300,3.205,303,2.845,400,3.177,614,3.205,615,3.751,616,3.751,617,3.751,618,3.751,619,2.845,620,3.751,621,5.048,622,3.751,623,3.751,624,3.751]],["title/modules/RolesModule.html",[104,0.917,625,2.269]],["body/modules/RolesModule.html",[2,1.896,3,0.322,4,0.322,5,0.288,18,0.021,54,0.478,58,0.818,70,2.271,79,0.322,80,0.159,81,2.01,102,0.017,103,0.017,104,1.504,106,1.896,119,2.423,120,2.79,121,3.019,123,3.293,124,2.595,625,3.723,626,4.796,627,4.796,628,4.796]],["title/modules/SecurityModule.html",[104,0.917,200,2.269]],["body/modules/SecurityModule.html",[3,0.227,4,0.227,5,0.203,18,0.021,54,0.495,58,0.576,79,0.227,80,0.112,102,0.013,103,0.013,104,1.194,105,3.697,106,1.335,107,2.091,115,2.374,116,1.706,117,1.706,119,2.374,120,2.733,121,2.957,200,4.419,222,1.415,288,2.319,290,2.319,291,2.885,317,2.561,318,2.885,470,4,474,4.055,480,2.561,483,2.561,484,2.885,625,4,629,2.885,630,2.885,631,2.885,632,2.885,633,3.377,634,3.377,635,3.377,636,3.377,637,3.377,638,3.377,639,3.377,640,3.377,641,3.377,642,3.377,643,3.377,644,3.377,645,3.377,646,3.377]],["title/injectables/SecurityService.html",[135,0.821,474,2.097]],["body/injectables/SecurityService.html",[3,0.163,4,0.163,5,0.145,9,0.319,10,1.301,11,3.109,13,3.383,15,3.383,18,0.021,26,1.232,28,2.075,35,1.787,39,1.971,40,1.666,41,1.862,42,3.289,49,1.223,54,0.421,58,0.413,59,2.698,79,0.163,80,0.08,81,1.014,90,1.146,91,2.319,95,2.857,96,2.539,102,0.011,103,0.011,135,0.839,136,1.077,144,0.85,148,3.782,151,1.603,162,3.782,295,1.223,296,2.901,349,2.067,474,2.143,489,3.424,582,3.424,647,2.067,648,4.987,649,4.987,650,4.987,651,4.987,652,3.684,653,2.42,654,2.42,655,3.684,656,2.42,657,3.684,658,2.42,659,2.42,660,2.42,661,3.684,662,2.42,663,2.42,664,3.684,665,2.42,666,3.147,667,2.42,668,2.42,669,2.42,670,2.42,671,3.684,672,3.684,673,2.42,674,3.684,675,2.42,676,2.42,677,2.42,678,2.42,679,2.42,680,2.42,681,2.42,682,2.42,683,2.42]],["title/classes/TokenDto.html",[80,0.12,684,2.734]],["body/classes/TokenDto.html",[3,0.293,4,0.293,5,0.262,9,0.574,17,2.167,18,0.021,26,1.249,54,0.325,65,1.456,79,0.293,80,0.145,102,0.016,103,0.016,144,1.047,151,1.834,166,1.86,178,4.224,188,3.291,367,2.358,684,4.224,685,3.723,686,6.139,687,6.139,688,6.139,689,4.358,690,4.358,691,4.358]],["title/interfaces/TokenPayload.html",[598,2.269,692,2.734]],["body/interfaces/TokenPayload.html",[3,0.343,4,0.343,5,0.306,9,0.672,18,0.02,79,0.343,102,0.018,103,0.018,144,0.869,151,1.868,166,2.051,598,3.209,600,3.867,692,4.656,693,4.356,694,6.837]],["title/classes/UpdatePostsDto.html",[80,0.12,695,2.734]],["body/classes/UpdatePostsDto.html",[3,0.344,4,0.344,5,0.308,18,0.021,54,0.459,65,1.711,79,0.344,80,0.17,102,0.018,103,0.018,367,2.772,409,3.518,485,3.885,695,4.67,696,4.377,697,5.123,698,5.123,699,5.123]],["title/entities/User.html",[35,1.14,163,1.346]],["body/entities/User.html",[3,0.122,4,0.122,5,0.109,8,0.915,9,0.487,14,3.064,17,2.177,18,0.021,24,0.915,26,1.255,35,0.927,40,1.669,41,1.587,54,0.422,56,2.206,65,0.605,66,2.538,68,2.538,70,2.013,79,0.122,80,0.097,90,1.751,95,1.868,102,0.008,103,0.008,127,3.565,129,3.565,144,1.114,151,1.881,152,2.538,158,0.858,163,0.676,164,1.868,166,0.98,173,1.243,182,2.538,185,3.189,186,2.918,187,1.053,188,2.873,191,0.98,222,1.957,400,3.146,500,3.223,510,2.224,511,1.373,512,3.223,513,2.014,518,2.224,519,3.631,521,2.224,522,1.373,525,1.373,526,1.373,527,1.373,545,3.158,584,3.158,585,3.158,606,4.682,608,1.547,612,4.682,613,2.506,700,1.547,701,3.697,702,3.697,703,1.811,704,1.811,705,1.811,706,1.811,707,1.811,708,1.811,709,1.811,710,1.811,711,1.811,712,4.25,713,1.811,714,1.811,715,1.811,716,1.811,717,1.811,718,1.811,719,1.811,720,2.933,721,1.811,722,1.811,723,1.811,724,1.811,725,1.811,726,2.933,727,1.811,728,2.933,729,1.811,730,1.811,731,1.811,732,2.933,733,2.933,734,2.933,735,1.811,736,1.811,737,1.811,738,2.933,739,1.547,740,1.811,741,1.811,742,1.811,743,1.811,744,1.811,745,1.811,746,1.811,747,1.811,748,1.811,749,1.811]],["title/guards/VaultGuard.html",[270,2.475,750,2.734]],["body/guards/VaultGuard.html",[3,0.246,4,0.246,5,0.22,9,0.482,10,1.752,18,0.021,26,1.01,28,1.292,39,1.963,40,1.658,41,1.854,42,2.888,54,0.42,58,0.624,79,0.246,80,0.122,81,1.534,83,1.733,96,2.081,102,0.014,103,0.014,135,1.13,144,0.846,222,1.534,271,2.513,273,4.789,275,3.126,276,5.563,279,2.775,280,4.581,282,3.765,284,2.775,288,2.513,294,2.775,295,1.849,296,2.888,303,2.775,304,2.775,307,3.126,319,3.126,400,3.125,750,3.765,751,3.126,752,3.659,753,3.659,754,5.634,755,3.126,756,3.659,757,3.659,758,3.659,759,3.659,760,3.659]],["title/injectables/VaultService.html",[72,2.097,135,0.821]],["body/injectables/VaultService.html",[3,0.249,4,0.249,5,0.222,9,0.487,10,1.765,11,2.521,13,3.791,15,3.791,18,0.021,26,1.234,28,1.765,39,1.977,40,1.67,41,1.867,54,0.373,58,0.63,72,2.909,79,0.249,80,0.123,81,2.374,82,3.295,83,2.682,90,2.368,95,2.862,96,1.55,102,0.014,103,0.014,135,1.138,136,1.646,144,0.63,151,1.049,166,1.67,304,3.791,761,3.159,762,5.664,763,5,764,5,765,3.698,766,5,767,3.698,768,5,769,4.839,770,3.159,771,3.698,772,3.698,773,3.698,774,3.698,775,3.698]],["title/controllers/VideosController.html",[0,1.511,776,2.475]],["body/controllers/VideosController.html",[0,1.019,2,0.961,3,0.163,4,0.163,5,0.146,7,1.669,8,1.228,9,0.32,10,1.305,11,3.064,12,3.064,16,3.185,17,1.999,18,0.021,21,2.327,22,1.669,23,4.485,24,3.301,26,1.152,28,1.999,49,1.868,54,0.333,56,1.019,57,1.669,58,0.414,62,4.042,63,4.042,64,1.669,65,0.812,78,1.669,79,0.163,80,0.081,83,1.151,84,3.889,86,3.889,87,3.889,102,0.011,103,0.011,138,3.706,295,1.228,356,1.669,438,3.791,439,3.791,440,5.029,442,4.295,443,2.804,447,2.804,776,2.539,777,2.077,778,5.663,779,5.377,780,2.431,781,2.431,782,5.887,783,2.431,784,2.431,785,2.431,786,2.431,787,2.431,788,2.431,789,2.431,790,2.431,791,2.431,792,2.431,793,2.603,794,2.077,795,2.431,796,2.431,797,2.431,798,2.431,799,2.431,800,2.431,801,2.431]],["title/modules/VideosModule.html",[104,0.917,114,2.269]],["body/modules/VideosModule.html",[2,2.244,3,0.302,4,0.302,5,0.27,18,0.021,54,0.464,58,0.765,79,0.302,80,0.149,102,0.016,103,0.016,104,1.443,106,1.774,107,2.526,114,4.337,115,2.868,116,2.268,117,2.268,119,2.868,776,4.274,793,4.008,794,3.835,802,3.835,803,3.835,804,4.488,805,4.488]],["title/injectables/VideosService.html",[135,0.821,793,2.097]],["body/injectables/VideosService.html",[3,0.355,4,0.355,5,0.317,18,0.02,54,0.393,58,0.9,79,0.355,80,0.175,102,0.018,103,0.018,135,1.427,136,2.349,793,3.647,806,4.509]],["title/coverage.html",[807,4.198]],["body/coverage.html",[0,2.213,1,1.603,5,0.14,6,1.994,14,1.263,18,0.021,35,0.738,49,1.179,56,0.978,59,1.263,66,1.603,68,1.603,70,1.105,72,1.358,80,0.175,102,0.01,103,0.01,104,0.593,127,1.469,129,1.469,135,1.398,137,1.994,144,0.398,163,2.081,165,1.994,193,1.603,194,1.994,215,1.603,217,1.603,270,2.995,272,1.994,290,1.603,292,1.77,322,1.994,335,1.77,336,1.77,337,1.77,378,1.469,381,1.994,409,1.603,410,1.994,436,1.603,437,1.994,457,1.358,469,1.994,470,1.469,471,1.994,474,1.358,489,1.603,490,1.994,497,1.994,513,1.603,529,1.603,530,1.994,542,1.358,558,1.994,571,1.994,582,1.603,583,1.994,598,2.256,599,1.77,601,1.994,603,1.994,614,1.994,619,1.77,647,1.994,684,1.77,685,1.994,692,1.77,693,1.994,695,1.77,696,1.994,700,1.994,750,1.77,751,1.994,761,1.994,776,1.603,777,1.994,793,1.358,806,1.994,807,1.994,808,2.334,809,2.334,810,7.322,811,5.28,812,2.334,813,7.012,814,4.894,815,3.583,816,1.994,817,5.989,818,3.308,819,5.28,820,3.061,821,1.77,822,1.994,823,1.994,824,4.362,825,3.061,826,4.362,827,3.061,828,2.334,829,2.334,830,1.994,831,1.994,832,1.994,833,1.994,834,1.994,835,1.994,836,2.334,837,2.334]],["title/dependencies.html",[107,1.929,838,2.574]],["body/dependencies.html",[18,0.021,58,0.414,65,0.812,80,0.123,102,0.011,103,0.011,107,1.082,124,1.315,158,1.151,203,1.844,204,2.077,206,1.669,210,2.077,211,2.077,236,2.077,258,2.077,267,2.077,288,1.669,289,2.804,346,2.077,420,1.669,480,1.844,482,4.594,483,1.844,666,2.077,739,2.077,755,2.077,769,2.077,770,3.822,821,1.844,839,2.431,840,2.431,841,3.697,842,2.431,843,2.431,844,2.431,845,3.697,846,2.431,847,2.431,848,2.431,849,2.431,850,2.431,851,2.431,852,2.431,853,2.431,854,2.431,855,2.431,856,2.431,857,4.474,858,2.431,859,2.431,860,3.697,861,2.431,862,2.431,863,2.431,864,2.431,865,2.431,866,4.474,867,3.697,868,2.431,869,2.431,870,2.431,871,2.431,872,2.431,873,2.431,874,2.431,875,2.431,876,2.431,877,2.431,878,2.431,879,2.431,880,2.431,881,3.697,882,2.431,883,2.431,884,2.431,885,2.431,886,3.697,887,2.431,888,2.431,889,2.431,890,2.431,891,2.431,892,2.431,893,2.431,894,2.431,895,2.431,896,2.431,897,2.431,898,2.431,899,2.431,900,2.431,901,2.431,902,2.431,903,2.431,904,2.431,905,2.431,906,2.431,907,2.431,908,2.431,909,2.431,910,2.431,911,2.431,912,2.431,913,2.431,914,2.431,915,2.431,916,2.431,917,2.431,918,2.431,919,2.431,920,2.431,921,2.431,922,2.431,923,2.431,924,2.431,925,2.431,926,2.431,927,2.431,928,2.431,929,2.431,930,2.431,931,2.431,932,2.431,933,2.431,934,2.431,935,2.431,936,2.431,937,2.431,938,2.431,939,2.431,940,2.431,941,2.431,942,2.431,943,2.431,944,2.431,945,2.431,946,2.431,947,2.431,948,2.431,949,2.431,950,2.431,951,4.474,952,2.431,953,3.697,954,2.431,955,2.431,956,2.431,957,2.431,958,2.431,959,2.431,960,2.431,961,2.431,962,2.431,963,2.431,964,2.431,965,2.431,966,2.431]],["title/miscellaneous/enumerations.html",[967,1.523,968,3.703]],["body/miscellaneous/enumerations.html",[9,0.612,12,3.138,16,3.138,18,0.021,21,3.651,35,1.834,70,2.747,102,0.017,103,0.017,138,3.651,347,4.955,356,3.983,397,5.405,967,2.348,968,3.97,969,4.647,970,4.647,971,4.647,972,5.8,973,4.647,974,5.8]],["title/miscellaneous/functions.html",[967,1.523,975,3.703]],["body/miscellaneous/functions.html",[9,0.632,18,0.018,39,1.896,40,1.602,41,1.791,102,0.017,103,0.017,144,0.818,818,3.637,820,5.984,822,4.097,830,4.097,831,5.479,832,4.097,833,5.479,834,4.097,835,5.053,967,2.423,975,4.097,976,4.097,977,4.796,978,4.796,979,4.796,980,4.796,981,4.796,982,5.915,983,4.796]],["title/index.html",[9,0.397,984,3.013,985,3.013]],["body/index.html",[18,0.019,102,0.019,103,0.019,986,5.617,987,5.617,988,5.617,989,5.617]],["title/modules.html",[106,1.943]],["body/modules.html",[18,0.017,102,0.017,103,0.017,105,2.692,106,1.829,112,2.912,113,2.912,114,2.912,196,3.177,199,2.912,200,2.912,374,3.177,625,2.912,990,7.043,991,7.043,992,7.043,993,7.182,994,5.784,995,5.784]],["title/overview.html",[996,4.198]],["body/overview.html",[2,1.186,18,0.021,59,3.409,72,2.946,102,0.012,103,0.012,105,4.109,106,1.186,107,1.923,108,2.564,109,2.564,110,2.564,111,2.564,112,3.695,113,3.966,114,3.695,115,2.183,116,1.516,117,1.516,136,1.335,164,1.516,196,4.428,197,2.564,198,2.564,199,3.187,200,4.294,271,2.061,367,1.623,374,4.031,375,2.564,376,2.564,377,2.564,378,3.966,457,2.946,465,2.564,466,2.564,470,3.187,474,3.666,542,3.666,551,2.564,552,2.564,553,2.564,600,2.276,625,3.187,629,2.564,630,2.564,631,2.564,632,2.564,793,2.946,802,2.564,803,2.564,996,2.564,997,4.321,998,4.321,999,3.001,1000,3.001,1001,3.001]],["title/properties.html",[166,1.448,838,2.574]],["body/properties.html",[18,0.021,24,2.736,102,0.018,103,0.018,166,1.808,411,4.106,1002,5.414,1003,5.414,1004,5.414,1005,5.414]],["title/miscellaneous/typealiases.html",[967,1.523,1006,4.334]],["body/miscellaneous/typealiases.html",[9,0.692,18,0.019,102,0.018,103,0.018,144,0.895,336,3.983,337,5.059,341,4.487,345,4.487,351,5.339,352,5.339,967,2.654,1007,5.252,1008,6.249]],["title/miscellaneous/variables.html",[967,1.523,1009,3.703]],["body/miscellaneous/variables.html",[9,0.522,18,0.021,66,3.596,68,4.454,70,1.877,102,0.015,103,0.015,104,1.331,144,1.064,151,1.485,213,3.386,222,1.661,290,3.596,292,3.971,297,3.386,311,3.386,317,3.006,389,3.386,396,5.154,397,5.154,619,3.971,816,3.386,818,3.006,821,3.971,823,3.386,825,3.386,827,3.386,967,2.003,976,4.474,1009,3.386,1010,5.236,1011,3.963,1012,5.236,1013,3.963,1014,3.963,1015,3.963,1016,3.963,1017,3.963,1018,3.963]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":810,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1003,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":957,"title":{},"body":{"dependencies.html":{}}}],["0.1.4",{"_index":943,"title":{},"body":{"dependencies.html":{}}}],["0.10.26",{"_index":940,"title":{},"body":{"dependencies.html":{}}}],["0.10.3",{"_index":884,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":894,"title":{},"body":{"dependencies.html":{}}}],["0.3.12",{"_index":963,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":893,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":941,"title":{},"body":{"dependencies.html":{}}}],["0.6.3",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["0.7.6",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["0.9.22",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":813,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":826,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":824,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":814,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":829,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":811,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":815,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":812,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":828,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":757,"title":{},"body":{"guards/VaultGuard.html":{}}}],["1.0.0",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["1.0.4",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["1.1.0",{"_index":938,"title":{},"body":{"dependencies.html":{}}}],["1.1.22",{"_index":931,"title":{},"body":{"dependencies.html":{}}}],["1.11.0",{"_index":907,"title":{},"body":{"dependencies.html":{}}}],["1.17.3",{"_index":916,"title":{},"body":{"dependencies.html":{}}}],["1.2.1",{"_index":896,"title":{},"body":{"dependencies.html":{}}}],["1.3.5",{"_index":886,"title":{},"body":{"dependencies.html":{}}}],["1.4.1",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":901,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":903,"title":{},"body":{"dependencies.html":{}}}],["1.6.22",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":898,"title":{},"body":{"dependencies.html":{}}}],["1.8.14",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":676,"title":{},"body":{"injectables/SecurityService.html":{}}}],["10.0.2",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["14.9.0",{"_index":909,"title":{},"body":{"dependencies.html":{}}}],["16.0.3",{"_index":911,"title":{},"body":{"dependencies.html":{}}}],["17.0.2",{"_index":953,"title":{},"body":{"dependencies.html":{}}}],["17.8.4",{"_index":923,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":1001,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["2.2.4",{"_index":925,"title":{},"body":{"dependencies.html":{}}}],["2.3.1",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["2.4.0",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":31,"title":{},"body":{"controllers/AccountsController.html":{}}}],["3",{"_index":1000,"title":{},"body":{"overview.html":{}}}],["3.0.1",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":959,"title":{},"body":{"dependencies.html":{}}}],["3.0.3",{"_index":918,"title":{},"body":{"dependencies.html":{}}}],["3.1.9",{"_index":912,"title":{},"body":{"dependencies.html":{}}}],["3.2.1",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":966,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":876,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":905,"title":{},"body":{"dependencies.html":{}}}],["4.1.12",{"_index":882,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":892,"title":{},"body":{"dependencies.html":{}}}],["4.10.4",{"_index":889,"title":{},"body":{"dependencies.html":{}}}],["4.3.7",{"_index":926,"title":{},"body":{"dependencies.html":{}}}],["403",{"_index":23,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["5",{"_index":998,"title":{},"body":{"overview.html":{}}}],["5.1.0",{"_index":887,"title":{},"body":{"dependencies.html":{}}}],["5.1.6",{"_index":962,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":891,"title":{},"body":{"dependencies.html":{}}}],["5.3.1",{"_index":922,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":999,"title":{},"body":{"overview.html":{}}}],["6.0.1",{"_index":920,"title":{},"body":{"dependencies.html":{}}}],["6.2.1",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["6.4.0",{"_index":839,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":914,"title":{},"body":{"dependencies.html":{}}}],["6.9.1",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["60s",{"_index":646,"title":{},"body":{"modules/SecurityModule.html":{}}}],["64",{"_index":612,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["64})@apiproperty({type",{"_index":710,"title":{},"body":{"entities/User.html":{}}}],["64})@column({length",{"_index":607,"title":{},"body":{"entities/Role.html":{}}}],["64})@index({unique",{"_index":608,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["7.2.0",{"_index":960,"title":{},"body":{"dependencies.html":{}}}],["8.10.0",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["8.2.0",{"_index":928,"title":{},"body":{"dependencies.html":{}}}],["89",{"_index":639,"title":{},"body":{"modules/SecurityModule.html":{}}}],["9",{"_index":997,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":877,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["9.2.2",{"_index":874,"title":{},"body":{"dependencies.html":{}}}],["9.3.10",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["ability",{"_index":341,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory.ts",{"_index":337,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory.ts:19",{"_index":340,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilitybuilder",{"_index":342,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilityclass",{"_index":343,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["access",{"_index":44,"title":{},"body":{"controllers/AccountsController.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{}}}],["accesstoken",{"_index":686,"title":{},"body":{"classes/TokenDto.html":{}}}],["account",{"_index":20,"title":{},"body":{"controllers/AccountsController.html":{}}}],["account.'})@apiresponse({status",{"_index":36,"title":{},"body":{"controllers/AccountsController.html":{}}}],["accountname",{"_index":323,"title":{},"body":{"entities/Billing.html":{}}}],["accountnumber",{"_index":324,"title":{},"body":{"entities/Billing.html":{}}}],["accounts",{"_index":8,"title":{},"body":{"controllers/AccountsController.html":{},"entities/Address.html":{},"entities/Billing.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"entities/Profile.html":{},"entities/User.html":{},"controllers/VideosController.html":{}}}],["accounts.controller",{"_index":122,"title":{},"body":{"modules/AccountsModule.html":{}}}],["accounts.service",{"_index":60,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{}}}],["accounts/entities/user.entity",{"_index":523,"title":{},"body":{"entities/Post.html":{}}}],["accountscontroller",{"_index":1,"title":{"controllers/AccountsController.html":{}},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"coverage.html":{}}}],["accountsmodule",{"_index":105,"title":{"modules/AccountsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/SecurityModule.html":{},"modules.html":{},"overview.html":{}}}],["accountsservice",{"_index":59,"title":{"injectables/AccountsService.html":{}},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"injectables/SecurityService.html":{},"coverage.html":{},"overview.html":{}}}],["accounttype",{"_index":325,"title":{},"body":{"entities/Billing.html":{}}}],["action",{"_index":347,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/enumerations.html":{}}}],["addid",{"_index":526,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["address",{"_index":129,"title":{"entities/Address.html":{}},"body":{"modules/AccountsModule.html":{},"entities/Address.html":{},"entities/User.html":{},"coverage.html":{}}}],["address.entity",{"_index":736,"title":{},"body":{"entities/User.html":{}}}],["address.user",{"_index":745,"title":{},"body":{"entities/User.html":{}}}],["address.user)@joincolumn({name",{"_index":703,"title":{},"body":{"entities/User.html":{}}}],["address_id",{"_index":746,"title":{},"body":{"entities/User.html":{}}}],["address_id'})@apiproperty",{"_index":704,"title":{},"body":{"entities/User.html":{}}}],["admin",{"_index":21,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{},"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":1007,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amqp",{"_index":879,"title":{},"body":{"dependencies.html":{}}}],["amqplib",{"_index":883,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["api/accounts/accounts.module",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["api/accounts/accounts.service",{"_index":669,"title":{},"body":{"injectables/SecurityService.html":{}}}],["api/accounts/entities/user.entity",{"_index":349,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/SecurityService.html":{}}}],["api/posts/entities/post.entity",{"_index":350,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["apibody",{"_index":61,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apioperation",{"_index":62,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["apioperation({summary",{"_index":442,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["apiproperty",{"_index":188,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"classes/TokenDto.html":{},"entities/User.html":{}}}],["apiproperty({type",{"_index":605,"title":{},"body":{"entities/Role.html":{}}}],["apiresponse",{"_index":63,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["apitags",{"_index":64,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["apitags('account",{"_index":74,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apitags('images",{"_index":459,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apitags('social",{"_index":544,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('videos",{"_index":795,"title":{},"body":{"controllers/VideosController.html":{}}}],["apiversion",{"_index":772,"title":{},"body":{"injectables/VaultService.html":{}}}],["app",{"_index":983,"title":{},"body":{"miscellaneous/functions.html":{}}}],["app.controller",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["appability",{"_index":352,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["appcontroller",{"_index":193,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":196,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps/.../action.enum.ts",{"_index":969,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../auth.interface.ts",{"_index":1010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../casl",{"_index":1008,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../constants.ts",{"_index":1011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../discord.config.ts",{"_index":1013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":976,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/.../repl.ts",{"_index":977,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../role.enum.ts",{"_index":970,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../roles.decorator.ts",{"_index":1012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/api/src/api/accounts/accounts.controller.ts",{"_index":6,"title":{},"body":{"controllers/AccountsController.html":{},"coverage.html":{}}}],["apps/api/src/api/accounts/accounts.controller.ts:26",{"_index":51,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apps/api/src/api/accounts/accounts.controller.ts:38",{"_index":38,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apps/api/src/api/accounts/accounts.controller.ts:47",{"_index":47,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apps/api/src/api/accounts/accounts.controller.ts:53",{"_index":53,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apps/api/src/api/accounts/accounts.controller.ts:59",{"_index":27,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apps/api/src/api/accounts/accounts.module",{"_index":634,"title":{},"body":{"modules/SecurityModule.html":{}}}],["apps/api/src/api/accounts/accounts.module.ts",{"_index":118,"title":{},"body":{"modules/AccountsModule.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts",{"_index":137,"title":{},"body":{"injectables/AccountsService.html":{},"coverage.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:12",{"_index":153,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:18",{"_index":147,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:22",{"_index":155,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:26",{"_index":156,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:30",{"_index":149,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:34",{"_index":154,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:7",{"_index":143,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts",{"_index":165,"title":{},"body":{"entities/Address.html":{},"coverage.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:12",{"_index":181,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:15",{"_index":174,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:18",{"_index":176,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:21",{"_index":175,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:24",{"_index":177,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:28",{"_index":184,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:9",{"_index":180,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/billing.entity.ts",{"_index":322,"title":{},"body":{"entities/Billing.html":{},"coverage.html":{}}}],["apps/api/src/api/accounts/entities/billing.entity.ts:12",{"_index":329,"title":{},"body":{"entities/Billing.html":{}}}],["apps/api/src/api/accounts/entities/billing.entity.ts:15",{"_index":328,"title":{},"body":{"entities/Billing.html":{}}}],["apps/api/src/api/accounts/entities/billing.entity.ts:18",{"_index":330,"title":{},"body":{"entities/Billing.html":{}}}],["apps/api/src/api/accounts/entities/billing.entity.ts:22",{"_index":332,"title":{},"body":{"entities/Billing.html":{}}}],["apps/api/src/api/accounts/entities/billing.entity.ts:9",{"_index":327,"title":{},"body":{"entities/Billing.html":{}}}],["apps/api/src/api/accounts/entities/profile.entity.ts",{"_index":571,"title":{},"body":{"entities/Profile.html":{},"coverage.html":{}}}],["apps/api/src/api/accounts/entities/profile.entity.ts:12",{"_index":575,"title":{},"body":{"entities/Profile.html":{}}}],["apps/api/src/api/accounts/entities/profile.entity.ts:15",{"_index":577,"title":{},"body":{"entities/Profile.html":{}}}],["apps/api/src/api/accounts/entities/profile.entity.ts:19",{"_index":579,"title":{},"body":{"entities/Profile.html":{}}}],["apps/api/src/api/accounts/entities/profile.entity.ts:9",{"_index":576,"title":{},"body":{"entities/Profile.html":{}}}],["apps/api/src/api/accounts/entities/user.entity",{"_index":602,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts",{"_index":700,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:31",{"_index":714,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:35",{"_index":730,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:39",{"_index":713,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:43",{"_index":716,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:48",{"_index":711,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:53",{"_index":718,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:59",{"_index":724,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:64",{"_index":705,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:69",{"_index":708,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:73",{"_index":721,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:81",{"_index":729,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:86",{"_index":731,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:90",{"_index":715,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/images/images.controller.ts",{"_index":437,"title":{},"body":{"controllers/ImagesController.html":{},"coverage.html":{}}}],["apps/api/src/api/images/images.controller.ts:13",{"_index":456,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apps/api/src/api/images/images.controller.ts:18",{"_index":452,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apps/api/src/api/images/images.controller.ts:23",{"_index":454,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apps/api/src/api/images/images.controller.ts:28",{"_index":450,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apps/api/src/api/images/images.controller.ts:33",{"_index":446,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apps/api/src/api/images/images.module.ts",{"_index":467,"title":{},"body":{"modules/ImagesModule.html":{}}}],["apps/api/src/api/images/images.service.ts",{"_index":469,"title":{},"body":{"injectables/ImagesService.html":{},"coverage.html":{}}}],["apps/api/src/api/posts/dto/createposts.dto.ts",{"_index":410,"title":{},"body":{"classes/CreatePostsDto.html":{},"coverage.html":{}}}],["apps/api/src/api/posts/dto/createposts.dto.ts:10",{"_index":416,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["apps/api/src/api/posts/dto/createposts.dto.ts:14",{"_index":415,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["apps/api/src/api/posts/dto/createposts.dto.ts:6",{"_index":417,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["apps/api/src/api/posts/dto/updateposts.dto.ts",{"_index":696,"title":{},"body":{"classes/UpdatePostsDto.html":{},"coverage.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts",{"_index":497,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:22",{"_index":514,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:25",{"_index":516,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:28",{"_index":506,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:31",{"_index":505,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:35",{"_index":504,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:38",{"_index":515,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:41",{"_index":508,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:44",{"_index":517,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:47",{"_index":509,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/posts.controller.ts",{"_index":530,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["apps/api/src/api/posts/posts.controller.ts:13",{"_index":533,"title":{},"body":{"controllers/PostsController.html":{}}}],["apps/api/src/api/posts/posts.controller.ts:18",{"_index":537,"title":{},"body":{"controllers/PostsController.html":{}}}],["apps/api/src/api/posts/posts.controller.ts:23",{"_index":541,"title":{},"body":{"controllers/PostsController.html":{}}}],["apps/api/src/api/posts/posts.controller.ts:28",{"_index":539,"title":{},"body":{"controllers/PostsController.html":{}}}],["apps/api/src/api/posts/posts.controller.ts:33",{"_index":535,"title":{},"body":{"controllers/PostsController.html":{}}}],["apps/api/src/api/posts/posts.module.ts",{"_index":554,"title":{},"body":{"modules/PostsModule.html":{}}}],["apps/api/src/api/posts/posts.service.ts",{"_index":558,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["apps/api/src/api/posts/posts.service.ts:12",{"_index":564,"title":{},"body":{"injectables/PostsService.html":{}}}],["apps/api/src/api/posts/posts.service.ts:16",{"_index":568,"title":{},"body":{"injectables/PostsService.html":{}}}],["apps/api/src/api/posts/posts.service.ts:20",{"_index":565,"title":{},"body":{"injectables/PostsService.html":{}}}],["apps/api/src/api/posts/posts.service.ts:24",{"_index":566,"title":{},"body":{"injectables/PostsService.html":{}}}],["apps/api/src/api/posts/posts.service.ts:28",{"_index":567,"title":{},"body":{"injectables/PostsService.html":{}}}],["apps/api/src/api/posts/posts.service.ts:7",{"_index":562,"title":{},"body":{"injectables/PostsService.html":{}}}],["apps/api/src/api/videos/videos.controller.ts",{"_index":777,"title":{},"body":{"controllers/VideosController.html":{},"coverage.html":{}}}],["apps/api/src/api/videos/videos.controller.ts:13",{"_index":781,"title":{},"body":{"controllers/VideosController.html":{}}}],["apps/api/src/api/videos/videos.controller.ts:18",{"_index":792,"title":{},"body":{"controllers/VideosController.html":{}}}],["apps/api/src/api/videos/videos.controller.ts:23",{"_index":788,"title":{},"body":{"controllers/VideosController.html":{}}}],["apps/api/src/api/videos/videos.controller.ts:28",{"_index":790,"title":{},"body":{"controllers/VideosController.html":{}}}],["apps/api/src/api/videos/videos.controller.ts:33",{"_index":786,"title":{},"body":{"controllers/VideosController.html":{}}}],["apps/api/src/api/videos/videos.controller.ts:38",{"_index":784,"title":{},"body":{"controllers/VideosController.html":{}}}],["apps/api/src/api/videos/videos.module.ts",{"_index":804,"title":{},"body":{"modules/VideosModule.html":{}}}],["apps/api/src/api/videos/videos.service.ts",{"_index":806,"title":{},"body":{"injectables/VideosService.html":{},"coverage.html":{}}}],["apps/api/src/app.controller.ts",{"_index":194,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/api/src/app.module.ts",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/api/src/config/discord.config.ts",{"_index":816,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/main.ts",{"_index":818,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/repl.ts",{"_index":822,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["apps/api/src/security/constants.ts",{"_index":823,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/security/dto/login.dto.ts",{"_index":490,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["apps/api/src/security/dto/login.dto.ts:14",{"_index":492,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/security/dto/login.dto.ts:19",{"_index":494,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/security/dto/login.dto.ts:8",{"_index":495,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/security/dto/register.dto.ts",{"_index":583,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["apps/api/src/security/dto/register.dto.ts:15",{"_index":589,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/security/dto/register.dto.ts:21",{"_index":590,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/security/dto/register.dto.ts:28",{"_index":587,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/security/dto/register.dto.ts:34",{"_index":592,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/security/dto/register.dto.ts:9",{"_index":593,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/security/dto/token.dto.ts",{"_index":685,"title":{},"body":{"classes/TokenDto.html":{},"coverage.html":{}}}],["apps/api/src/security/dto/token.dto.ts:11",{"_index":691,"title":{},"body":{"classes/TokenDto.html":{}}}],["apps/api/src/security/dto/token.dto.ts:5",{"_index":690,"title":{},"body":{"classes/TokenDto.html":{}}}],["apps/api/src/security/dto/token.dto.ts:8",{"_index":689,"title":{},"body":{"classes/TokenDto.html":{}}}],["apps/api/src/security/guards/auth.guard.ts",{"_index":272,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["apps/api/src/security/guards/auth.guard.ts:14",{"_index":278,"title":{},"body":{"guards/AuthGuard.html":{}}}],["apps/api/src/security/guards/auth.guard.ts:17",{"_index":281,"title":{},"body":{"guards/AuthGuard.html":{}}}],["apps/api/src/security/guards/auth.guard.ts:44",{"_index":285,"title":{},"body":{"guards/AuthGuard.html":{}}}],["apps/api/src/security/guards/roles.guard.ts",{"_index":614,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["apps/api/src/security/guards/roles.guard.ts:10",{"_index":617,"title":{},"body":{"guards/RolesGuard.html":{}}}],["apps/api/src/security/guards/roles.guard.ts:7",{"_index":616,"title":{},"body":{"guards/RolesGuard.html":{}}}],["apps/api/src/security/guards/vault.guard.ts",{"_index":751,"title":{},"body":{"guards/VaultGuard.html":{},"coverage.html":{}}}],["apps/api/src/security/guards/vault.guard.ts:6",{"_index":752,"title":{},"body":{"guards/VaultGuard.html":{}}}],["apps/api/src/security/guards/vault.guard.ts:9",{"_index":753,"title":{},"body":{"guards/VaultGuard.html":{}}}],["apps/api/src/security/interfaces/auth.interface.ts",{"_index":825,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/security/interfaces/requestwithuser.interface.ts",{"_index":601,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["apps/api/src/security/interfaces/tokenpayload.interface.ts",{"_index":693,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["apps/api/src/security/roles/casl/casl",{"_index":336,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/security/roles/decorators/roles.decorator.ts",{"_index":827,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/security/roles/entities/role.entity.ts",{"_index":603,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["apps/api/src/security/roles/entities/role.entity.ts:14",{"_index":604,"title":{},"body":{"entities/Role.html":{}}}],["apps/api/src/security/roles/entities/role.entity.ts:19",{"_index":609,"title":{},"body":{"entities/Role.html":{}}}],["apps/api/src/security/roles/enum/action.enum.ts",{"_index":971,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/api/src/security/roles/enum/role.enum.ts",{"_index":973,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/api/src/security/roles/roles.module.ts",{"_index":626,"title":{},"body":{"modules/RolesModule.html":{}}}],["apps/api/src/security/security.module.ts",{"_index":633,"title":{},"body":{"modules/SecurityModule.html":{}}}],["apps/api/src/security/security.service.ts",{"_index":647,"title":{},"body":{"injectables/SecurityService.html":{},"coverage.html":{}}}],["apps/api/src/security/security.service.ts:12",{"_index":665,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:21",{"_index":662,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:30",{"_index":658,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:34",{"_index":659,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:38",{"_index":660,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:42",{"_index":656,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:46",{"_index":663,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:9",{"_index":654,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/strategies/local.strategy.ts",{"_index":471,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["apps/api/src/security/strategies/local.strategy.ts:12",{"_index":478,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["apps/api/src/security/strategies/local.strategy.ts:7",{"_index":475,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["apps/api/src/security/vault/vault.service.ts",{"_index":761,"title":{},"body":{"injectables/VaultService.html":{},"coverage.html":{}}}],["apps/api/src/security/vault/vault.service.ts:15",{"_index":765,"title":{},"body":{"injectables/VaultService.html":{}}}],["apps/api/src/security/vault/vault.service.ts:19",{"_index":767,"title":{},"body":{"injectables/VaultService.html":{}}}],["apps/api/src/security/vault/vault.service.ts:6",{"_index":763,"title":{},"body":{"injectables/VaultService.html":{}}}],["appwrite",{"_index":927,"title":{},"body":{"dependencies.html":{}}}],["assigning",{"_index":309,"title":{},"body":{"guards/AuthGuard.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"controllers/ImagesController.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SecurityService.html":{},"injectables/VaultService.html":{},"controllers/VideosController.html":{}}}],["authguard",{"_index":215,"title":{"guards/AuthGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"coverage.html":{}}}],["author",{"_index":411,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{},"properties.html":{}}}],["authorid",{"_index":361,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"entities/Post.html":{}}}],["authservice",{"_index":476,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["autoloadentities",{"_index":435,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["available",{"_index":995,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":572,"title":{},"body":{"entities/Profile.html":{}}}],["await",{"_index":91,"title":{},"body":{"controllers/AccountsController.html":{},"guards/AuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"injectables/SecurityService.html":{}}}],["axios",{"_index":885,"title":{},"body":{"dependencies.html":{}}}],["basic",{"_index":76,"title":{},"body":{"controllers/AccountsController.html":{}}}],["bcrypt",{"_index":666,"title":{},"body":{"injectables/SecurityService.html":{},"dependencies.html":{}}}],["bcrypt.hash(register.password",{"_index":675,"title":{},"body":{"injectables/SecurityService.html":{}}}],["bearer",{"_index":321,"title":{},"body":{"guards/AuthGuard.html":{}}}],["beforeinsert",{"_index":518,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["billing",{"_index":127,"title":{"entities/Billing.html":{}},"body":{"modules/AccountsModule.html":{},"entities/Billing.html":{},"entities/User.html":{},"coverage.html":{}}}],["billing.entity",{"_index":737,"title":{},"body":{"entities/User.html":{}}}],["billing.user",{"_index":747,"title":{},"body":{"entities/User.html":{}}}],["billing.user)@joincolumn({name",{"_index":706,"title":{},"body":{"entities/User.html":{}}}],["billing_id",{"_index":748,"title":{},"body":{"entities/User.html":{}}}],["billing_id'})@apiproperty",{"_index":707,"title":{},"body":{"entities/User.html":{}}}],["bio",{"_index":573,"title":{},"body":{"entities/Profile.html":{}}}],["body",{"_index":55,"title":{},"body":{"controllers/AccountsController.html":{}}}],["boolean",{"_index":400,"title":{},"body":{"injectables/ConfigurationService.html":{},"entities/Post.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"guards/VaultGuard.html":{}}}],["booleans",{"_index":749,"title":{},"body":{"entities/User.html":{}}}],["bootstrap",{"_index":820,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":993,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":990,"title":{},"body":{"modules.html":{}}}],["build",{"_index":353,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["bull",{"_index":888,"title":{},"body":{"dependencies.html":{}}}],["cache",{"_index":890,"title":{},"body":{"dependencies.html":{}}}],["can(action.manage",{"_index":355,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.read",{"_index":359,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.update",{"_index":360,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["canactivate",{"_index":273,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{},"guards/VaultGuard.html":{}}}],["canactivate(context",{"_index":279,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{},"guards/VaultGuard.html":{}}}],["cannot(action.delete",{"_index":363,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["cascade",{"_index":726,"title":{},"body":{"entities/User.html":{}}}],["casl/ability",{"_index":346,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"dependencies.html":{}}}],["caslabilityfactory",{"_index":335,"title":{"injectables/CaslAbilityFactory.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{}}}],["catch",{"_index":319,"title":{},"body":{"guards/AuthGuard.html":{},"guards/VaultGuard.html":{}}}],["chalk",{"_index":821,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["city",{"_index":167,"title":{},"body":{"entities/Address.html":{}}}],["class",{"_index":80,"title":{"classes/CreatePostsDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/TokenDto.html":{},"classes/UpdatePostsDto.html":{}},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":367,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/CreatePostsDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/TokenDto.html":{},"classes/UpdatePostsDto.html":{},"overview.html":{}}}],["classic",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["client",{"_index":762,"title":{},"body":{"injectables/VaultService.html":{}}}],["clsx",{"_index":895,"title":{},"body":{"dependencies.html":{}}}],["cluster_accountsmodule",{"_index":108,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_exports",{"_index":109,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_imports",{"_index":110,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_providers",{"_index":111,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":198,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_configurationmodule",{"_index":375,"title":{},"body":{"modules/ConfigurationModule.html":{},"overview.html":{}}}],["cluster_configurationmodule_exports",{"_index":376,"title":{},"body":{"modules/ConfigurationModule.html":{},"overview.html":{}}}],["cluster_configurationmodule_providers",{"_index":377,"title":{},"body":{"modules/ConfigurationModule.html":{},"overview.html":{}}}],["cluster_imagesmodule",{"_index":465,"title":{},"body":{"modules/ImagesModule.html":{},"overview.html":{}}}],["cluster_imagesmodule_providers",{"_index":466,"title":{},"body":{"modules/ImagesModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":551,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":553,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_providers",{"_index":552,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_securitymodule",{"_index":629,"title":{},"body":{"modules/SecurityModule.html":{},"overview.html":{}}}],["cluster_securitymodule_exports",{"_index":632,"title":{},"body":{"modules/SecurityModule.html":{},"overview.html":{}}}],["cluster_securitymodule_imports",{"_index":631,"title":{},"body":{"modules/SecurityModule.html":{},"overview.html":{}}}],["cluster_securitymodule_providers",{"_index":630,"title":{},"body":{"modules/SecurityModule.html":{},"overview.html":{}}}],["cluster_videosmodule",{"_index":802,"title":{},"body":{"modules/VideosModule.html":{},"overview.html":{}}}],["cluster_videosmodule_providers",{"_index":803,"title":{},"body":{"modules/VideosModule.html":{},"overview.html":{}}}],["column",{"_index":185,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Post.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["column()@apiproperty",{"_index":173,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Profile.html":{},"entities/User.html":{}}}],["column()@apiproperty()@exclude",{"_index":717,"title":{},"body":{"entities/User.html":{}}}],["column()@apiproperty({type",{"_index":712,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":709,"title":{},"body":{"entities/User.html":{}}}],["compression",{"_index":897,"title":{},"body":{"dependencies.html":{}}}],["condition",{"_index":302,"title":{},"body":{"guards/AuthGuard.html":{}}}],["configmodule",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule.forroot",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":422,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_host",{"_index":428,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_name",{"_index":432,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_password",{"_index":431,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_port",{"_index":429,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_schema",{"_index":433,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_user",{"_index":430,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configuration.service",{"_index":380,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configurationmodule",{"_index":374,"title":{"modules/ConfigurationModule.html":{}},"body":{"modules/ConfigurationModule.html":{},"modules.html":{},"overview.html":{}}}],["configurationservice",{"_index":378,"title":{"injectables/ConfigurationService.html":{}},"body":{"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"coverage.html":{},"overview.html":{}}}],["connection",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["const",{"_index":296,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"guards/VaultGuard.html":{}}}],["constants",{"_index":291,"title":{},"body":{"guards/AuthGuard.html":{},"modules/SecurityModule.html":{}}}],["constructor",{"_index":81,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/ConfigurationService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/SecurityService.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{}}}],["constructor(authservice",{"_index":473,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(env",{"_index":385,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["constructor(jwtservice",{"_index":275,"title":{},"body":{"guards/AuthGuard.html":{},"guards/VaultGuard.html":{}}}],["constructor(postsrepository",{"_index":561,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":295,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/ImagesController.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"guards/VaultGuard.html":{},"controllers/VideosController.html":{}}}],["constructor(reflector",{"_index":615,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(userrepository",{"_index":141,"title":{},"body":{"injectables/AccountsService.html":{}}}],["constructor(userservice",{"_index":653,"title":{},"body":{"injectables/SecurityService.html":{}}}],["content",{"_index":412,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{}}}],["context",{"_index":282,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{},"guards/VaultGuard.html":{}}}],["context.getclass",{"_index":300,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":299,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":303,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{},"guards/VaultGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AccountsController.html":{},"controllers/AppController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}},"body":{"controllers/AccountsController.html":{},"controllers/AppController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{},"coverage.html":{}}}],["controller('accounts",{"_index":78,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"overview.html":{}}}],["cookie",{"_index":899,"title":{},"body":{"dependencies.html":{}}}],["country",{"_index":168,"title":{},"body":{"entities/Address.html":{}}}],["county",{"_index":169,"title":{},"body":{"entities/Address.html":{}}}],["cover",{"_index":574,"title":{},"body":{"entities/Profile.html":{}}}],["coverage",{"_index":807,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cpx",{"_index":902,"title":{},"body":{"dependencies.html":{}}}],["create",{"_index":138,"title":{},"body":{"injectables/AccountsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/VideosController.html":{},"miscellaneous/enumerations.html":{}}}],["create(user",{"_index":146,"title":{},"body":{"injectables/AccountsService.html":{}}}],["created",{"_index":85,"title":{},"body":{"controllers/AccountsController.html":{}}}],["created.'})@apioperation({summary",{"_index":34,"title":{},"body":{"controllers/AccountsController.html":{}}}],["createdat",{"_index":498,"title":{},"body":{"entities/Post.html":{}}}],["createforuser",{"_index":338,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createforuser(user",{"_index":339,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createposts.dto",{"_index":698,"title":{},"body":{"classes/UpdatePostsDto.html":{}}}],["createpostsdto",{"_index":409,"title":{"classes/CreatePostsDto.html":{}},"body":{"classes/CreatePostsDto.html":{},"classes/UpdatePostsDto.html":{},"coverage.html":{}}}],["crypto",{"_index":904,"title":{},"body":{"dependencies.html":{}}}],["csurf",{"_index":906,"title":{},"body":{"dependencies.html":{}}}],["database",{"_index":226,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["database/database",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["database_host",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["database_name",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["database_password",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["database_port",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["database_schema",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["database_user",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":199,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":507,"title":{},"body":{"entities/Post.html":{}}}],["decorators",{"_index":17,"title":{},"body":{"controllers/AccountsController.html":{},"entities/Address.html":{},"entities/Billing.html":{},"classes/CreatePostsDto.html":{},"controllers/ImagesController.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"classes/TokenDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{}}}],["default",{"_index":396,"title":{},"body":{"injectables/ConfigurationService.html":{},"entities/Role.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":387,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["defaultstrategy",{"_index":641,"title":{},"body":{"modules/SecurityModule.html":{}}}],["defined",{"_index":26,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"controllers/ImagesController.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"entities/User.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{},"controllers/VideosController.html":{}}}],["delete",{"_index":12,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/VideosController.html":{},"miscellaneous/enumerations.html":{}}}],["delete('delete",{"_index":101,"title":{},"body":{"controllers/AccountsController.html":{}}}],["delete('image:delete",{"_index":464,"title":{},"body":{"controllers/ImagesController.html":{}}}],["delete('image:delete:soft",{"_index":463,"title":{},"body":{"controllers/ImagesController.html":{}}}],["delete('post:delete",{"_index":550,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('post:delete:soft",{"_index":549,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('video:delete",{"_index":801,"title":{},"body":{"controllers/VideosController.html":{}}}],["delete('video:delete:soft",{"_index":800,"title":{},"body":{"controllers/VideosController.html":{}}}],["deletedat",{"_index":499,"title":{},"body":{"entities/Post.html":{}}}],["dependencies",{"_index":107,"title":{"dependencies.html":{}},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/ImagesModule.html":{},"modules/PostsModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":24,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Role.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"properties.html":{}}}],["details",{"_index":370,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["detection#use",{"_index":366,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["detectsubjecttype",{"_index":371,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["discord",{"_index":942,"title":{},"body":{"dependencies.html":{}}}],["discord.js",{"_index":908,"title":{},"body":{"dependencies.html":{}}}],["docker",{"_index":929,"title":{},"body":{"dependencies.html":{}}}],["docs",{"_index":989,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":808,"title":{},"body":{"coverage.html":{}}}],["docusaurus/core",{"_index":840,"title":{},"body":{"dependencies.html":{}}}],["docusaurus/preset",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["dom",{"_index":954,"title":{},"body":{"dependencies.html":{}}}],["dotenv",{"_index":910,"title":{},"body":{"dependencies.html":{}}}],["dto/login.dto",{"_index":668,"title":{},"body":{"injectables/SecurityService.html":{}}}],["dto/register.dto",{"_index":667,"title":{},"body":{"injectables/SecurityService.html":{}}}],["ejs",{"_index":267,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["elliptic",{"_index":913,"title":{},"body":{"dependencies.html":{}}}],["email",{"_index":152,"title":{},"body":{"injectables/AccountsService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["emitter",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["endpoint",{"_index":774,"title":{},"body":{"injectables/VaultService.html":{}}}],["entities",{"_index":164,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"modules/DatabaseModule.html":{},"entities/Post.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/address.entity",{"_index":130,"title":{},"body":{"modules/AccountsModule.html":{}}}],["entities/billing.entity",{"_index":128,"title":{},"body":{"modules/AccountsModule.html":{}}}],["entities/post.entity",{"_index":556,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["entities/profile.entity",{"_index":126,"title":{},"body":{"modules/AccountsModule.html":{}}}],["entities/role.entity",{"_index":627,"title":{},"body":{"modules/RolesModule.html":{}}}],["entities/user.entity",{"_index":125,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{}}}],["entity",{"_index":163,"title":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Post.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Post.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('address",{"_index":190,"title":{},"body":{"entities/Address.html":{}}}],["entity('billing",{"_index":333,"title":{},"body":{"entities/Billing.html":{}}}],["entity('post",{"_index":524,"title":{},"body":{"entities/Post.html":{}}}],["entity('profile",{"_index":580,"title":{},"body":{"entities/Profile.html":{}}}],["entity('roles",{"_index":610,"title":{},"body":{"entities/Role.html":{}}}],["entity('user",{"_index":742,"title":{},"body":{"entities/User.html":{}}}],["enum/action.enum",{"_index":348,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["enumerations",{"_index":968,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":389,"title":{},"body":{"injectables/ConfigurationService.html":{},"miscellaneous/variables.html":{}}}],["everything",{"_index":358,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["exclude",{"_index":738,"title":{},"body":{"entities/User.html":{}}}],["executioncontext",{"_index":280,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{},"guards/VaultGuard.html":{}}}],["expires_in",{"_index":687,"title":{},"body":{"classes/TokenDto.html":{}}}],["expiresin",{"_index":645,"title":{},"body":{"modules/SecurityModule.html":{}}}],["export",{"_index":79,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{}}}],["exports",{"_index":121,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ConfigurationModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{}}}],["express",{"_index":289,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/RequestWithUser.html":{},"dependencies.html":{}}}],["extends",{"_index":485,"title":{},"body":{"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdatePostsDto.html":{}}}],["extensions",{"_index":266,"title":{},"body":{"modules/AppModule.html":{}}}],["extractsubjecttype",{"_index":344,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["extracttokenfromheader",{"_index":274,"title":{},"body":{"guards/AuthGuard.html":{}}}],["extracttokenfromheader(request",{"_index":283,"title":{},"body":{"guards/AuthGuard.html":{}}}],["false",{"_index":760,"title":{},"body":{"guards/VaultGuard.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"coverage.html":{}}}],["findone",{"_index":139,"title":{},"body":{"injectables/AccountsService.html":{}}}],["findone(username",{"_index":150,"title":{},"body":{"injectables/AccountsService.html":{}}}],["firstname",{"_index":584,"title":{},"body":{"classes/RegisterDto.html":{},"entities/User.html":{}}}],["forbidden",{"_index":87,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["forbidden.'})@delete('delete",{"_index":25,"title":{},"body":{"controllers/AccountsController.html":{}}}],["forbidden.'})@delete('image:delete",{"_index":445,"title":{},"body":{"controllers/ImagesController.html":{}}}],["forbidden.'})@delete('image:delete:soft",{"_index":449,"title":{},"body":{"controllers/ImagesController.html":{}}}],["forbidden.'})@delete('post:delete",{"_index":534,"title":{},"body":{"controllers/PostsController.html":{}}}],["forbidden.'})@delete('post:delete:soft",{"_index":538,"title":{},"body":{"controllers/PostsController.html":{}}}],["forbidden.'})@delete('video:delete",{"_index":783,"title":{},"body":{"controllers/VideosController.html":{}}}],["forbidden.'})@delete('video:delete:soft",{"_index":785,"title":{},"body":{"controllers/VideosController.html":{}}}],["forbidden.'})@get",{"_index":46,"title":{},"body":{"controllers/AccountsController.html":{}}}],["forbidden.'})@get('image:view",{"_index":455,"title":{},"body":{"controllers/ImagesController.html":{}}}],["forbidden.'})@get('post:read",{"_index":536,"title":{},"body":{"controllers/PostsController.html":{}}}],["forbidden.'})@get('video:watch",{"_index":791,"title":{},"body":{"controllers/VideosController.html":{}}}],["forbidden.'})@post('image:upload",{"_index":453,"title":{},"body":{"controllers/ImagesController.html":{}}}],["forbidden.'})@post('login",{"_index":37,"title":{},"body":{"controllers/AccountsController.html":{}}}],["forbidden.'})@post('post:create",{"_index":532,"title":{},"body":{"controllers/PostsController.html":{}}}],["forbidden.'})@post('register",{"_index":50,"title":{},"body":{"controllers/AccountsController.html":{}}}],["forbidden.'})@post('video:create",{"_index":780,"title":{},"body":{"controllers/VideosController.html":{}}}],["forbidden.'})@post('video:upload",{"_index":789,"title":{},"body":{"controllers/VideosController.html":{}}}],["forbidden.'})@put('image:update",{"_index":451,"title":{},"body":{"controllers/ImagesController.html":{}}}],["forbidden.'})@put('post:update",{"_index":540,"title":{},"body":{"controllers/PostsController.html":{}}}],["forbidden.'})@put('update",{"_index":52,"title":{},"body":{"controllers/AccountsController.html":{}}}],["forbidden.'})@put('video:update",{"_index":787,"title":{},"body":{"controllers/VideosController.html":{}}}],["forgotpassword",{"_index":648,"title":{},"body":{"injectables/SecurityService.html":{}}}],["function",{"_index":819,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":975,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('image:view",{"_index":460,"title":{},"body":{"controllers/ImagesController.html":{}}}],["get('post:read",{"_index":547,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('video:watch",{"_index":797,"title":{},"body":{"controllers/VideosController.html":{}}}],["get(key",{"_index":390,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getall",{"_index":140,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getarray",{"_index":382,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getarray(key",{"_index":393,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getboolean",{"_index":383,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getboolean(key",{"_index":398,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getnumber",{"_index":384,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getnumber(key",{"_index":401,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getpost",{"_index":559,"title":{},"body":{"injectables/PostsService.html":{}}}],["getposts",{"_index":560,"title":{},"body":{"injectables/PostsService.html":{}}}],["getting",{"_index":984,"title":{"index.html":{}},"body":{}}],["global",{"_index":643,"title":{},"body":{"modules/SecurityModule.html":{}}}],["graph",{"_index":994,"title":{},"body":{"modules.html":{}}}],["grpc",{"_index":246,"title":{},"body":{"modules/AppModule.html":{}}}],["grpc/grpc",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["grpc/proto",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["grpc_host",{"_index":247,"title":{},"body":{"modules/AppModule.html":{}}}],["grpc_package",{"_index":248,"title":{},"body":{"modules/AppModule.html":{}}}],["grpc_proto_path",{"_index":249,"title":{},"body":{"modules/AppModule.html":{}}}],["guard",{"_index":270,"title":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{},"guards/VaultGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":271,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{},"guards/VaultGuard.html":{},"overview.html":{}}}],["guest",{"_index":974,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hads",{"_index":917,"title":{},"body":{"dependencies.html":{}}}],["handlers",{"_index":314,"title":{},"body":{"guards/AuthGuard.html":{}}}],["hard",{"_index":443,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["harddelete",{"_index":438,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["hashedpassword",{"_index":674,"title":{},"body":{"injectables/SecurityService.html":{}}}],["helmet",{"_index":919,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":312,"title":{},"body":{"guards/AuthGuard.html":{}}}],["host",{"_index":427,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["https://casl.js.org/v5/en/guide/subject",{"_index":365,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["https://vault.nxie.uk",{"_index":775,"title":{},"body":{"injectables/VaultService.html":{}}}],["id",{"_index":500,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["id'})@apiproperty({description",{"_index":511,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["identifier",{"_index":513,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["image",{"_index":444,"title":{},"body":{"controllers/ImagesController.html":{}}}],["image'})@apiresponse({status",{"_index":448,"title":{},"body":{"controllers/ImagesController.html":{}}}],["images.controller",{"_index":468,"title":{},"body":{"modules/ImagesModule.html":{}}}],["images.service",{"_index":458,"title":{},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{}}}],["images/images.module",{"_index":132,"title":{},"body":{"modules/AccountsModule.html":{}}}],["imagescontroller",{"_index":436,"title":{"controllers/ImagesController.html":{}},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"coverage.html":{}}}],["imagesmodule",{"_index":112,"title":{"modules/ImagesModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ImagesModule.html":{},"modules.html":{},"overview.html":{}}}],["imagesservice",{"_index":457,"title":{"injectables/ImagesService.html":{}},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"coverage.html":{},"overview.html":{}}}],["implements",{"_index":294,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{},"guards/VaultGuard.html":{}}}],["import",{"_index":54,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{}}}],["imports",{"_index":120,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"controllers/ImagesController.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{},"controllers/VideosController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":982,"title":{},"body":{"miscellaneous/functions.html":{}}}],["infersubjects",{"_index":345,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{}}}],["inject",{"_index":424,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["injectable",{"_index":135,"title":{"injectables/AccountsService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"injectables/SecurityService.html":{},"injectables/VaultService.html":{},"injectables/VideosService.html":{}},"body":{"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{},"injectables/VideosService.html":{},"coverage.html":{}}}],["injectables",{"_index":136,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"injectables/SecurityService.html":{},"injectables/VaultService.html":{},"injectables/VideosService.html":{},"overview.html":{}}}],["injectrepository",{"_index":157,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":569,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(user",{"_index":159,"title":{},"body":{"injectables/AccountsService.html":{}}}],["interface",{"_index":598,"title":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":600,"title":{},"body":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"overview.html":{}}}],["interfaces/auth.interface",{"_index":293,"title":{},"body":{"guards/AuthGuard.html":{}}}],["ioredis",{"_index":921,"title":{},"body":{"dependencies.html":{}}}],["is_public_key",{"_index":292,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isadmin",{"_index":701,"title":{},"body":{"entities/User.html":{}}}],["isemail",{"_index":496,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isglobal",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":418,"title":{},"body":{"classes/CreatePostsDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty()@isstring()@minlength(16)@apiproperty",{"_index":591,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isnotempty()@isstring()@minlength(3)@apiproperty",{"_index":588,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isnotempty()@isstring()@minlength(8)@isemail()@apiproperty",{"_index":586,"title":{},"body":{"classes/RegisterDto.html":{}}}],["ispublic",{"_index":297,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ispublished",{"_index":364,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"entities/Post.html":{}}}],["isstring",{"_index":419,"title":{},"body":{"classes/CreatePostsDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isnotempty",{"_index":414,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["isstring()@isnotempty()@apiproperty",{"_index":493,"title":{},"body":{"classes/LoginDto.html":{}}}],["isstring()@isnotempty()@isemail()@apiproperty",{"_index":491,"title":{},"body":{"classes/LoginDto.html":{}}}],["item",{"_index":372,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["item.constructor",{"_index":373,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["joi",{"_index":204,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.number().required",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":262,"title":{},"body":{"modules/AppModule.html":{}}}],["joincolumn",{"_index":519,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["jointable",{"_index":732,"title":{},"body":{"entities/User.html":{}}}],["js",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["js/react",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["jwt_expiration_time",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_secret",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtconstants",{"_index":290,"title":{},"body":{"guards/AuthGuard.html":{},"modules/SecurityModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":318,"title":{},"body":{"guards/AuthGuard.html":{},"modules/SecurityModule.html":{}}}],["jwtmodule",{"_index":636,"title":{},"body":{"modules/SecurityModule.html":{}}}],["jwtmodule.register",{"_index":642,"title":{},"body":{"modules/SecurityModule.html":{}}}],["jwtservice",{"_index":276,"title":{},"body":{"guards/AuthGuard.html":{},"guards/VaultGuard.html":{}}}],["k",{"_index":403,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["kafka",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["kafka_client_id",{"_index":257,"title":{},"body":{"modules/AppModule.html":{}}}],["kafka_host",{"_index":256,"title":{},"body":{"modules/AppModule.html":{}}}],["kafkajs",{"_index":924,"title":{},"body":{"dependencies.html":{}}}],["key",{"_index":392,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["lastname",{"_index":585,"title":{},"body":{"classes/RegisterDto.html":{},"entities/User.html":{}}}],["length",{"_index":613,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["libs/.../microservice.ts",{"_index":978,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../nodemailer.ts",{"_index":979,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../swagger.ts",{"_index":980,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/configuration/src/configuration.module.ts",{"_index":379,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["libs/configuration/src/configuration.service.ts",{"_index":381,"title":{},"body":{"injectables/ConfigurationService.html":{},"coverage.html":{}}}],["libs/configuration/src/configuration.service.ts:10",{"_index":391,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["libs/configuration/src/configuration.service.ts:14",{"_index":402,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["libs/configuration/src/configuration.service.ts:18",{"_index":399,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["libs/configuration/src/configuration.service.ts:22",{"_index":395,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["libs/configuration/src/configuration.service.ts:4",{"_index":388,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["libs/configuration/src/function/microservice.ts",{"_index":830,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/configuration/src/function/nodemailer.ts",{"_index":832,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/configuration/src/function/swagger.ts",{"_index":834,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/database/src/database.module.ts",{"_index":421,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["license",{"_index":1004,"title":{},"body":{"properties.html":{}}}],["literal",{"_index":386,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["load",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["loader",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["local",{"_index":483,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/SecurityModule.html":{},"dependencies.html":{}}}],["localstrategy",{"_index":470,"title":{"injectables/LocalStrategy.html":{}},"body":{"injectables/LocalStrategy.html":{},"modules/SecurityModule.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":13,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/SecurityService.html":{},"injectables/VaultService.html":{}}}],["login(@body",{"_index":94,"title":{},"body":{"controllers/AccountsController.html":{}}}],["login(login",{"_index":657,"title":{},"body":{"injectables/SecurityService.html":{}}}],["login(undefined",{"_index":29,"title":{},"body":{"controllers/AccountsController.html":{}}}],["login(username",{"_index":764,"title":{},"body":{"injectables/VaultService.html":{}}}],["login.password",{"_index":683,"title":{},"body":{"injectables/SecurityService.html":{}}}],["logindto",{"_index":489,"title":{"classes/LoginDto.html":{}},"body":{"classes/LoginDto.html":{},"injectables/SecurityService.html":{},"coverage.html":{}}}],["logout",{"_index":649,"title":{},"body":{"injectables/SecurityService.html":{}}}],["manage",{"_index":972,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["management",{"_index":75,"title":{},"body":{"controllers/AccountsController.html":{}}}],["manager",{"_index":881,"title":{},"body":{"dependencies.html":{}}}],["manytomany",{"_index":733,"title":{},"body":{"entities/User.html":{}}}],["manytomany(undefined",{"_index":725,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":520,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":502,"title":{},"body":{"entities/Post.html":{}}}],["matching",{"_index":103,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":606,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["mdx",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["metadata",{"_index":956,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"controllers/ImagesController.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{},"controllers/VideosController.html":{}}}],["microservices",{"_index":831,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["minlength",{"_index":594,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minlength(16",{"_index":597,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minlength(3",{"_index":595,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minlength(8",{"_index":596,"title":{},"body":{"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":967,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":104,"title":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/ImagesModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/ImagesModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":106,"title":{"modules.html":{}},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/ImagesModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{},"modules.html":{},"overview.html":{}}}],["mqtt",{"_index":258,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["mqtt_host",{"_index":259,"title":{},"body":{"modules/AppModule.html":{}}}],["name",{"_index":40,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/LocalStrategy.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"entities/User.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{},"miscellaneous/functions.html":{}}}],["nestjs/axios",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["nestjs/bull",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":58,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":206,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/cqrs",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["nestjs/event",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":288,"title":{},"body":{"guards/AuthGuard.html":{},"modules/SecurityModule.html":{},"guards/VaultGuard.html":{},"dependencies.html":{}}}],["nestjs/microservices",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":480,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/SecurityModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":65,"title":{},"body":{"controllers/AccountsController.html":{},"entities/Address.html":{},"entities/Billing.html":{},"controllers/ImagesController.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"classes/TokenDto.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":873,"title":{},"body":{"dependencies.html":{}}}],["nestjs/throttler",{"_index":875,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":124,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/RolesModule.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":878,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":49,"title":{},"body":{"controllers/AccountsController.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/SecurityService.html":{},"controllers/VideosController.html":{},"coverage.html":{}}}],["node",{"_index":770,"title":{},"body":{"injectables/VaultService.html":{},"dependencies.html":{}}}],["node_port",{"_index":240,"title":{},"body":{"modules/AppModule.html":{}}}],["nodemailer",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["npm",{"_index":987,"title":{},"body":{"index.html":{}}}],["null",{"_index":673,"title":{},"body":{"injectables/SecurityService.html":{}}}],["number",{"_index":178,"title":{},"body":{"entities/Address.html":{},"injectables/ConfigurationService.html":{},"classes/TokenDto.html":{}}}],["number(this.get(key",{"_index":406,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["nxie",{"_index":986,"title":{},"body":{"index.html":{}}}],["object",{"_index":311,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":754,"title":{},"body":{"guards/VaultGuard.html":{}}}],["onetomany",{"_index":734,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":719,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":186,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Profile.html":{},"entities/User.html":{}}}],["onetoone(undefined",{"_index":182,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Profile.html":{},"entities/User.html":{}}}],["only]'})@apiresponse({status",{"_index":22,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["openai",{"_index":935,"title":{},"body":{"dependencies.html":{}}}],["optional",{"_index":41,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"entities/User.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":117,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/ImagesModule.html":{},"modules/PostsModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{},"overview.html":{}}}],["ovenlivekit",{"_index":937,"title":{},"body":{"dependencies.html":{}}}],["ovenplayer",{"_index":939,"title":{},"body":{"dependencies.html":{}}}],["overview",{"_index":996,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":838,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":39,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{},"miscellaneous/functions.html":{}}}],["parser",{"_index":900,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":697,"title":{},"body":{"classes/UpdatePostsDto.html":{}}}],["partialtype(createpostsdto",{"_index":699,"title":{},"body":{"classes/UpdatePostsDto.html":{}}}],["passport",{"_index":482,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":635,"title":{},"body":{"modules/SecurityModule.html":{}}}],["passportmodule.register",{"_index":640,"title":{},"body":{"modules/SecurityModule.html":{}}}],["passportstrategy",{"_index":479,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":486,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["password",{"_index":95,"title":{},"body":{"controllers/AccountsController.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/SecurityService.html":{},"entities/User.html":{},"injectables/VaultService.html":{}}}],["path",{"_index":213,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":310,"title":{},"body":{"guards/AuthGuard.html":{}}}],["permissions",{"_index":611,"title":{},"body":{"entities/Role.html":{}}}],["pg",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["port",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["post",{"_index":56,"title":{"entities/Post.html":{}},"body":{"controllers/AccountsController.html":{},"injectables/CaslAbilityFactory.html":{},"controllers/ImagesController.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"coverage.html":{}}}],["post'})@apiresponse({status",{"_index":531,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('image:upload",{"_index":462,"title":{},"body":{"controllers/ImagesController.html":{}}}],["post('login",{"_index":93,"title":{},"body":{"controllers/AccountsController.html":{}}}],["post('post:create",{"_index":546,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('register",{"_index":88,"title":{},"body":{"controllers/AccountsController.html":{}}}],["post('video:create",{"_index":796,"title":{},"body":{"controllers/VideosController.html":{}}}],["post('video:upload",{"_index":799,"title":{},"body":{"controllers/VideosController.html":{}}}],["post.authorid",{"_index":720,"title":{},"body":{"entities/User.html":{}}}],["postcode",{"_index":170,"title":{},"body":{"entities/Address.html":{}}}],["postgres",{"_index":426,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["posts",{"_index":545,"title":{},"body":{"controllers/PostsController.html":{},"entities/User.html":{}}}],["posts.controller",{"_index":555,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":543,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/entities/post.entity",{"_index":741,"title":{},"body":{"entities/User.html":{}}}],["posts/posts.module",{"_index":131,"title":{},"body":{"modules/AccountsModule.html":{}}}],["postscontroller",{"_index":529,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":113,"title":{"modules/PostsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":563,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":542,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["primarycolumn",{"_index":187,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Post.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["primarycolumn('uuid",{"_index":510,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["primarycolumn()@apiproperty",{"_index":179,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Profile.html":{}}}],["prism",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["private",{"_index":82,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/ConfigurationService.html":{},"injectables/PostsService.html":{},"injectables/VaultService.html":{}}}],["profile",{"_index":14,"title":{"entities/Profile.html":{}},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Profile.html":{},"entities/User.html":{},"coverage.html":{}}}],["profile'})@apiresponse({status",{"_index":45,"title":{},"body":{"controllers/AccountsController.html":{}}}],["profile.entity",{"_index":735,"title":{},"body":{"entities/User.html":{}}}],["profile.user",{"_index":743,"title":{},"body":{"entities/User.html":{}}}],["profile.user)@joincolumn({name",{"_index":722,"title":{},"body":{"entities/User.html":{}}}],["profile_id",{"_index":744,"title":{},"body":{"entities/User.html":{}}}],["profile_id'})@apiproperty",{"_index":723,"title":{},"body":{"entities/User.html":{}}}],["promise",{"_index":42,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SecurityService.html":{},"guards/VaultGuard.html":{}}}],["promise.resolve(undefined",{"_index":162,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/PostsService.html":{},"injectables/SecurityService.html":{}}}],["properties",{"_index":166,"title":{"properties.html":{}},"body":{"entities/Address.html":{},"entities/Billing.html":{},"classes/CreatePostsDto.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"injectables/VaultService.html":{},"properties.html":{}}}],["propertyno",{"_index":171,"title":{},"body":{"entities/Address.html":{}}}],["provide",{"_index":268,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":119,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/ImagesModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{}}}],["public",{"_index":66,"title":{},"body":{"controllers/AccountsController.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@apiresponse({status",{"_index":30,"title":{},"body":{"controllers/AccountsController.html":{}}}],["put",{"_index":57,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["put('image:update",{"_index":461,"title":{},"body":{"controllers/ImagesController.html":{}}}],["put('post:update",{"_index":548,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('update",{"_index":99,"title":{},"body":{"controllers/AccountsController.html":{}}}],["put('video:update",{"_index":798,"title":{},"body":{"controllers/VideosController.html":{}}}],["rabbitmq",{"_index":250,"title":{},"body":{"modules/AppModule.html":{}}}],["rabbitmq_host",{"_index":251,"title":{},"body":{"modules/AppModule.html":{}}}],["rabbitmq_password",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["rabbitmq_queue",{"_index":252,"title":{},"body":{"modules/AppModule.html":{}}}],["rabbitmq_username",{"_index":253,"title":{},"body":{"modules/AppModule.html":{}}}],["react",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["read",{"_index":356,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{},"miscellaneous/enumerations.html":{}}}],["readonly",{"_index":83,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"controllers/ImagesController.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{},"controllers/VideosController.html":{}}}],["record",{"_index":32,"title":{},"body":{"controllers/AccountsController.html":{}}}],["redis",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_host",{"_index":242,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_password",{"_index":244,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_port",{"_index":243,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_username",{"_index":245,"title":{},"body":{"modules/AppModule.html":{}}}],["reflect",{"_index":955,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":277,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":650,"title":{},"body":{"injectables/SecurityService.html":{}}}],["refreshtoken",{"_index":688,"title":{},"body":{"classes/TokenDto.html":{}}}],["register",{"_index":15,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/SecurityService.html":{},"injectables/VaultService.html":{}}}],["register(@body",{"_index":89,"title":{},"body":{"controllers/AccountsController.html":{}}}],["register(register",{"_index":661,"title":{},"body":{"injectables/SecurityService.html":{}}}],["register(undefined",{"_index":48,"title":{},"body":{"controllers/AccountsController.html":{}}}],["register(username",{"_index":766,"title":{},"body":{"injectables/VaultService.html":{}}}],["register.email",{"_index":680,"title":{},"body":{"injectables/SecurityService.html":{}}}],["register.username",{"_index":678,"title":{},"body":{"injectables/SecurityService.html":{}}}],["registerdto",{"_index":582,"title":{"classes/RegisterDto.html":{}},"body":{"classes/RegisterDto.html":{},"injectables/SecurityService.html":{},"coverage.html":{}}}],["registration",{"_index":77,"title":{},"body":{"controllers/AccountsController.html":{}}}],["render",{"_index":195,"title":{},"body":{"controllers/AppController.html":{}}}],["renderer",{"_index":952,"title":{},"body":{"dependencies.html":{}}}],["renderpath",{"_index":264,"title":{},"body":{"modules/AppModule.html":{}}}],["repository",{"_index":142,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/PostsService.html":{}}}],["request",{"_index":284,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/RequestWithUser.html":{},"guards/VaultGuard.html":{}}}],["request.headers.authorization.split",{"_index":756,"title":{},"body":{"guards/VaultGuard.html":{}}}],["request.headers.authorization?.split",{"_index":320,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request.user",{"_index":758,"title":{},"body":{"guards/VaultGuard.html":{}}}],["request['user",{"_index":315,"title":{},"body":{"guards/AuthGuard.html":{}}}],["requestwithuser",{"_index":599,"title":{"interfaces/RequestWithUser.html":{}},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["require('chalk",{"_index":1014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('dotenv').config",{"_index":1018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requiredroles",{"_index":621,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":623,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":116,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/ImagesModule.html":{},"modules/PostsModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{},"overview.html":{}}}],["resetpassword",{"_index":651,"title":{},"body":{"injectables/SecurityService.html":{}}}],["result",{"_index":672,"title":{},"body":{"injectables/SecurityService.html":{}}}],["results",{"_index":102,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":96,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{}}}],["returns",{"_index":28,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"controllers/ImagesController.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{},"controllers/VideosController.html":{}}}],["rimraf",{"_index":958,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":70,"title":{"entities/Role.html":{}},"body":{"controllers/AccountsController.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["roles",{"_index":68,"title":{},"body":{"controllers/AccountsController.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":100,"title":{},"body":{"controllers/AccountsController.html":{}}}],["roles(role.admin)@apioperation({summary",{"_index":19,"title":{},"body":{"controllers/AccountsController.html":{}}}],["roles(role.user",{"_index":98,"title":{},"body":{"controllers/AccountsController.html":{}}}],["roles(role.user)@apioperation({summary",{"_index":43,"title":{},"body":{"controllers/AccountsController.html":{}}}],["roles/decorators/roles.decorator",{"_index":620,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles/entities/role.entity",{"_index":618,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles/roles.module",{"_index":638,"title":{},"body":{"modules/SecurityModule.html":{}}}],["roles_key",{"_index":619,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":217,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesmodule",{"_index":625,"title":{"modules/RolesModule.html":{}},"body":{"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"modules.html":{},"overview.html":{}}}],["rootpath",{"_index":261,"title":{},"body":{"modules/AppModule.html":{}}}],["route",{"_index":313,"title":{},"body":{"guards/AuthGuard.html":{}}}],["run",{"_index":988,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":755,"title":{},"body":{"guards/VaultGuard.html":{},"dependencies.html":{}}}],["schema",{"_index":191,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"modules/DatabaseModule.html":{},"entities/Post.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["secret",{"_index":317,"title":{},"body":{"guards/AuthGuard.html":{},"modules/SecurityModule.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":1016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["security.service",{"_index":484,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/SecurityModule.html":{}}}],["security/guards/auth.guard",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["security/guards/roles.guard",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["security/interfaces/auth.interface",{"_index":67,"title":{},"body":{"controllers/AccountsController.html":{}}}],["security/roles/decorators/roles.decorator",{"_index":69,"title":{},"body":{"controllers/AccountsController.html":{}}}],["security/roles/entities/role.entity",{"_index":740,"title":{},"body":{"entities/User.html":{}}}],["security/roles/enum/role.enum",{"_index":71,"title":{},"body":{"controllers/AccountsController.html":{}}}],["security/security.module",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["security/vault/vault.service",{"_index":73,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{}}}],["securitymodule",{"_index":200,"title":{"modules/SecurityModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SecurityModule.html":{},"modules.html":{},"overview.html":{}}}],["securityservice",{"_index":474,"title":{"injectables/SecurityService.html":{}},"body":{"injectables/LocalStrategy.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"coverage.html":{},"overview.html":{}}}],["see",{"_index":301,"title":{},"body":{"guards/AuthGuard.html":{}}}],["separator",{"_index":394,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["servestaticmodule",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":260,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticoptions",{"_index":265,"title":{},"body":{"modules/AppModule.html":{}}}],["session",{"_index":915,"title":{},"body":{"dependencies.html":{}}}],["setmetadata(is_public_key",{"_index":1015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":1017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setupnodemailer",{"_index":833,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswagger",{"_index":835,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswagger(app",{"_index":981,"title":{},"body":{"miscellaneous/functions.html":{}}}],["signoptions",{"_index":644,"title":{},"body":{"modules/SecurityModule.html":{}}}],["social",{"_index":525,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{},"entities/User.html":{}}}],["socket.io",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["soft",{"_index":447,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["softdelete",{"_index":439,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["sortcode",{"_index":326,"title":{},"body":{"entities/Billing.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{}}}],["sqlite3",{"_index":961,"title":{},"body":{"dependencies.html":{}}}],["started",{"_index":985,"title":{"index.html":{}},"body":{}}],["statements",{"_index":809,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":211,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["status",{"_index":84,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["strategies/local.strategy",{"_index":637,"title":{},"body":{"modules/SecurityModule.html":{}}}],["strategy",{"_index":481,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["street",{"_index":172,"title":{},"body":{"entities/Address.html":{}}}],["string",{"_index":151,"title":{},"body":{"injectables/AccountsService.html":{},"entities/Address.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"injectables/VaultService.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":368,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["subjects",{"_index":351,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["successfully",{"_index":33,"title":{},"body":{"controllers/AccountsController.html":{}}}],["summary",{"_index":86,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["super",{"_index":487,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["support",{"_index":991,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":992,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":434,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["table",{"_index":837,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":836,"title":{},"body":{"coverage.html":{}}}],["this.authservice.validateuser(username",{"_index":488,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.client",{"_index":771,"title":{},"body":{"injectables/VaultService.html":{}}}],["this.defaults[key",{"_index":405,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["this.env[key",{"_index":404,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["this.extracttokenfromheader(request",{"_index":305,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.get(key",{"_index":407,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["this.get(key).split(separator",{"_index":408,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["this.id",{"_index":527,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["this.jwtservice.verify(token",{"_index":759,"title":{},"body":{"guards/VaultGuard.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":316,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.postsrepository.find",{"_index":570,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":298,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":622,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.userrepository.findone",{"_index":160,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.userrepository.save(user",{"_index":161,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.userservice.create(user",{"_index":681,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.userservice.findone(login.username",{"_index":682,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.userservice.findone(username",{"_index":670,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.vaultservice.login(username",{"_index":97,"title":{},"body":{"controllers/AccountsController.html":{}}}],["this.vaultservice.register(username",{"_index":92,"title":{},"body":{"controllers/AccountsController.html":{}}}],["throw",{"_index":306,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["title",{"_index":413,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{}}}],["token",{"_index":304,"title":{},"body":{"guards/AuthGuard.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{}}}],["tokendto",{"_index":684,"title":{"classes/TokenDto.html":{}},"body":{"classes/TokenDto.html":{},"coverage.html":{}}}],["tokenpayload",{"_index":692,"title":{"interfaces/TokenPayload.html":{}},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["transformer",{"_index":739,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["true",{"_index":222,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"modules/DatabaseModule.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/SecurityModule.html":{},"entities/User.html":{},"guards/VaultGuard.html":{},"miscellaneous/variables.html":{}}}],["true})@jointable({name",{"_index":727,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":307,"title":{},"body":{"guards/AuthGuard.html":{},"guards/VaultGuard.html":{}}}],["twitter",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":144,"title":{},"body":{"injectables/AccountsService.html":{},"entities/Address.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"guards/VaultGuard.html":{},"injectables/VaultService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1006,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":158,"title":{},"body":{"injectables/AccountsService.html":{},"entities/Address.html":{},"entities/Billing.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":123,"title":{},"body":{"modules/AccountsModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":557,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":628,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":134,"title":{},"body":{"modules/AccountsModule.html":{}}}],["typeormmodule.forrootasync",{"_index":423,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":369,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["unauthorizedexception",{"_index":287,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":286,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/ConfigurationService.html":{}}}],["unique",{"_index":512,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["unity",{"_index":964,"title":{},"body":{"dependencies.html":{}}}],["unknown",{"_index":148,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/PostsService.html":{},"injectables/SecurityService.html":{}}}],["unlicensed",{"_index":1005,"title":{},"body":{"properties.html":{}}}],["update",{"_index":16,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/VideosController.html":{},"miscellaneous/enumerations.html":{}}}],["updatedat",{"_index":501,"title":{},"body":{"entities/Post.html":{}}}],["updatepostsdto",{"_index":695,"title":{"classes/UpdatePostsDto.html":{}},"body":{"classes/UpdatePostsDto.html":{},"coverage.html":{}}}],["upload",{"_index":440,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/VideosController.html":{}}}],["useclass",{"_index":269,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":425,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["user",{"_index":35,"title":{"entities/User.html":{}},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/LocalStrategy.html":{},"entities/Post.html":{},"entities/Profile.html":{},"interfaces/RequestWithUser.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user.address",{"_index":192,"title":{},"body":{"entities/Address.html":{}}}],["user.address)@apiproperty",{"_index":183,"title":{},"body":{"entities/Address.html":{}}}],["user.billing",{"_index":334,"title":{},"body":{"entities/Billing.html":{}}}],["user.billing)@apiproperty",{"_index":331,"title":{},"body":{"entities/Billing.html":{}}}],["user.email",{"_index":679,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.entity",{"_index":189,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Profile.html":{}}}],["user.id",{"_index":362,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["user.isadmin",{"_index":354,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["user.password",{"_index":671,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.posts",{"_index":528,"title":{},"body":{"entities/Post.html":{}}}],["user.posts)@joincolumn({name",{"_index":503,"title":{},"body":{"entities/Post.html":{}}}],["user.profile",{"_index":581,"title":{},"body":{"entities/Profile.html":{}}}],["user.profile)@apiproperty",{"_index":578,"title":{},"body":{"entities/Profile.html":{}}}],["user.roles?.includes(role",{"_index":624,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.username",{"_index":677,"title":{},"body":{"injectables/SecurityService.html":{}}}],["userid",{"_index":694,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["username",{"_index":90,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/SecurityService.html":{},"entities/User.html":{},"injectables/VaultService.html":{}}}],["userrepository",{"_index":145,"title":{},"body":{"injectables/AccountsService.html":{}}}],["users_roles",{"_index":728,"title":{},"body":{"entities/User.html":{}}}],["userservice",{"_index":655,"title":{},"body":{"injectables/SecurityService.html":{}}}],["uuid",{"_index":522,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["v1",{"_index":773,"title":{},"body":{"injectables/VaultService.html":{}}}],["v4",{"_index":521,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["validate",{"_index":472,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(username",{"_index":477,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateuser",{"_index":652,"title":{},"body":{"injectables/SecurityService.html":{}}}],["validateuser(username",{"_index":664,"title":{},"body":{"injectables/SecurityService.html":{}}}],["validation",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["validationschema",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":420,"title":{},"body":{"classes/CreatePostsDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["value",{"_index":397,"title":{},"body":{"injectables/ConfigurationService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":817,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1009,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vault",{"_index":769,"title":{},"body":{"injectables/VaultService.html":{},"dependencies.html":{}}}],["vault.client",{"_index":768,"title":{},"body":{"injectables/VaultService.html":{}}}],["vaultguard",{"_index":750,"title":{"guards/VaultGuard.html":{}},"body":{"guards/VaultGuard.html":{},"coverage.html":{}}}],["vaultservice",{"_index":72,"title":{"injectables/VaultService.html":{}},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/VaultService.html":{},"coverage.html":{},"overview.html":{}}}],["verified",{"_index":702,"title":{},"body":{"entities/User.html":{}}}],["version",{"_index":1002,"title":{},"body":{"properties.html":{}}}],["video",{"_index":782,"title":{},"body":{"controllers/VideosController.html":{}}}],["video'})@apiresponse({status",{"_index":779,"title":{},"body":{"controllers/VideosController.html":{}}}],["videos.controller",{"_index":805,"title":{},"body":{"modules/VideosModule.html":{}}}],["videos.service",{"_index":794,"title":{},"body":{"controllers/VideosController.html":{},"modules/VideosModule.html":{}}}],["videos/videos.module",{"_index":133,"title":{},"body":{"modules/AccountsModule.html":{}}}],["videoscontroller",{"_index":776,"title":{"controllers/VideosController.html":{}},"body":{"controllers/VideosController.html":{},"modules/VideosModule.html":{},"coverage.html":{}}}],["videosmodule",{"_index":114,"title":{"modules/VideosModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/VideosModule.html":{},"modules.html":{},"overview.html":{}}}],["videosservice",{"_index":793,"title":{"injectables/VideosService.html":{}},"body":{"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"coverage.html":{},"overview.html":{}}}],["view",{"_index":441,"title":{},"body":{"controllers/ImagesController.html":{}}}],["watch",{"_index":778,"title":{},"body":{"controllers/VideosController.html":{}}}],["we're",{"_index":308,"title":{},"body":{"guards/AuthGuard.html":{}}}],["web/www",{"_index":263,"title":{},"body":{"modules/AppModule.html":{}}}],["webgl",{"_index":965,"title":{},"body":{"dependencies.html":{}}}],["write",{"_index":357,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["zoom",{"_index":115,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/ImagesModule.html":{},"modules/PostsModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AccountsController.html":{"url":"controllers/AccountsController.html","title":"controller - AccountsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AccountsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/accounts/accounts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                accounts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                profile\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Admin)@ApiOperation({summary: 'Delete Account Profile [Admin Only]'})@ApiResponse({status: 403, description: 'Forbidden.'})@Delete('delete')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(undefined)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@ApiResponse({status: 200, description: 'The record has been successfully created.'})@ApiOperation({summary: 'Login User Account.'})@ApiResponse({status: 403, description: 'Forbidden.'})@Post('login')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    profile()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.User)@ApiOperation({summary: 'Access Account Profile'})@ApiResponse({status: 403, description: 'Forbidden.'})@Get()\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(undefined)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@ApiResponse({status: 200, description: 'The record has been successfully created.'})@ApiOperation({summary: 'Register A New Account.'})@ApiResponse({status: 403, description: 'Forbidden.'})@Post('register')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.User)@ApiOperation({summary: 'Update Account Profile'})@ApiResponse({status: 403, description: 'Forbidden.'})@Put('update')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Post, Put } from '@nestjs/common';\nimport { AccountsService } from './accounts.service';\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { Public } from '../../security/interfaces/auth.interface';\nimport { Roles } from '../../security/roles/decorators/roles.decorator';\nimport { Role } from '../../security/roles/enum/role.enum';\nimport { VaultService } from '../../security/vault/vault.service';\n\n@ApiTags('Account Management: Basic Account Registration & Login')\n@Controller('accounts')\nexport class AccountsController {\n  constructor(\n    private readonly accountsService: AccountsService,\n    private readonly vaultService: VaultService,\n  ) {}\n\n  // ACCOUNT REGISTRATION & LOGIN\n  @Public()\n  @ApiResponse({\n    status: 200,\n    description: 'The record has been successfully created.',\n  })\n  @ApiOperation({ summary: 'Register A New Account.' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Post('register')\n  async register(@Body() { username }): Promise {\n    await this.vaultService.register(username);\n  }\n\n  @Public()\n  @ApiResponse({\n    status: 200,\n    description: 'The record has been successfully created.',\n  })\n  @ApiOperation({ summary: 'Login User Account.' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Post('login')\n  async login(@Body() { username, password }): Promise {\n    return this.vaultService.login(username, password);\n  }\n\n  // ACCOUNT MANAGEMENT\n  @Roles(Role.User)\n  @ApiOperation({ summary: 'Access Account Profile' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Get()\n  async profile() {}\n\n  @Roles(Role.User)\n  @ApiOperation({ summary: 'Update Account Profile' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Put('update')\n  async update() {}\n\n  @Roles(Role.Admin)\n  @ApiOperation({ summary: 'Delete Account Profile [Admin Only]' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Delete('delete')\n  async delete() {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AccountsModule.html":{"url":"modules/AccountsModule.html","title":"module - AccountsModule","body":"\n                   \n\n\n\n\n    Modules\n    AccountsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_imports\n\n\n\ncluster_AccountsModule_providers\n\n\n\n\nImagesModule\n\nImagesModule\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nImagesModule->AccountsModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAccountsModule -->\n\nPostsModule->AccountsModule\n\n\n\nAccountsModule -->\n\nPostsModule->AccountsModule\n\n\n\n\n\nVideosModule\n\nVideosModule\n\nAccountsModule -->\n\nVideosModule->AccountsModule\n\n\n\n\n\nAccountsService \n\nAccountsService \n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\nVaultService\n\nVaultService\n\nAccountsModule -->\n\nVaultService->AccountsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/api/accounts/accounts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountsService\n                        \n                        \n                            VaultService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AccountsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ImagesModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            VideosModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AccountsService } from './accounts.service';\nimport { AccountsController } from './accounts.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { Profile } from './entities/profile.entity';\nimport { Billing } from './entities/billing.entity';\nimport { Address } from './entities/address.entity';\nimport { PostsModule } from '../posts/posts.module';\nimport { ImagesModule } from '../images/images.module';\nimport { VideosModule } from '../videos/videos.module';\nimport { VaultService } from '../../security/vault/vault.service';\n\n@Module({\n  controllers: [AccountsController],\n  providers: [AccountsService, VaultService],\n  imports: [\n    TypeOrmModule.forFeature([User, Profile, Billing, Address]),\n    PostsModule,\n    ImagesModule,\n    PostsModule,\n    VideosModule,\n  ],\n  exports: [AccountsService],\n})\nexport class AccountsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountsService.html":{"url":"injectables/AccountsService.html","title":"injectable - AccountsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/accounts/accounts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                profile\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/api/accounts/accounts.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(username: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    profile()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class AccountsService {\n  constructor(\n    @InjectRepository(User) private userRepository: Repository,\n  ) {}\n\n  async findOne(username: string, email: string): Promise {\n    return this.userRepository.findOne({\n      where: [{ username }, { email }],\n    });\n  }\n\n  async create(user: User) {\n    return this.userRepository.save(user);\n  }\n\n  async profile() {\n    return Promise.resolve(undefined);\n  }\n\n  async update() {\n    return Promise.resolve(undefined);\n  }\n\n  async delete() {\n    return Promise.resolve(undefined);\n  }\n\n  async getAll() {\n    return Promise.resolve(undefined);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Address.html":{"url":"entities/Address.html","title":"entity - Address","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/accounts/entities/address.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                            \n                                country\n                            \n                            \n                                county\n                            \n                            \n                                postcode\n                            \n                            \n                                propertyNo\n                            \n                            \n                                street\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        county\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postcode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        propertyNo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        street\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.address)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToOne, PrimaryColumn } from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { User } from './user.entity';\n\n@Entity('address', { schema: 'accounts' })\nexport class Address {\n  @PrimaryColumn()\n  @ApiProperty()\n  propertyNo: number;\n  @Column()\n  @ApiProperty()\n  street: string;\n  @Column()\n  @ApiProperty()\n  city: string;\n  @Column()\n  @ApiProperty()\n  county: string;\n  @Column()\n  @ApiProperty()\n  country: string;\n  @Column()\n  @ApiProperty()\n  postcode: string;\n\n  @OneToOne(() => User, (user) => user.address)\n  @ApiProperty()\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get, Render } from '@nestjs/common';\n\n@Controller('')\nexport class AppController {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAccountsModule\n\nAccountsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAccountsModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nSecurityModule\n\nSecurityModule\n\nAppModule -->\n\nSecurityModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AccountsModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            SecurityModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport * as Joi from 'joi';\nimport { APP_GUARD } from '@nestjs/core';\nimport { DatabaseModule } from '@database/database';\nimport { AppController } from './app.controller';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { SecurityModule } from './security/security.module';\nimport { AuthGuard } from './security/guards/auth.guard';\nimport { RolesGuard } from './security/guards/roles.guard';\nimport { AccountsModule } from './api/accounts/accounts.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [],\n      validationSchema: Joi.object({\n        // DATABASE VALIDATION\n        DATABASE_HOST: Joi.string().required(),\n        DATABASE_PORT: Joi.number().required(),\n        DATABASE_USER: Joi.string().required(),\n        DATABASE_PASSWORD: Joi.string().required(),\n        DATABASE_NAME: Joi.string().required(),\n        DATABASE_SCHEMA: Joi.string().required(),\n        // JWT VALIDATION\n        JWT_SECRET: Joi.string().required(),\n        JWT_EXPIRATION_TIME: Joi.string().required(),\n        // PORT VALIDATION\n        NODE_PORT: Joi.number().required(),\n        // REDIS VALIDATION\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PORT: Joi.number().required(),\n        REDIS_PASSWORD: Joi.string().required(),\n        REDIS_USERNAME: Joi.string().required(),\n        // GRPC VALIDATION\n        GRPC_HOST: Joi.string().required(),\n        GRPC_PACKAGE: Joi.string().required(),\n        GRPC_PROTO_PATH: Joi.string().required(),\n        // RABBITMQ VALIDATION\n        RABBITMQ_HOST: Joi.string().required(),\n        RABBITMQ_QUEUE: Joi.string().required(),\n        RABBITMQ_USERNAME: Joi.string().required(),\n        RABBITMQ_PASSWORD: Joi.string().required(),\n        // KAFKA VALIDATION\n        KAFKA_HOST: Joi.string().required(),\n        KAFKA_CLIENT_ID: Joi.string().required(),\n        // MQTT VALIDATION\n        MQTT_HOST: Joi.string().required(),\n      }),\n    }),\n    DatabaseModule,\n    SecurityModule,\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'web/www'),\n      renderPath: '/',\n      serveStaticOptions: {\n        extensions: ['ejs'],\n      },\n    }),\n    AccountsModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: AuthGuard,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/api/src/security/guards/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/security/guards/auth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/guards/auth.guard.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                    \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/guards/auth.guard.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport { Reflector } from '@nestjs/core';\nimport { jwtConstants } from '../constants';\nimport { IS_PUBLIC_KEY } from '../interfaces/auth.interface';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private jwtService: JwtService, private reflector: Reflector) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      // 💡 See this condition\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      // 💡 We're assigning the payload to the request object here\n      // so that we can access it in our route handlers\n      request['user'] = await this.jwtService.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Billing.html":{"url":"entities/Billing.html","title":"entity - Billing","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Billing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/accounts/entities/billing.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accountName\n                            \n                            \n                                accountNumber\n                            \n                            \n                                accountType\n                            \n                            \n                                sortCode\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accountName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/billing.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        accountNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/billing.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        accountType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/billing.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sortCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/billing.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.billing)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/billing.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToOne, PrimaryColumn } from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { User } from './user.entity';\n\n@Entity('billing', { schema: 'accounts' })\nexport class Billing {\n  @PrimaryColumn()\n  @ApiProperty()\n  accountName: string;\n  @Column()\n  @ApiProperty()\n  accountType: string;\n  @Column()\n  @ApiProperty()\n  accountNumber: string;\n  @Column()\n  @ApiProperty()\n  sortCode: string;\n\n  @OneToOne(() => User, (user) => user.billing)\n  @ApiProperty()\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslAbilityFactory.html":{"url":"injectables/CaslAbilityFactory.html","title":"injectable - CaslAbilityFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaslAbilityFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/roles/casl/casl-ability.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/roles/casl/casl-ability.factory.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Action } from '../enum/action.enum';\nimport { User } from '../../../api/accounts/entities/user.entity';\nimport { Post } from '../../../api/posts/entities/post.entity';\n\ntype Subjects = InferSubjects | 'all';\n\nexport type AppAbility = Ability;\n\n@Injectable()\nexport class CaslAbilityFactory {\n  createForUser(user: User) {\n    const { can, cannot, build } = new AbilityBuilder\n    >(Ability as AbilityClass);\n\n    if (user.isAdmin) {\n      can(Action.Manage, 'all'); // read-write access to everything\n    } else {\n      can(Action.Read, 'all'); // read-only access to everything\n    }\n\n    can(Action.Update, Post, { authorId: user.id });\n    cannot(Action.Delete, Post, { isPublished: true });\n\n    return build({\n      // Read https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types for details\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigurationModule.html":{"url":"modules/ConfigurationModule.html","title":"module - ConfigurationModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigurationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConfigurationModule\n\n\n\ncluster_ConfigurationModule_exports\n\n\n\ncluster_ConfigurationModule_providers\n\n\n\n\nConfigurationService \n\nConfigurationService \n\n\n\nConfigurationModule\n\nConfigurationModule\n\nConfigurationService  -->\n\nConfigurationModule->ConfigurationService \n\n\n\n\n\nConfigurationService\n\nConfigurationService\n\nConfigurationModule -->\n\nConfigurationService->ConfigurationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/configuration/src/configuration.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConfigurationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ConfigurationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigurationService } from './configuration.service';\n\n@Module({\n  providers: [ConfigurationService],\n  exports: [ConfigurationService],\n})\nexport class ConfigurationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigurationService.html":{"url":"injectables/ConfigurationService.html","title":"injectable - ConfigurationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConfigurationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/configuration/src/configuration.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                getArray\n                            \n                            \n                                getBoolean\n                            \n                            \n                                getNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(env: literal type, defaults: literal type)\n                    \n                \n                        \n                            \n                                Defined in libs/configuration/src/configuration.service.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        env\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaults\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/configuration/src/configuration.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getArray\n                        \n                    \n                \n            \n            \n                \ngetArray(key: string, separator: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/configuration/src/configuration.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    separator\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ','\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBoolean\n                        \n                    \n                \n            \n            \n                \ngetBoolean(key: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/configuration/src/configuration.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNumber\n                        \n                    \n                \n            \n            \n                \ngetNumber(key: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/configuration/src/configuration.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ConfigurationService {\n  constructor(\n    private readonly env: { [k: string]: string | undefined },\n    private readonly defaults: { [k: string]: string | undefined } = {},\n  ) {}\n\n  get(key: string): string {\n    return this.env[key] || this.defaults[key];\n  }\n\n  getNumber(key: string): number {\n    return Number(this.get(key));\n  }\n\n  getBoolean(key: string): boolean {\n    return this.get(key) === 'true';\n  }\n\n  getArray(key: string, separator = ','): string[] {\n    return this.get(key).split(separator);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostsDto.html":{"url":"classes/CreatePostsDto.html","title":"class - CreatePostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/posts/dto/createPosts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                author\n                            \n                            \n                                    Readonly\n                                content\n                            \n                            \n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/dto/createPosts.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/dto/createPosts.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/dto/createPosts.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostsDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly content: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly author: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/database/src/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DATABASE_HOST'),\n        port: configService.get('DATABASE_PORT'),\n        username: configService.get('DATABASE_USER'),\n        password: configService.get('DATABASE_PASSWORD'),\n        database: configService.get('DATABASE_NAME'),\n        schema: configService.get('DATABASE_SCHEMA'),\n        entities: [],\n        synchronize: true,\n        autoLoadEntities: true,\n      }),\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ImagesController.html":{"url":"controllers/ImagesController.html","title":"controller - ImagesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ImagesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/images/images.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                accounts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                hardDelete\n                            \n                            \n                                    Async\n                                softDelete\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                upload\n                            \n                            \n                                    Async\n                                view\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hardDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    hardDelete()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: '[Hard] Delete A Image [Admin Only]'})@ApiResponse({status: 403, description: 'Forbidden.'})@Delete('image:delete')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/images/images.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    softDelete()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: '[Soft] Delete A Image'})@ApiResponse({status: 403, description: 'Forbidden.'})@Delete('image:delete:soft')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/images/images.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update A Image'})@ApiResponse({status: 403, description: 'Forbidden.'})@Put('image:update')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/images/images.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                    \n                    upload()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Upload A Image'})@ApiResponse({status: 403, description: 'Forbidden.'})@Post('image:upload')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/images/images.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        view\n                        \n                    \n                \n            \n            \n                \n                    \n                    view()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'View An Image'})@ApiResponse({status: 403, description: 'Forbidden.'})@Get('image:view')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/images/images.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Post, Put } from '@nestjs/common';\nimport { ImagesService } from './images.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Images: View, Update, Upload, Delete')\n@Controller('accounts')\nexport class ImagesController {\n  constructor(private readonly imagesService: ImagesService) {}\n\n  @ApiOperation({ summary: 'View An Image' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Get('image:view')\n  async view() {}\n\n  @ApiOperation({ summary: 'Update A Image' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Put('image:update')\n  async update() {}\n\n  @ApiOperation({ summary: 'Upload A Image' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Post('image:upload')\n  async upload() {}\n\n  @ApiOperation({ summary: '[Soft] Delete A Image' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Delete('image:delete:soft')\n  async softDelete() {}\n\n  @ApiOperation({ summary: '[Hard] Delete A Image [Admin Only]' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Delete('image:delete')\n  async hardDelete() {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ImagesModule.html":{"url":"modules/ImagesModule.html","title":"module - ImagesModule","body":"\n                   \n\n\n\n\n    Modules\n    ImagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ImagesModule\n\n\n\ncluster_ImagesModule_providers\n\n\n\n\nImagesService\n\nImagesService\n\n\n\nImagesModule\n\nImagesModule\n\nImagesModule -->\n\nImagesService->ImagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/api/images/images.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ImagesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ImagesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ImagesService } from './images.service';\nimport { ImagesController } from './images.controller';\n\n@Module({\n  controllers: [ImagesController],\n  providers: [ImagesService]\n})\nexport class ImagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ImagesService.html":{"url":"injectables/ImagesService.html","title":"injectable - ImagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ImagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/images/images.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ImagesService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: SecurityService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/security/strategies/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        SecurityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/strategies/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { SecurityService } from '../security.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: SecurityService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/login.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/login.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/login.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty()\n  username: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/posts/entities/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                authorId\n                            \n                            \n                                content\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                id\n                            \n                            \n                                isPublished\n                            \n                            \n                                title\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts)@JoinColumn({name: 'authorId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid', {name: 'id'})@ApiProperty({description: 'unique identifier'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPublished\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeInsert,\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryColumn,\n} from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { v4 } from 'uuid';\nimport { User } from \"../../accounts/entities/user.entity\";\n\n@Entity('post', { schema: 'social' })\nexport class Post {\n  @BeforeInsert()\n  addId() {\n    this.id = v4();\n  }\n\n  @PrimaryColumn('uuid', { name: 'id' })\n  @ApiProperty({ description: 'unique identifier' })\n  id: string;\n\n  @Column()\n  title: string;\n\n  @Column()\n  content: string;\n\n  @Column()\n  authorId: string;\n\n  @ManyToOne(() => User, (user) => user.posts)\n  @JoinColumn({ name: 'authorId' })\n  author: User;\n\n  @Column()\n  isPublished: boolean;\n\n  @Column()\n  createdAt: Date;\n\n  @Column()\n  updatedAt: Date;\n\n  @Column()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                accounts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                hardDelete\n                            \n                            \n                                    Async\n                                read\n                            \n                            \n                                    Async\n                                softDelete\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create A New Social Post'})@ApiResponse({status: 403, description: 'Forbidden.'})@Post('post:create')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hardDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    hardDelete()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: '[Hard] Delete A Social Post [Admin Only]'})@ApiResponse({status: 403, description: 'Forbidden.'})@Delete('post:delete')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        read\n                        \n                    \n                \n            \n            \n                \n                    \n                    read()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Read A Social Post'})@ApiResponse({status: 403, description: 'Forbidden.'})@Get('post:read')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    softDelete()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: '[Soft] Delete A Social Post'})@ApiResponse({status: 403, description: 'Forbidden.'})@Delete('post:delete:soft')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update A Social Post'})@ApiResponse({status: 403, description: 'Forbidden.'})@Put('post:update')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Post, Put } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Social Posts: Create, Read, Update, Delete')\n@Controller('accounts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @ApiOperation({ summary: 'Create A New Social Post' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Post('post:create')\n  async create() {}\n\n  @ApiOperation({ summary: 'Read A Social Post' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Get('post:read')\n  async read() {}\n\n  @ApiOperation({ summary: 'Update A Social Post' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Put('post:update')\n  async update() {}\n\n  @ApiOperation({ summary: '[Soft] Delete A Social Post' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Delete('post:delete:soft')\n  async softDelete() {}\n\n  @ApiOperation({ summary: '[Hard] Delete A Social Post [Admin Only]' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Delete('post:delete')\n  async hardDelete() {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_exports\n\n\n\n\nPostsService \n\nPostsService \n\n\n\nPostsModule\n\nPostsModule\n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/api/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './entities/post.entity';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [TypeOrmModule.forFeature([Post])],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                getPost\n                            \n                            \n                                    Async\n                                getPosts\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/api/posts/posts.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPost\n                        \n                    \n                \n            \n            \n                \ngetPost()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPosts()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Post } from './entities/post.entity';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    @InjectRepository(Post) private postsRepository: Repository,\n  ) {}\n\n  create() {\n    return Promise.resolve(undefined);\n  }\n\n  update() {\n    return Promise.resolve(undefined);\n  }\n\n  delete() {\n    return Promise.resolve(undefined);\n  }\n\n  getPost() {\n    return Promise.resolve(undefined);\n  }\n\n  async getPosts() {\n    return await this.postsRepository.find();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Profile.html":{"url":"entities/Profile.html","title":"entity - Profile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/accounts/entities/profile.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                cover\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/profile.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/profile.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/profile.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.profile)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/profile.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToOne, PrimaryColumn } from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { User } from './user.entity';\n\n@Entity('profile', { schema: 'accounts' })\nexport class Profile {\n  @PrimaryColumn()\n  @ApiProperty()\n  bio: string;\n  @Column()\n  @ApiProperty()\n  avatar: string;\n  @Column()\n  @ApiProperty()\n  cover: string;\n\n  @OneToOne(() => User, (user) => user.profile)\n  @ApiProperty()\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstname\n                            \n                            \n                                lastname\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(8)@IsEmail()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/register.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(3)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/register.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(3)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/register.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(16)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/register.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(3)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/register.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class RegisterDto {\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @ApiProperty()\n  username: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @ApiProperty()\n  firstname: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @ApiProperty()\n  lastname: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(8)\n  @IsEmail()\n  @ApiProperty()\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(16)\n  @ApiProperty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/interfaces/requestWithUser.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { User } from 'apps/api/src/api/accounts/entities/user.entity';\nimport { Request } from 'express';\n\nexport interface RequestWithUser extends Request {\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/roles/entities/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid', {name: 'id'})@ApiProperty({description: 'unique identifier'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/roles/entities/role.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, maxLength: 64})@Column({length: 64})@Index({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/roles/entities/role.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BeforeInsert, Column, Entity, Index, PrimaryColumn } from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { v4 } from 'uuid';\n\n@Entity('roles', { schema: 'permissions' })\nexport default class Role {\n  @BeforeInsert()\n  addId() {\n    this.id = v4();\n  }\n\n  @PrimaryColumn('uuid', { name: 'id' })\n  @ApiProperty({ description: 'unique identifier' })\n  id: string;\n\n  @ApiProperty({ type: String, maxLength: 64 })\n  @Column({ length: 64 })\n  @Index({ unique: true })\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/api/src/security/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/security/guards/roles.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/guards/roles.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport Role from '../roles/entities/role.entity';\nimport { ROLES_KEY } from '../roles/decorators/roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    const { user } = context.switchToHttp().getRequest();\n    return requiredRoles.some((role) => user.roles?.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/security/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport Role from './entities/role.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role])],\n  controllers: [],\n  providers: [],\n  exports: [],\n})\nexport class RolesModule {\n  constructor() {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SecurityModule.html":{"url":"modules/SecurityModule.html","title":"module - SecurityModule","body":"\n                   \n\n\n\n\n    Modules\n    SecurityModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SecurityModule\n\n\n\ncluster_SecurityModule_providers\n\n\n\ncluster_SecurityModule_imports\n\n\n\ncluster_SecurityModule_exports\n\n\n\n\nAccountsModule\n\nAccountsModule\n\n\n\nSecurityModule\n\nSecurityModule\n\nSecurityModule -->\n\nAccountsModule->SecurityModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nSecurityModule -->\n\nRolesModule->SecurityModule\n\n\n\n\n\nSecurityService \n\nSecurityService \n\nSecurityService  -->\n\nSecurityModule->SecurityService \n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nSecurityModule -->\n\nLocalStrategy->SecurityModule\n\n\n\n\n\nSecurityService\n\nSecurityService\n\nSecurityModule -->\n\nSecurityService->SecurityModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/security/security.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LocalStrategy\n                        \n                        \n                            SecurityService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AccountsModule\n                        \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SecurityService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SecurityService } from './security.service';\nimport { AccountsModule } from 'apps/api/src/api/accounts/accounts.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { RolesModule } from './roles/roles.module';\nimport { jwtConstants } from './constants';\n89\n@Module({\n  imports: [\n    AccountsModule,\n    RolesModule,\n    PassportModule.register({ defaultStrategy: 'local' }),\n    JwtModule.register({\n      global: true,\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  providers: [SecurityService, LocalStrategy],\n  exports: [SecurityService],\n})\nexport class SecurityModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SecurityService.html":{"url":"injectables/SecurityService.html","title":"injectable - SecurityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SecurityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/security.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: AccountsService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/security/security.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        AccountsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    forgotPassword()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(login: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    login\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(register: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    register\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { RegisterDto } from './dto/register.dto';\nimport { LoginDto } from './dto/login.dto';\nimport { AccountsService } from '../api/accounts/accounts.service';\nimport { User } from '../api/accounts/entities/user.entity';\n\n@Injectable()\nexport class SecurityService {\n  constructor(private userService: AccountsService) {}\n\n  async validateUser(username: string, password: string): Promise {\n    const user = await this.userService.findOne(username, password);\n    if (user && user.password === password) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async register(register: RegisterDto): Promise {\n    const hashedPassword = await bcrypt.hash(register.password, 10);\n    const user = new User();\n    user.username = register.username;\n    user.email = register.email;\n    user.password = hashedPassword;\n    return this.userService.create(user);\n  }\n\n  async login(login: LoginDto): Promise {\n    return this.userService.findOne(login.username, login.password);\n  }\n\n  async logout() {\n    return Promise.resolve(undefined);\n  }\n\n  async refresh() {\n    return Promise.resolve(undefined);\n  }\n\n  async forgotPassword() {\n    return Promise.resolve(undefined);\n  }\n\n  async resetPassword() {\n    return Promise.resolve(undefined);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenDto.html":{"url":"classes/TokenDto.html","title":"class - TokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/dto/token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                            \n                                expires_in\n                            \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/token.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/token.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/token.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class TokenDto {\n  @ApiProperty()\n  expires_in: number;\n\n  @ApiProperty()\n  accessToken: string;\n\n  @ApiProperty()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/interfaces/tokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayload {\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostsDto.html":{"url":"classes/UpdatePostsDto.html","title":"class - UpdatePostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/posts/dto/updatePosts.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePostsDto } from \"./createPosts.dto\";\n\nexport class UpdatePostsDto extends PartialType(CreatePostsDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/accounts/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                billing\n                            \n                            \n                                    Optional\n                                email\n                            \n                            \n                                firstname\n                            \n                            \n                                id\n                            \n                            \n                                isAdmin\n                            \n                            \n                                lastname\n                            \n                            \n                                password\n                            \n                            \n                                    Public\n                                    Optional\n                                posts\n                            \n                            \n                                profile\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                            \n                                verified\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, address => address.user)@JoinColumn({name: 'address_id'})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        billing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Billing\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, billing => billing.user)@JoinColumn({name: 'billing_id'})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, length: 64})@ApiProperty({type: String, maxLength: 64})@Index({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty({type: String, maxLength: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid', {name: 'id'})@ApiProperty({description: 'unique identifier'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isAdmin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty({type: String, maxLength: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.authorId)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Profile\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, profile => profile.user)@JoinColumn({name: 'profile_id'})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, {cascade: true})@JoinTable({name: 'users_roles'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty({type: String, maxLength: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty({type: Boolean})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:86\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeInsert,\n  Column,\n  Entity,\n  Index,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  OneToMany,\n  OneToOne,\n  PrimaryColumn,\n} from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { v4 } from 'uuid';\nimport { Profile } from './profile.entity';\nimport { Address } from './address.entity';\nimport { Billing } from './billing.entity';\nimport { Exclude } from 'class-transformer';\nimport Role from '../../../security/roles/entities/role.entity';\nimport { Post } from '../../posts/entities/post.entity';\n\n@Entity('user', { schema: 'accounts' })\nexport class User {\n  @BeforeInsert()\n  addId() {\n    this.id = v4();\n  }\n\n  @PrimaryColumn('uuid', { name: 'id' })\n  @ApiProperty({ description: 'unique identifier' })\n  id: string;\n\n  @Column()\n  @ApiProperty({ type: String, maxLength: 64 })\n  username: string;\n\n  @Column()\n  @ApiProperty({ type: String, maxLength: 64 })\n  firstname: string;\n\n  @Column()\n  @ApiProperty({ type: String, maxLength: 64 })\n  lastname: string;\n\n  @Column({ unique: true, length: 64 })\n  @ApiProperty({ type: String, maxLength: 64 })\n  @Index({ unique: true })\n  email?: string;\n\n  @Column()\n  @ApiProperty()\n  @Exclude()\n  password: string;\n\n  // OTHER ENTITIES\n  @OneToOne(() => Profile, (profile) => profile.user)\n  @JoinColumn({ name: 'profile_id' })\n  @ApiProperty()\n  profile: Profile;\n\n  @OneToOne(() => Address, (address) => address.user)\n  @JoinColumn({ name: 'address_id' })\n  @ApiProperty()\n  address: Address;\n\n  @OneToOne(() => Billing, (billing) => billing.user)\n  @JoinColumn({ name: 'billing_id' })\n  @ApiProperty()\n  billing: Billing;\n\n  // // SOCIAL ENTITIES\n  @OneToMany(() => Post, (post: Post) => post.authorId)\n  public posts?: Post[];\n\n  @ManyToMany(() => Role, {\n    cascade: true,\n  })\n  @JoinTable({\n    name: 'users_roles',\n  })\n  roles: Role[];\n\n  // BOOLEANS\n  @Column()\n  @ApiProperty({ type: Boolean })\n  verified: boolean;\n\n  @Column()\n  @ApiProperty()\n  isAdmin: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/VaultGuard.html":{"url":"guards/VaultGuard.html","title":"guard - VaultGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    VaultGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/api/src/security/guards/vault.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/security/guards/vault.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/guards/vault.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class VaultGuard implements CanActivate {\n  constructor(private readonly jwtService: JwtService) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const request = context.switchToHttp().getRequest();\n    const token = request.headers.authorization.split(' ')[1];\n\n    try {\n      request.user = this.jwtService.verify(token);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VaultService.html":{"url":"injectables/VaultService.html","title":"injectable - VaultService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VaultService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/vault/vault.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/security/vault/vault.service.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(username, password)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/vault/vault.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { token: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(username)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/vault/vault.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     vault.client\n\n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/vault/vault.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport vault from 'node-vault';\n\n@Injectable()\nexport class VaultService {\n  private readonly client: vault.client;\n\n  constructor() {\n    this.client = vault({\n      apiVersion: 'v1',\n      endpoint: 'https://vault.nxie.uk',\n    });\n  }\n\n  login(username, password) {\n    return { token: \"\" };\n  }\n\n  async register(username) {\n\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/VideosController.html":{"url":"controllers/VideosController.html","title":"controller - VideosController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  VideosController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/videos/videos.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                accounts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                hardDelete\n                            \n                            \n                                    Async\n                                softDelete\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                upload\n                            \n                            \n                                    Async\n                                watch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create A New Video'})@ApiResponse({status: 403, description: 'Forbidden.'})@Post('video:create')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/videos/videos.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hardDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    hardDelete()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: '[Hard] Delete A Video [Admin Only]'})@ApiResponse({status: 403, description: 'Forbidden.'})@Delete('video:delete')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/videos/videos.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    softDelete()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: '[Soft] Delete A Video'})@ApiResponse({status: 403, description: 'Forbidden.'})@Delete('video:delete:soft')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/videos/videos.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update A Video'})@ApiResponse({status: 403, description: 'Forbidden.'})@Put('video:update')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/videos/videos.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                    \n                    upload()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Upload A Video'})@ApiResponse({status: 403, description: 'Forbidden.'})@Post('video:upload')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/videos/videos.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        watch\n                        \n                    \n                \n            \n            \n                \n                    \n                    watch()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Watch A Video'})@ApiResponse({status: 403, description: 'Forbidden.'})@Get('video:watch')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/videos/videos.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Post, Put } from '@nestjs/common';\nimport { VideosService } from './videos.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Videos: Create, Read, Update, Upload, Delete')\n@Controller('accounts')\nexport class VideosController {\n  constructor(private readonly videosService: VideosService) {}\n\n  @ApiOperation({ summary: 'Create A New Video' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Post('video:create')\n  async create() {}\n\n  @ApiOperation({ summary: 'Watch A Video' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Get('video:watch')\n  async watch() {}\n\n  @ApiOperation({ summary: 'Update A Video' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Put('video:update')\n  async update() {}\n\n  @ApiOperation({ summary: 'Upload A Video' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Post('video:upload')\n  async upload() {}\n\n  @ApiOperation({ summary: '[Soft] Delete A Video' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Delete('video:delete:soft')\n  async softDelete() {}\n\n  @ApiOperation({ summary: '[Hard] Delete A Video [Admin Only]' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Delete('video:delete')\n  async hardDelete() {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VideosModule.html":{"url":"modules/VideosModule.html","title":"module - VideosModule","body":"\n                   \n\n\n\n\n    Modules\n    VideosModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VideosModule\n\n\n\ncluster_VideosModule_providers\n\n\n\n\nVideosService\n\nVideosService\n\n\n\nVideosModule\n\nVideosModule\n\nVideosModule -->\n\nVideosService->VideosModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/api/videos/videos.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            VideosService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            VideosController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { VideosService } from './videos.service';\nimport { VideosController } from './videos.controller';\n\n@Module({\n  controllers: [VideosController],\n  providers: [VideosService]\n})\nexport class VideosModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VideosService.html":{"url":"injectables/VideosService.html","title":"injectable - VideosService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VideosService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/videos/videos.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class VideosService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/api/src/api/accounts/accounts.controller.ts\n            \n            controller\n            AccountsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/api/accounts/accounts.service.ts\n            \n            injectable\n            AccountsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                apps/api/src/api/accounts/entities/address.entity.ts\n            \n            entity\n            Address\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/accounts/entities/billing.entity.ts\n            \n            entity\n            Billing\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/accounts/entities/profile.entity.ts\n            \n            entity\n            Profile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/accounts/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/images/images.controller.ts\n            \n            controller\n            ImagesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/api/images/images.service.ts\n            \n            injectable\n            ImagesService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/posts/dto/createPosts.dto.ts\n            \n            class\n            CreatePostsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/api/posts/dto/updatePosts.dto.ts\n            \n            class\n            UpdatePostsDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/posts/entities/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/api/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                apps/api/src/api/videos/videos.controller.ts\n            \n            controller\n            VideosController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                apps/api/src/api/videos/videos.service.ts\n            \n            injectable\n            VideosService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/config/discord.config.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            chalk\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/repl.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/security/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/security/dto/token.dto.ts\n            \n            class\n            TokenDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/security/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/security/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/api/src/security/guards/vault.guard.ts\n            \n            guard\n            VaultGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/api/src/security/interfaces/auth.interface.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/interfaces/auth.interface.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/interfaces/requestWithUser.interface.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/security/interfaces/tokenPayload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/security/roles/casl/casl-ability.factory.ts\n            \n            injectable\n            CaslAbilityFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/security/roles/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/roles/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/roles/entities/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/security.service.ts\n            \n            injectable\n            SecurityService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                apps/api/src/security/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/api/src/security/vault/vault.service.ts\n            \n            injectable\n            VaultService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                libs/configuration/src/configuration.service.ts\n            \n            injectable\n            ConfigurationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                libs/configuration/src/function/microservice.ts\n            \n            function\n            microServices\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/configuration/src/function/nodemailer.ts\n            \n            function\n            setupNodemailer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/configuration/src/function/swagger.ts\n            \n            function\n            setupSwagger\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @casl/ability : ^6.4.0\n        \n            @docusaurus/core : 2.4.0\n        \n            @docusaurus/preset-classic : 2.4.0\n        \n            @grpc/grpc-js : ^1.8.14\n        \n            @grpc/proto-loader : ^0.7.6\n        \n            @mdx-js/react : ^1.6.22\n        \n            @nestjs/axios : ^2.0.0\n        \n            @nestjs/bull : ^0.6.3\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.3.1\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/cqrs : ^9.0.3\n        \n            @nestjs/event-emitter : ^1.4.1\n        \n            @nestjs/jwt : ^10.0.2\n        \n            @nestjs/microservices : ^9.3.10\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/platform-socket.io : ^9.3.10\n        \n            @nestjs/schedule : ^2.2.0\n        \n            @nestjs/serve-static : ^3.0.1\n        \n            @nestjs/swagger : ^6.2.1\n        \n            @nestjs/terminus : ^9.2.2\n        \n            @nestjs/throttler : ^4.0.0\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @nestjs/websockets : ^9.3.10\n        \n            amqp-connection-manager : ^4.1.12\n        \n            amqplib : ^0.10.3\n        \n            axios : ^1.3.5\n        \n            bcrypt : ^5.1.0\n        \n            bull : ^4.10.4\n        \n            cache-manager : ^5.1.7\n        \n            chalk : ^4.1.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            clsx : ^1.2.1\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.6\n        \n            cpx : ^1.5.0\n        \n            crypto-js : ^4.1.1\n        \n            csurf : ^1.11.0\n        \n            discord.js : ^14.9.0\n        \n            dotenv : ^16.0.3\n        \n            ejs : ^3.1.9\n        \n            elliptic : ^6.5.4\n        \n            express-session : ^1.17.3\n        \n            hads : ^3.0.3\n        \n            helmet : ^6.0.1\n        \n            ioredis : ^5.3.1\n        \n            joi : ^17.8.4\n        \n            kafkajs : ^2.2.4\n        \n            mqtt : ^4.3.7\n        \n            node-appwrite : ^8.2.0\n        \n            node-docker-api : ^1.1.22\n        \n            node-vault : ^0.9.22\n        \n            nodemailer : ^6.9.1\n        \n            openai : ^3.2.1\n        \n            ovenlivekit : ^1.1.0\n        \n            ovenplayer : ^0.10.26\n        \n            passport : ^0.6.0\n        \n            passport-discord : ^0.1.4\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            passport-twitter : ^1.0.4\n        \n            pg : ^8.10.0\n        \n            prism-react-renderer : ^1.3.5\n        \n            react : ^17.0.2\n        \n            react-dom : ^17.0.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            sqlite3 : ^5.1.6\n        \n            typeorm : ^0.3.12\n        \n            unity-webgl : ^3.3.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (apps/.../action.enum.ts)\n                        \n                        \n                            Role   (apps/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/security/roles/enum/action.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Action\n                    \n                \n                        \n                            \n                                 Manage\n                            \n                        \n                        \n                            \n                                Value : manage\n                            \n                        \n                        \n                            \n                                 Create\n                            \n                        \n                        \n                            \n                                Value : create\n                            \n                        \n                        \n                            \n                                 Read\n                            \n                        \n                        \n                            \n                                Value : read\n                            \n                        \n                        \n                            \n                                 Update\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 Delete\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n\n    apps/api/src/security/roles/enum/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 Guest\n                            \n                        \n                        \n                            \n                                Value : guest\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                        \n                            bootstrap   (apps/.../repl.ts)\n                        \n                        \n                            microServices   (libs/.../microservice.ts)\n                        \n                        \n                            setupNodemailer   (libs/.../nodemailer.ts)\n                        \n                        \n                            setupSwagger   (libs/.../swagger.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    apps/api/src/repl.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    libs/configuration/src/function/microservice.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        microServices\n                        \n                    \n                \n            \n            \n                \nmicroServices()\n                \n            \n\n\n\n\n        \n    \n    libs/configuration/src/function/nodemailer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setupNodemailer\n                        \n                    \n                \n            \n            \n                \nsetupNodemailer()\n                \n            \n\n\n\n\n        \n    \n    libs/configuration/src/function/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setupSwagger\n                        \n                    \n                \n            \n            \n                \nsetupSwagger(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNXiE\nnpm run docs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AccountsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigurationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ImagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SecurityModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VideosModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_imports\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_ConfigurationModule\n\n\n\ncluster_ConfigurationModule_exports\n\n\n\ncluster_ConfigurationModule_providers\n\n\n\ncluster_ImagesModule\n\n\n\ncluster_ImagesModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_SecurityModule\n\n\n\ncluster_SecurityModule_imports\n\n\n\ncluster_SecurityModule_exports\n\n\n\ncluster_SecurityModule_providers\n\n\n\ncluster_VideosModule\n\n\n\ncluster_VideosModule_providers\n\n\n\n\nImagesModule\n\nImagesModule\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nImagesModule->AccountsModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAccountsModule -->\n\nPostsModule->AccountsModule\n\n\n\nAccountsModule -->\n\nPostsModule->AccountsModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nVideosModule\n\nVideosModule\n\nAccountsModule -->\n\nVideosModule->AccountsModule\n\n\n\n\n\nAccountsService \n\nAccountsService \n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nSecurityModule\n\nSecurityModule\n\nSecurityModule -->\n\nAccountsModule->SecurityModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAccountsModule->AppModule\n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\nVaultService\n\nVaultService\n\nAccountsModule -->\n\nVaultService->AccountsModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nSecurityModule->AppModule\n\n\n\n\n\nSecurityService \n\nSecurityService \n\nSecurityService  -->\n\nSecurityModule->SecurityService \n\n\n\n\n\nConfigurationService \n\nConfigurationService \n\n\n\nConfigurationModule\n\nConfigurationModule\n\nConfigurationService  -->\n\nConfigurationModule->ConfigurationService \n\n\n\n\n\nConfigurationService\n\nConfigurationService\n\nConfigurationModule -->\n\nConfigurationService->ConfigurationModule\n\n\n\n\n\nImagesService\n\nImagesService\n\nImagesModule -->\n\nImagesService->ImagesModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nSecurityModule -->\n\nRolesModule->SecurityModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nSecurityModule -->\n\nLocalStrategy->SecurityModule\n\n\n\n\n\nSecurityService\n\nSecurityService\n\nSecurityModule -->\n\nSecurityService->SecurityModule\n\n\n\n\n\nVideosService\n\nVideosService\n\nVideosModule -->\n\nVideosService->VideosModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (apps/.../casl-ability.factory.ts)\n                        \n                        \n                            Subjects   (apps/.../casl-ability.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/security/roles/casl/casl-ability.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Subjects\n                \n            \n            \n                \n                            InferSubjects | \"all\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            chalk   (apps/.../main.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (apps/.../auth.interface.ts)\n                        \n                        \n                            jwtConstants   (apps/.../constants.ts)\n                        \n                        \n                            module   (apps/.../main.ts)\n                        \n                        \n                            Public   (apps/.../auth.interface.ts)\n                        \n                        \n                            Roles   (apps/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (apps/.../roles.decorator.ts)\n                        \n                        \n                               (apps/.../discord.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        chalk\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('chalk')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    apps/api/src/security/interfaces/auth.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/security/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: 'secretKey',\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/security/roles/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    apps/api/src/config/discord.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('dotenv').config({ path: '.env' })\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
