var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AccountsController.html",[0,1.366,1,2.495]],["body/controllers/AccountsController.html",[0,0.845,1,2.395,2,0.8,3,0.147,4,0.147,5,0.131,6,1.917,7,1.416,8,1.139,9,0.306,10,1.241,11,2.815,12,3.121,13,5.074,14,3.225,15,4.705,16,2.991,17,1.756,18,0.021,19,2.242,20,6.34,21,2.197,22,1.544,23,4.287,24,3.353,25,2.242,26,1.081,27,2.242,28,1.854,29,3.479,30,4.804,31,4.804,32,4.804,33,3.479,34,1.113,35,3.479,36,2.242,37,2.242,38,3.479,39,2.643,40,3.479,41,2.242,42,2.242,43,1.768,44,2.242,45,2.242,46,2.242,47,2.242,48,0.399,49,0.894,50,1.544,51,0.37,52,2.317,53,1.917,54,2.242,55,3.788,56,4.085,57,1.544,58,0.757,59,2.935,60,2.242,61,1.544,62,2.242,63,1.069,64,2.242,65,2.242,66,3.479,67,2.242,68,3.479,69,1.544,70,0.147,71,0.073,72,1.069,73,1.139,74,3.952,75,3.479,76,3.58,77,3.58,78,2.242,79,2.242,80,3.479,81,2.242,82,2.242,83,2.242,84,0.01,85,0.01]],["title/modules/AccountsModule.html",[86,0.841,87,2.288]],["body/modules/AccountsModule.html",[1,3.956,2,1.814,3,0.247,4,0.247,5,0.221,14,2.765,18,0.021,34,1.211,48,0.497,51,0.624,52,3.878,53,3.235,70,0.247,71,0.122,84,0.014,85,0.014,86,1.18,87,4.26,88,1.426,89,2.148,90,3.235,91,3.235,92,3.235,93,2.424,94,1.803,95,1.803,96,3.783,97,2.424,98,3.212,99,3.783,100,2.605,101,2.057,102,3.235,103,3.783,104,3.212,105,3.783,106,3.212,107,3.783,108,2.21,109,3.783]],["title/injectables/AccountsService.html",[52,1.97,110,0.888]],["body/injectables/AccountsService.html",[3,0.185,4,0.185,5,0.166,9,0.387,10,1.48,11,2.988,12,2.939,14,2.939,16,2.939,18,0.021,26,1.292,28,2.145,34,1.842,48,0.392,51,0.467,52,2.255,70,0.185,71,0.092,84,0.012,85,0.012,101,1.539,102,2.421,110,1.016,111,1.269,112,2.421,113,2.62,114,4.149,115,5.406,116,2.108,117,2.831,118,4.623,119,2.831,120,2.34,121,1.958,122,0.965,123,2.201,124,4.149,125,4.149,126,2.831,127,3.635,128,2.831,129,4.149,130,1.824,131,3.722,132,2.831,133,2.255,134,2.856,135,2.831,136,2.831,137,2.831,138,2.421,139,1.349,140,2.831,141,1.949,142,2.695,143,2.831,144,2.831,145,4.107]],["title/entities/Address.html",[106,2.288,146,1.366]],["body/entities/Address.html",[3,0.208,4,0.208,5,0.186,8,1.615,9,0.434,17,2.173,18,0.021,26,1.338,34,2.14,48,0.38,58,1.073,70,0.208,71,0.103,84,0.013,85,0.013,106,2.848,122,1.265,130,2.057,139,1.514,146,1.198,147,1.615,148,2.718,149,1.608,150,5.24,151,5.24,152,5.24,153,5.24,154,5.24,155,5.24,156,4.146,157,3.178,158,3.178,159,3.178,160,3.178,161,3.425,162,2.414,163,3.178,164,3.178,165,2.188,166,3.178,167,3.178,168,3.654,169,3.104,170,2.634,171,3.133,172,2.414,173,3.178,174,1.727,175,3.178]],["title/controllers/AppController.html",[0,1.366,176,2.495]],["body/controllers/AppController.html",[0,2.355,2,1.865,3,0.342,4,0.342,5,0.306,18,0.02,48,0.379,51,0.863,70,0.342,71,0.169,84,0.017,85,0.017,176,4.301,177,4.471,178,5.228]],["title/modules/AppModule.html",[86,0.841,179,2.495]],["body/modules/AppModule.html",[2,1.276,3,0.152,4,0.152,5,0.136,18,0.021,48,0.486,51,0.384,70,0.152,71,0.075,84,0.01,85,0.01,86,0.83,88,0.876,89,1.511,93,1.705,94,1.108,95,1.108,97,1.108,108,2.09,176,3.002,179,4.66,180,1.988,181,1.988,182,3.526,183,3.526,184,3.526,185,3.526,186,3.526,187,3.526,188,2.325,189,1.988,190,1.766,191,3.059,192,4.361,193,1.6,194,2.325,195,2.325,196,2.325,197,1.988,198,1.988,199,2.325,200,2.325,201,2.325,202,2.463,203,2.325,204,2.463,205,2.325,206,2.325,207,2.325,208,2.325,209,2.325,210,2.325,211,2.325,212,1.042,213,2.325,214,2.325,215,2.325,216,1.988,217,6.004,218,2.325,219,6.946,220,2.325,221,4.361,222,2.325,223,2.325,224,2.325,225,2.325,226,1.988,227,2.325,228,2.325,229,1.988,230,2.325,231,2.325,232,2.325,233,2.325,234,2.325,235,2.325,236,2.325,237,2.325,238,2.325,239,2.325,240,2.325,241,2.325,242,2.325,243,2.325,244,2.325,245,2.325,246,2.325,247,2.325,248,1.988,249,2.325,250,2.325,251,2.325,252,2.325,253,2.325,254,2.325,255,2.325,256,2.325,257,1.988,258,3.577,259,3.577]],["title/guards/AuthGuard.html",[202,2.495,260,2.753]],["body/guards/AuthGuard.html",[3,0.175,4,0.175,5,0.156,9,0.365,10,1.419,11,2.006,18,0.021,26,0.987,28,1.419,39,2.032,43,2.021,48,0.427,51,0.441,70,0.175,71,0.087,72,1.275,84,0.011,85,0.011,110,0.974,116,1.359,120,2.263,121,1.894,122,1.105,123,2.128,130,1.206,134,2.738,141,3.621,142,2.128,193,1.841,202,2.738,212,1.783,261,2.032,262,2.287,263,4.497,264,3.978,265,2.674,266,5.892,267,5.217,268,2.674,269,3.401,270,4.497,271,2.674,272,2.287,273,3.978,274,5.217,275,2.674,276,4.061,277,4.061,278,2.032,279,2.032,280,1.841,281,2.287,282,2.032,283,2.674,284,2.287,285,3.072,286,3.401,287,2.674,288,2.287,289,2.287,290,2.674,291,2.674,292,2.287,293,5.259,294,2.674,295,3.401,296,2.674,297,2.674,298,2.674,299,2.674,300,2.287,301,2.674,302,2.674,303,2.674,304,2.674,305,1.562,306,2.674,307,2.032,308,2.287,309,2.674,310,2.674,311,2.674]],["title/entities/Billing.html",[104,2.288,146,1.366]],["body/entities/Billing.html",[3,0.228,4,0.228,5,0.204,8,1.77,9,0.476,17,2.104,18,0.021,26,1.295,34,2.185,48,0.399,58,1.177,70,0.228,71,0.113,84,0.013,85,0.013,104,3.037,122,1.224,130,2.04,139,1.66,146,1.313,147,1.77,149,1.715,156,3.791,162,2.647,165,2.399,168,3.468,169,3.31,170,2.809,171,3.07,172,2.647,174,1.894,312,2.979,313,5.506,314,5.506,315,5.506,316,5.506,317,3.484,318,3.484,319,3.484,320,3.484,321,3.484,322,3.484,323,3.484,324,3.484]],["title/injectables/CaslAbilityFactory.html",[110,0.888,325,2.753]],["body/injectables/CaslAbilityFactory.html",[3,0.217,4,0.217,5,0.194,9,0.454,10,1.66,18,0.021,26,0.691,28,1.185,34,1.96,39,3.536,43,1.689,48,0.444,49,2.141,51,0.549,70,0.304,71,0.108,84,0.013,85,0.013,110,1.14,111,1.49,120,1.584,121,1.325,122,1.144,123,1.49,142,1.49,212,1.49,285,1.942,325,3.536,326,3.536,327,2.525,328,4.654,329,4.654,330,3.324,331,4.592,332,4.654,333,4.654,334,4.654,335,3.98,336,2.842,337,2.842,338,3.324,339,2.842,340,3.324,341,2.842,342,2.842,343,4.654,344,3.324,345,3.324,346,3.697,347,3.324,348,4.654,349,3.324,350,3.324,351,2.842,352,3.324,353,3.324,354,2.842,355,3.324,356,3.324,357,1.807,358,3.324,359,3.324,360,3.324,361,3.324,362,3.324,363,3.324]],["title/modules/ConfigurationModule.html",[86,0.841,364,2.495]],["body/modules/ConfigurationModule.html",[3,0.289,4,0.289,5,0.259,18,0.02,48,0.409,51,0.731,70,0.289,71,0.143,84,0.016,85,0.016,86,1.308,88,1.669,89,2.382,93,2.687,94,2.11,95,2.11,97,2.687,98,3.561,364,4.823,365,3.787,366,3.787,367,3.787,368,4.611,369,4.428,370,4.428]],["title/injectables/ConfigurationService.html",[110,0.888,368,2.288]],["body/injectables/ConfigurationService.html",[3,0.192,4,0.192,5,0.172,9,0.401,10,1.52,18,0.021,26,1.214,28,1.962,48,0.213,51,0.485,70,0.192,71,0.095,73,2.166,84,0.012,85,0.012,110,1.044,111,1.317,116,2.166,120,2.784,121,2.329,122,1.29,123,2.618,130,2.19,141,2.934,142,2.466,161,3.238,212,1.317,276,3.645,368,2.692,371,2.513,372,4.262,373,4.262,374,4.262,375,2.938,376,5.502,377,5.015,378,2.938,379,4.262,380,4.262,381,2.938,382,5.502,383,4.262,384,5.015,385,2.938,386,2.232,387,2.232,388,4.262,389,2.938,390,2.934,391,4.262,392,2.938,393,4.262,394,2.938,395,2.938,396,2.938,397,2.938,398,2.938]],["title/classes/CreatePostsDto.html",[71,0.117,399,2.495]],["body/classes/CreatePostsDto.html",[3,0.267,4,0.267,5,0.239,9,0.559,17,2.017,18,0.02,26,1.242,48,0.296,70,0.267,71,0.173,73,3.584,84,0.015,85,0.015,122,1.174,130,2.047,149,1.91,357,2.223,399,3.687,400,3.496,401,4.537,402,5.107,403,5.107,404,5.972,405,4.089,406,4.089,407,4.089,408,4.814,409,4.814,410,2.815]],["title/modules/DatabaseModule.html",[86,0.841,182,2.288]],["body/modules/DatabaseModule.html",[3,0.277,4,0.277,5,0.248,18,0.021,48,0.441,51,0.7,70,0.277,71,0.137,84,0.015,85,0.015,86,1.273,88,1.599,100,2.921,101,2.306,108,3.205,122,0.834,133,2.306,147,2.156,174,2.306,182,3.464,189,4.691,190,3.223,212,2.459,216,3.628,229,3.628,411,4.243,412,6.427,413,4.243,414,4.243,415,4.243,416,4.243,417,4.243,418,4.243,419,4.243,420,4.243,421,2.479,422,4.243,423,4.243,424,4.243,425,4.243,426,4.243]],["title/controllers/ImagesController.html",[0,1.366,427,2.495]],["body/controllers/ImagesController.html",[0,0.98,2,0.927,3,0.17,4,0.17,5,0.152,7,1.641,8,1.321,9,0.355,10,1.389,11,2.894,12,3.169,16,3.286,17,1.876,18,0.021,21,2.459,22,1.789,23,4.456,24,3.289,26,1.155,28,1.981,48,0.338,49,1.036,50,1.789,51,0.429,55,4.013,56,4.013,57,1.789,58,0.878,69,1.789,70,0.17,71,0.084,72,1.239,73,1.321,74,3.823,76,3.823,77,3.823,84,0.011,85,0.011,427,2.681,428,2.222,429,3.939,430,3.939,431,5.168,432,6.044,433,4.219,434,2.958,435,5.829,436,2.599,437,2.599,438,2.958,439,5.185,440,2.599,441,2.599,442,2.599,443,2.599,444,2.599,445,2.599,446,2.599,447,2.599,448,2.727,449,2.222,450,2.599,451,2.599,452,2.599,453,2.599,454,2.599,455,2.599]],["title/modules/ImagesModule.html",[86,0.841,183,2.288]],["body/modules/ImagesModule.html",[2,2.022,3,0.292,4,0.292,5,0.261,18,0.02,48,0.451,51,0.737,70,0.292,71,0.145,84,0.016,85,0.016,86,1.316,88,1.684,89,2.395,93,2.702,94,2.129,95,2.129,97,2.702,183,4.364,427,4.288,448,4.037,449,3.82,456,3.82,457,3.82,458,4.467,459,4.467]],["title/injectables/ImagesService.html",[110,0.888,448,2.117]],["body/injectables/ImagesService.html",[3,0.345,4,0.345,5,0.309,18,0.02,48,0.383,51,0.872,70,0.345,71,0.171,84,0.018,85,0.018,110,1.54,111,2.368,448,3.672,460,4.518]],["title/injectables/LocalStrategy.html",[110,0.888,461,2.288]],["body/injectables/LocalStrategy.html",[3,0.238,4,0.238,5,0.213,9,0.498,10,1.77,11,2.382,18,0.021,26,1.032,28,1.301,34,1.805,43,1.853,48,0.439,51,0.602,70,0.238,71,0.118,72,1.738,73,1.853,84,0.014,85,0.014,110,1.215,111,1.635,116,1.853,120,2.365,121,1.978,122,0.975,123,2.224,130,1.981,133,1.982,134,3.416,142,1.635,277,4.243,285,2.13,295,3.119,305,2.13,421,3.536,461,3.133,462,3.119,463,4.962,464,3.647,465,3.536,466,3.647,467,4.962,468,4.962,469,3.647,470,3.647,471,2.771,472,3.647,473,3.119,474,2.771,475,3.119,476,2.771,477,3.647,478,3.647,479,3.647]],["title/classes/LoginDto.html",[71,0.117,480,2.495]],["body/classes/LoginDto.html",[3,0.266,4,0.266,5,0.238,9,0.556,17,2.013,18,0.02,26,1.239,48,0.387,58,1.375,70,0.266,71,0.173,84,0.015,85,0.015,122,1.171,130,2.045,131,4.103,133,3.24,149,1.905,171,3.015,357,2.214,408,4.806,409,4.806,410,2.804,421,3.482,480,3.677,481,3.482,482,4.072,483,4.072,484,5.341,485,4.072,486,4.072,487,4.567]],["title/controllers/MediaController.html",[0,1.366,488,2.495]],["body/controllers/MediaController.html",[0,1.655,2,1.566,3,0.287,4,0.287,5,0.257,7,2.772,9,0.6,10,2,11,2.609,17,1.483,18,0.02,26,0.913,28,1.566,48,0.406,49,1.75,51,0.724,70,0.287,71,0.142,72,2.092,73,2.231,84,0.016,85,0.016,127,2.772,142,1.967,305,2.564,488,3.86,489,3.754,490,4.39,491,5.566,492,5.607,493,4.39,494,4.39,495,3.609,496,3.754,497,4.39,498,4.39]],["title/modules/MediaModule.html",[86,0.841,184,2.288]],["body/modules/MediaModule.html",[2,2.022,3,0.292,4,0.292,5,0.261,18,0.02,48,0.451,51,0.737,70,0.292,71,0.145,84,0.016,85,0.016,86,1.316,88,1.684,89,2.395,93,2.702,94,2.129,95,2.129,97,2.702,184,4.364,488,4.288,495,4.037,496,3.82,499,3.82,500,3.82,501,4.467,502,4.467]],["title/injectables/MediaService.html",[110,0.888,495,2.117]],["body/injectables/MediaService.html",[3,0.301,4,0.301,5,0.269,9,0.63,10,2.063,11,2.669,18,0.02,26,0.958,28,1.644,48,0.419,51,0.761,70,0.301,71,0.149,84,0.016,85,0.016,110,1.417,111,2.066,127,2.911,142,2.066,285,2.693,305,2.693,491,5.667,495,3.378,503,3.942,504,4.61,505,4.945,506,4.61,507,4.61,508,4.61]],["title/entities/Post.html",[49,1.445,146,1.366]],["body/entities/Post.html",[3,0.179,4,0.179,5,0.16,9,0.374,17,2.177,18,0.021,24,1.392,26,1.34,34,1.902,48,0.386,49,1.615,58,0.925,70,0.179,71,0.089,84,0.011,85,0.011,121,1.921,122,1.267,130,1.915,139,1.306,146,1.033,147,1.392,149,1.444,168,4.039,170,1.6,171,1.93,174,1.489,351,4.855,354,4.119,390,2.788,401,3.659,402,4.119,403,4.119,509,2.343,510,4.817,511,4.817,512,4.043,513,4.817,514,2.739,515,2.739,516,2.739,517,2.739,518,2.739,519,5.943,520,2.739,521,2.739,522,3.076,523,2.081,524,3.076,525,2.788,526,2.739,527,2.739,528,2.739,529,2.739,530,3.076,531,3.463,532,4.049,533,3.076,534,2.081,535,2.739,536,2.739,537,2.081,538,2.081,539,2.081,540,2.739]],["title/controllers/PostsController.html",[0,1.366,541,2.495]],["body/controllers/PostsController.html",[0,0.948,2,0.897,3,0.164,4,0.164,5,0.147,7,1.588,8,1.278,9,0.344,10,1.355,11,2.877,12,3.13,16,3.249,17,1.849,18,0.02,21,2.399,22,1.731,23,4.42,24,3.262,26,1.138,28,1.953,43,1.93,48,0.332,49,2.384,50,1.731,51,0.415,55,3.964,56,3.964,57,1.731,58,0.849,69,1.731,70,0.164,71,0.081,72,1.199,73,1.278,74,3.769,76,3.769,77,3.769,84,0.011,85,0.011,113,3.775,346,4.115,429,3.875,430,3.875,433,4.16,434,2.886,438,2.886,537,4.877,541,2.615,542,2.151,543,5.1,544,2.515,545,2.515,546,2.515,547,2.515,548,2.515,549,2.515,550,2.515,551,2.515,552,2.515,553,2.515,554,2.674,555,2.151,556,2.515,557,2.151,558,2.515,559,2.515,560,2.515,561,2.515,562,2.515]],["title/modules/PostsModule.html",[86,0.841,185,2.288]],["body/modules/PostsModule.html",[2,1.9,3,0.265,4,0.265,5,0.237,18,0.021,48,0.475,49,1.617,51,0.669,70,0.265,71,0.131,84,0.015,85,0.015,86,1.236,88,1.529,89,2.25,93,2.539,94,1.933,95,1.933,97,2.539,98,3.364,100,2.792,101,2.205,108,2.369,185,4.334,541,4.095,554,4.212,555,3.468,563,3.468,564,3.468,565,3.468,566,4.056,567,4.056,568,3.468,569,4.056]],["title/injectables/PostsService.html",[110,0.888,554,2.117]],["body/injectables/PostsService.html",[3,0.225,4,0.225,5,0.201,9,0.47,10,1.699,11,2.309,12,3.209,16,3.209,18,0.021,26,1.333,28,2.211,48,0.428,49,1.37,51,0.567,70,0.225,71,0.111,84,0.013,85,0.013,101,1.868,110,1.167,111,1.54,113,3.728,116,2.42,118,5.047,120,1.638,121,1.37,122,0.676,123,1.54,127,2.17,138,2.939,139,1.638,141,2.366,142,2.778,145,4.484,305,2.008,554,2.783,568,2.939,570,2.939,571,5.902,572,5.902,573,3.437,574,3.437,575,4.763,576,3.437,577,3.437,578,3.437,579,3.437,580,3.437,581,3.437,582,3.437]],["title/entities/Profile.html",[14,1.97,146,1.366]],["body/entities/Profile.html",[3,0.239,4,0.239,5,0.214,8,1.86,9,0.5,14,2.704,17,2.047,18,0.021,26,1.26,34,2.208,48,0.409,58,1.236,70,0.239,71,0.118,84,0.014,85,0.014,122,1.191,130,1.983,139,1.744,146,1.38,147,1.86,149,1.774,156,3.424,162,2.781,165,2.52,168,3.3,169,3.424,170,2.906,171,3.021,172,2.781,174,1.99,583,3.13,584,5.65,585,5.65,586,5.65,587,3.66,588,3.66,589,3.66,590,3.66,591,3.66,592,3.66,593,3.66]],["title/classes/RegisterDto.html",[71,0.117,594,2.495]],["body/classes/RegisterDto.html",[3,0.233,4,0.233,5,0.208,9,0.486,17,2.12,18,0.02,26,1.305,48,0.353,58,1.201,70,0.233,71,0.158,84,0.014,85,0.014,122,1.234,130,2.105,131,3.833,133,3.026,149,1.74,171,3.089,357,1.934,408,4.925,409,4.925,410,2.449,421,3.252,487,4.171,594,3.358,595,3.042,596,4.76,597,4.76,598,3.557,599,3.557,600,5.567,601,3.557,602,3.557,603,3.557,604,3.557,605,3.557,606,3.557,607,5.567,608,3.557,609,3.557]],["title/interfaces/RequestWithUser.html",[610,2.288,611,2.753]],["body/interfaces/RequestWithUser.html",[3,0.311,4,0.311,5,0.278,9,0.651,18,0.02,34,2.302,48,0.428,70,0.311,84,0.016,85,0.016,122,0.936,149,2.105,274,5.484,279,3.617,476,4.483,610,3.007,611,4.483,612,3.617,613,4.072,614,4.761]],["title/entities/Role.html",[63,1.727,146,1.366]],["body/entities/Role.html",[3,0.238,4,0.238,5,0.212,9,0.769,17,1.672,18,0.021,24,1.846,26,1.029,48,0.408,58,1.227,63,2.359,70,0.238,71,0.118,84,0.014,85,0.014,121,2.521,122,1.106,130,1.979,139,1.732,146,1.37,147,1.846,149,1.765,168,2.891,170,2.123,171,2.682,174,1.975,212,2.218,386,2.761,512,4.591,522,3.76,523,2.761,524,4.276,525,3.407,530,3.76,533,3.76,534,2.761,538,2.761,539,2.761,615,3.107,616,3.634,617,3.634,618,4.232,619,3.634,620,3.107,621,3.634,622,3.634,623,3.634,624,4.232,625,3.107]],["title/guards/RolesGuard.html",[204,2.495,260,2.753]],["body/guards/RolesGuard.html",[3,0.243,4,0.243,5,0.217,9,0.507,10,1.791,18,0.021,26,1.044,28,1.325,34,1.188,48,0.442,51,0.613,63,1.77,70,0.243,71,0.12,72,1.77,84,0.014,85,0.014,110,1.23,116,1.887,120,2.394,121,2.003,122,0.987,123,2.251,142,2.251,193,2.557,204,3.458,212,1.664,261,2.822,263,5.215,267,5.615,269,4.295,270,5.215,272,3.176,284,3.176,285,2.934,288,3.176,289,3.176,292,3.176,390,3.458,626,3.176,627,3.714,628,3.714,629,3.714,630,3.714,631,2.822,632,3.714,633,5.023,634,3.714,635,3.714,636,3.714]],["title/modules/RolesModule.html",[86,0.841,637,2.288]],["body/modules/RolesModule.html",[2,1.706,3,0.313,4,0.313,5,0.28,18,0.021,48,0.466,51,0.789,63,2.28,70,0.313,71,0.155,84,0.017,85,0.017,86,1.373,88,1.803,97,2.28,98,3.021,100,3.293,101,2.6,108,2.795,116,2.431,637,3.738,638,4.784,639,4.784,640,4.784]],["title/modules/SecurityModule.html",[86,0.841,186,2.288]],["body/modules/SecurityModule.html",[3,0.219,4,0.219,5,0.196,18,0.021,48,0.483,51,0.552,70,0.219,71,0.108,84,0.013,85,0.013,86,1.085,87,4.017,88,1.261,89,1.975,93,2.228,94,1.594,95,1.594,97,2.228,98,2.953,108,2.731,186,4.448,212,1.5,278,2.542,280,2.303,281,2.861,307,2.542,308,2.861,461,4.017,465,4.083,471,2.542,474,2.542,475,2.861,637,4.017,641,2.861,642,2.861,643,2.861,644,2.861,645,3.346,646,3.346,647,3.346,648,3.346,649,3.346,650,3.346,651,3.346,652,3.346,653,3.346,654,3.346,655,3.346,656,3.346,657,3.346]],["title/injectables/SecurityService.html",[110,0.888,465,2.117]],["body/injectables/SecurityService.html",[3,0.155,4,0.155,5,0.139,9,0.324,10,1.296,11,2.957,13,3.778,15,3.778,18,0.021,26,1.257,28,2.09,34,1.802,43,1.206,48,0.408,51,0.392,52,2.691,70,0.155,71,0.077,72,1.131,84,0.01,85,0.01,110,0.89,111,1.064,116,1.206,120,2.359,121,1.974,122,0.973,123,2.219,127,3.126,130,1.708,133,1.29,134,3.876,142,2.709,145,3.761,285,2.892,305,2.123,339,2.03,421,3.289,465,2.123,480,3.408,594,3.408,658,2.03,659,4.95,660,4.95,661,4.95,662,4.95,663,3.635,664,2.374,665,2.374,666,3.635,667,2.374,668,3.635,669,2.374,670,2.374,671,2.374,672,3.635,673,2.374,674,2.374,675,3.635,676,2.374,677,3.108,678,2.374,679,2.374,680,2.374,681,2.374,682,3.635,683,3.635,684,2.374,685,3.635,686,2.374,687,2.03,688,2.374,689,2.374,690,2.374,691,2.374,692,2.374,693,2.374,694,2.374]],["title/classes/TokenDto.html",[71,0.117,695,2.753]],["body/classes/TokenDto.html",[3,0.283,4,0.283,5,0.253,9,0.592,17,2.074,18,0.02,26,1.277,48,0.314,58,1.464,70,0.283,71,0.14,84,0.016,85,0.016,122,1.207,130,1.965,149,1.983,161,4.225,171,3.322,357,2.356,695,4.225,696,3.706,697,6.141,698,6.141,699,6.141,700,4.334,701,4.334,702,4.334]],["title/interfaces/TokenPayload.html",[610,2.288,703,2.753]],["body/interfaces/TokenPayload.html",[3,0.333,4,0.333,5,0.298,9,0.696,18,0.02,70,0.333,84,0.017,85,0.017,122,1.002,130,2.004,149,2.194,610,3.219,612,3.872,703,4.674,704,4.358,705,6.862]],["title/classes/UpdatePostsDto.html",[71,0.117,706,2.753]],["body/classes/UpdatePostsDto.html",[3,0.335,4,0.335,5,0.299,18,0.02,48,0.447,58,1.73,70,0.335,71,0.166,84,0.017,85,0.017,357,2.785,399,3.527,476,3.892,706,4.688,707,4.381,708,5.123,709,5.123,710,5.123]],["title/entities/User.html",[34,1.159,146,1.366]],["body/entities/User.html",[3,0.116,4,0.116,5,0.103,8,0.899,9,0.498,14,3.064,17,2.079,18,0.021,24,0.899,26,1.28,34,0.922,48,0.408,49,2.085,58,0.597,59,2.509,61,2.509,63,2.002,70,0.116,71,0.093,84,0.008,85,0.008,104,3.56,106,3.56,121,1.977,122,1.283,123,1.883,130,2.012,131,2.509,133,1.981,139,0.843,146,0.667,147,1.852,149,1.027,156,1.218,165,2.509,168,3.184,169,2.892,170,1.033,171,2.883,174,0.961,212,2.073,390,3.414,421,2.129,512,3.192,522,2.188,523,1.344,524,3.192,525,1.983,530,2.188,531,3.592,533,2.188,534,1.344,537,1.344,538,1.344,539,1.344,557,3.116,596,3.116,597,3.116,618,4.661,620,1.512,624,4.661,625,2.463,711,1.512,712,3.644,713,3.644,714,1.768,715,1.768,716,1.768,717,1.768,718,1.768,719,1.768,720,1.768,721,1.768,722,1.768,723,4.201,724,1.768,725,1.768,726,1.768,727,1.768,728,1.768,729,1.768,730,1.768,731,2.88,732,1.768,733,1.768,734,1.768,735,1.768,736,1.768,737,2.88,738,1.768,739,2.88,740,1.768,741,1.768,742,1.768,743,2.88,744,2.88,745,2.88,746,1.768,747,1.768,748,1.768,749,2.88,750,1.512,751,1.768,752,1.768,753,1.768,754,1.768,755,1.768,756,1.768,757,1.768,758,1.768,759,1.768,760,1.768]],["title/controllers/VideosController.html",[0,1.366,761,2.495]],["body/controllers/VideosController.html",[0,0.899,2,0.851,3,0.156,4,0.156,5,0.139,7,1.506,8,1.212,9,0.326,10,1.301,11,2.912,12,3.066,16,3.19,17,1.905,18,0.021,21,2.304,22,1.642,23,4.497,24,3.319,26,1.173,28,2.012,43,1.854,48,0.321,49,0.951,50,1.642,51,0.394,55,4.04,56,4.04,57,1.642,58,0.805,69,1.642,70,0.156,71,0.077,72,1.136,73,1.212,74,3.883,76,3.883,77,3.883,84,0.01,85,0.01,113,3.707,346,1.642,429,3.77,430,3.77,431,5.019,433,4.285,434,2.772,438,2.772,761,2.512,762,2.039,763,5.64,764,5.348,765,2.385,766,2.385,767,5.869,768,2.385,769,2.385,770,2.385,771,2.385,772,2.385,773,2.385,774,2.385,775,2.385,776,2.385,777,2.385,778,2.588,779,2.039,780,2.385,781,2.385,782,2.385,783,2.385,784,2.385,785,2.385,786,2.385]],["title/modules/VideosModule.html",[86,0.841,187,2.288]],["body/modules/VideosModule.html",[2,2.022,3,0.292,4,0.292,5,0.261,18,0.02,48,0.451,51,0.737,70,0.292,71,0.145,84,0.016,85,0.016,86,1.316,88,1.684,89,2.395,93,2.702,94,2.129,95,2.129,97,2.702,187,4.364,761,4.288,778,4.037,779,3.82,787,3.82,788,3.82,789,4.467,790,4.467]],["title/injectables/VideosService.html",[110,0.888,778,2.117]],["body/injectables/VideosService.html",[3,0.345,4,0.345,5,0.309,18,0.02,48,0.383,51,0.872,70,0.345,71,0.171,84,0.018,85,0.018,110,1.54,111,2.368,778,3.672,791,4.518]],["title/coverage.html",[792,4.224]],["body/coverage.html",[0,2.1,1,1.593,5,0.135,6,1.979,14,1.258,18,0.021,34,0.74,43,1.176,49,0.923,52,1.258,59,1.593,61,1.593,63,1.103,71,0.171,84,0.01,85,0.01,86,0.537,104,1.461,106,1.461,110,1.506,112,1.979,122,0.455,146,2.1,148,1.979,176,1.593,177,1.979,202,1.593,204,1.593,260,2.708,262,1.979,280,1.593,282,1.758,312,1.979,325,1.758,326,1.758,327,1.758,368,1.461,371,1.979,399,1.593,400,1.979,427,1.593,428,1.979,448,1.352,460,1.979,461,1.461,462,1.979,465,1.352,480,1.593,481,1.979,488,1.593,489,1.979,495,1.352,503,1.979,509,1.979,525,1.593,541,1.593,542,1.979,554,1.352,570,1.979,583,1.979,594,1.593,595,1.979,610,2.251,611,1.758,613,1.979,615,1.979,626,1.979,631,1.758,658,1.979,695,1.758,696,1.979,703,1.758,704,1.979,706,1.758,707,1.979,711,1.979,761,1.593,762,1.979,778,1.352,791,1.979,792,1.979,793,2.314,794,2.314,795,7.346,796,5.276,797,2.314,798,7.008,799,4.885,800,3.565,801,3.303,802,5.276,803,3.048,804,5.806,805,1.758,806,5.276,807,1.979,808,1.979,809,3.565,810,3.048,811,3.048,812,2.314,813,1.979,814,1.979,815,1.979,816,1.979,817,1.979,818,1.979,819,2.314,820,2.314]],["title/dependencies.html",[89,1.84,821,2.59]],["body/dependencies.html",[18,0.021,51,0.4,58,0.819,71,0.12,84,0.01,85,0.01,89,1.024,101,1.318,139,1.156,190,1.842,191,2.073,193,1.669,197,2.073,198,2.073,226,2.073,248,2.073,257,2.073,278,1.842,279,2.807,336,2.073,410,1.669,471,1.842,473,4.607,474,1.842,505,2.073,677,2.073,750,2.073,805,1.842,822,2.425,823,2.425,824,3.695,825,2.425,826,2.425,827,2.425,828,3.695,829,2.425,830,2.425,831,2.425,832,2.425,833,2.425,834,2.425,835,2.425,836,2.425,837,2.425,838,2.425,839,2.425,840,4.476,841,2.425,842,2.425,843,3.695,844,2.425,845,2.425,846,2.425,847,2.425,848,2.425,849,4.476,850,3.695,851,2.425,852,2.425,853,2.425,854,2.425,855,2.425,856,2.425,857,2.425,858,2.425,859,2.425,860,2.425,861,2.425,862,2.425,863,2.425,864,3.695,865,2.425,866,2.425,867,2.425,868,3.695,869,2.425,870,2.425,871,2.425,872,2.425,873,2.425,874,2.425,875,2.425,876,2.425,877,2.425,878,2.425,879,2.425,880,2.425,881,2.425,882,2.425,883,2.425,884,2.425,885,2.425,886,2.425,887,2.425,888,2.425,889,2.425,890,2.425,891,2.425,892,2.425,893,2.425,894,2.425,895,2.425,896,2.425,897,2.425,898,2.425,899,2.425,900,2.425,901,2.425,902,2.425,903,2.425,904,2.425,905,2.425,906,2.425,907,2.425,908,2.425,909,3.695,910,2.425,911,2.425,912,2.425,913,2.425,914,2.425,915,2.425,916,2.425,917,2.425,918,2.425,919,2.425,920,2.425,921,2.425,922,2.425,923,2.425,924,2.425,925,2.425,926,2.425,927,2.425,928,2.425,929,2.425,930,2.425,931,4.476,932,2.425,933,3.695,934,2.425,935,2.425,936,2.425,937,2.425,938,2.425,939,2.425,940,2.425,941,2.425,942,2.425,943,2.425,944,2.425,945,2.425,946,2.425,947,2.425]],["title/miscellaneous/enumerations.html",[948,1.539,949,3.725]],["body/miscellaneous/enumerations.html",[9,0.633,12,3.153,16,3.153,18,0.02,21,3.663,34,1.856,63,2.764,84,0.016,85,0.016,113,3.663,337,4.96,346,3.993,387,5.435,948,2.353,949,3.96,950,4.631,951,4.631,952,4.631,953,5.8,954,4.631,955,5.8]],["title/miscellaneous/functions.html",[948,1.539,956,3.725]],["body/miscellaneous/functions.html",[9,0.654,18,0.018,84,0.017,85,0.017,120,2.28,121,1.908,122,0.94,123,2.144,801,3.634,803,6.011,807,4.091,813,4.091,814,5.495,815,4.091,816,5.495,817,4.091,818,5.061,948,2.431,956,4.091,957,4.091,958,4.784,959,4.784,960,4.784,961,4.784,962,4.784,963,5.918,964,4.784]],["title/index.html",[9,0.414,965,3.028,966,3.028]],["body/index.html",[18,0.018,84,0.018,85,0.018,967,5.636,968,5.636,969,5.636,970,5.636]],["title/modules.html",[88,1.862]],["body/modules.html",[18,0.016,84,0.016,85,0.016,87,2.846,88,1.699,179,3.103,182,2.846,183,2.846,184,2.846,185,2.846,186,2.846,187,2.846,364,3.103,637,2.846,971,7.116,972,7.116,973,7.116,974,7.236,975,5.702,976,5.702]],["title/overview.html",[977,4.224]],["body/overview.html",[2,1.057,18,0.02,52,3.426,84,0.012,85,0.012,87,3.859,88,1.117,89,1.812,90,2.535,91,2.535,92,2.535,93,2.044,94,1.413,95,1.413,111,1.328,147,1.506,179,4.788,180,2.535,181,2.535,182,3.183,183,3.702,184,3.702,185,3.859,186,4.318,187,3.702,261,2.252,357,1.611,364,4.036,365,2.535,366,2.535,367,2.535,368,3.98,448,2.945,456,2.535,457,2.535,461,3.183,465,3.681,495,2.945,499,2.535,500,2.535,554,3.681,563,2.535,564,2.535,565,2.535,612,2.252,637,3.183,641,2.535,642,2.535,643,2.535,644,2.535,687,2.535,778,2.945,787,2.535,788,2.535,977,2.535,978,4.289,979,2.964,980,2.964,981,4.289]],["title/properties.html",[149,1.554,821,2.59]],["body/properties.html",[18,0.02,24,2.756,84,0.018,85,0.018,149,1.935,401,4.121,982,5.424,983,5.424,984,5.424,985,5.424]],["title/miscellaneous/typealiases.html",[948,1.539,986,4.356]],["body/miscellaneous/typealiases.html",[9,0.718,18,0.019,84,0.018,85,0.018,122,1.033,326,3.993,327,5.087,331,4.494,335,4.494,341,5.358,342,5.358,948,2.67,987,5.255,988,6.266]],["title/miscellaneous/variables.html",[948,1.539,989,3.725]],["body/miscellaneous/variables.html",[9,0.556,18,0.021,59,3.677,61,4.522,63,1.941,84,0.015,85,0.015,86,1.239,122,1.244,130,1.62,212,1.825,280,3.677,282,4.058,286,3.482,300,3.482,307,3.094,386,5.121,387,5.121,631,4.058,801,3.094,805,4.058,808,3.482,810,3.482,811,3.482,948,2.069,957,4.567,989,3.482,990,5.341,991,4.072,992,5.341,993,4.072,994,4.072,995,4.072,996,4.072]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":795,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":983,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":937,"title":{},"body":{"dependencies.html":{}}}],["0.1.4",{"_index":923,"title":{},"body":{"dependencies.html":{}}}],["0.10.26",{"_index":920,"title":{},"body":{"dependencies.html":{}}}],["0.10.3",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":876,"title":{},"body":{"dependencies.html":{}}}],["0.3.12",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":875,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":921,"title":{},"body":{"dependencies.html":{}}}],["0.6.3",{"_index":839,"title":{},"body":{"dependencies.html":{}}}],["0.7.6",{"_index":832,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":798,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":806,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":809,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":799,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":796,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":800,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":797,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":812,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":925,"title":{},"body":{"dependencies.html":{}}}],["1.0.4",{"_index":927,"title":{},"body":{"dependencies.html":{}}}],["1.1.0",{"_index":918,"title":{},"body":{"dependencies.html":{}}}],["1.1.22",{"_index":914,"title":{},"body":{"dependencies.html":{}}}],["1.11.0",{"_index":889,"title":{},"body":{"dependencies.html":{}}}],["1.17.3",{"_index":898,"title":{},"body":{"dependencies.html":{}}}],["1.2.1",{"_index":878,"title":{},"body":{"dependencies.html":{}}}],["1.3.5",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["1.4.1",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":883,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":885,"title":{},"body":{"dependencies.html":{}}}],["1.6.22",{"_index":835,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["1.8.14",{"_index":829,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":687,"title":{},"body":{"injectables/SecurityService.html":{},"overview.html":{}}}],["10.0.2",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["14.9.0",{"_index":891,"title":{},"body":{"dependencies.html":{}}}],["16.0.3",{"_index":893,"title":{},"body":{"dependencies.html":{}}}],["17.0.2",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["17.8.4",{"_index":905,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":981,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":837,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["2.2.4",{"_index":907,"title":{},"body":{"dependencies.html":{}}}],["2.3.1",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["2.4.0",{"_index":824,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":30,"title":{},"body":{"controllers/AccountsController.html":{}}}],["3.0.1",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":939,"title":{},"body":{"dependencies.html":{}}}],["3.0.3",{"_index":900,"title":{},"body":{"dependencies.html":{}}}],["3.1.9",{"_index":894,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":924,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":887,"title":{},"body":{"dependencies.html":{}}}],["4.1.12",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":874,"title":{},"body":{"dependencies.html":{}}}],["4.10.4",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["4.3.7",{"_index":908,"title":{},"body":{"dependencies.html":{}}}],["403",{"_index":23,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["5",{"_index":980,"title":{},"body":{"overview.html":{}}}],["5.1.0",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["5.1.6",{"_index":943,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":873,"title":{},"body":{"dependencies.html":{}}}],["5.3.1",{"_index":904,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":978,"title":{},"body":{"overview.html":{}}}],["6.0.1",{"_index":902,"title":{},"body":{"dependencies.html":{}}}],["6.2.1",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["6.4.0",{"_index":822,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":896,"title":{},"body":{"dependencies.html":{}}}],["6.9.1",{"_index":916,"title":{},"body":{"dependencies.html":{}}}],["60s",{"_index":657,"title":{},"body":{"modules/SecurityModule.html":{}}}],["64",{"_index":624,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["64})@apiproperty({type",{"_index":721,"title":{},"body":{"entities/User.html":{}}}],["64})@column({length",{"_index":619,"title":{},"body":{"entities/Role.html":{}}}],["64})@index({unique",{"_index":620,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["7.2.0",{"_index":941,"title":{},"body":{"dependencies.html":{}}}],["8.10.0",{"_index":929,"title":{},"body":{"dependencies.html":{}}}],["8.2.0",{"_index":911,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":979,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":840,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["9.2.2",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["9.3.10",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["ability",{"_index":331,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory.ts",{"_index":327,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory.ts:19",{"_index":330,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilitybuilder",{"_index":332,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilityclass",{"_index":333,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["access",{"_index":39,"title":{},"body":{"controllers/AccountsController.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{}}}],["accesstoken",{"_index":697,"title":{},"body":{"classes/TokenDto.html":{}}}],["account",{"_index":20,"title":{},"body":{"controllers/AccountsController.html":{}}}],["account.'})@apiresponse({status",{"_index":35,"title":{},"body":{"controllers/AccountsController.html":{}}}],["accountname",{"_index":313,"title":{},"body":{"entities/Billing.html":{}}}],["accountnumber",{"_index":314,"title":{},"body":{"entities/Billing.html":{}}}],["accounts",{"_index":8,"title":{},"body":{"controllers/AccountsController.html":{},"entities/Address.html":{},"entities/Billing.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"entities/Profile.html":{},"entities/User.html":{},"controllers/VideosController.html":{}}}],["accounts.controller",{"_index":99,"title":{},"body":{"modules/AccountsModule.html":{}}}],["accounts.service",{"_index":53,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{}}}],["accounts/entities/user.entity",{"_index":535,"title":{},"body":{"entities/Post.html":{}}}],["accountscontroller",{"_index":1,"title":{"controllers/AccountsController.html":{}},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"coverage.html":{}}}],["accountsmodule",{"_index":87,"title":{"modules/AccountsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/SecurityModule.html":{},"modules.html":{},"overview.html":{}}}],["accountsservice",{"_index":52,"title":{"injectables/AccountsService.html":{}},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"injectables/SecurityService.html":{},"coverage.html":{},"overview.html":{}}}],["accounttype",{"_index":315,"title":{},"body":{"entities/Billing.html":{}}}],["action",{"_index":337,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/enumerations.html":{}}}],["addid",{"_index":538,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["address",{"_index":106,"title":{"entities/Address.html":{}},"body":{"modules/AccountsModule.html":{},"entities/Address.html":{},"entities/User.html":{},"coverage.html":{}}}],["address.entity",{"_index":747,"title":{},"body":{"entities/User.html":{}}}],["address.user",{"_index":756,"title":{},"body":{"entities/User.html":{}}}],["address.user)@joincolumn({name",{"_index":714,"title":{},"body":{"entities/User.html":{}}}],["address_id",{"_index":757,"title":{},"body":{"entities/User.html":{}}}],["address_id'})@apiproperty",{"_index":715,"title":{},"body":{"entities/User.html":{}}}],["admin",{"_index":21,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{},"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":987,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amqp",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["amqplib",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":913,"title":{},"body":{"dependencies.html":{}}}],["api/accounts/accounts.service",{"_index":680,"title":{},"body":{"injectables/SecurityService.html":{}}}],["api/accounts/entities/user.entity",{"_index":339,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/SecurityService.html":{}}}],["api/images/images.module",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["api/posts/entities/post.entity",{"_index":340,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["api/posts/posts.module",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["api/videos/videos.module",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["apibody",{"_index":54,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apioperation",{"_index":55,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["apioperation({summary",{"_index":433,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["apiproperty",{"_index":171,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"classes/TokenDto.html":{},"entities/User.html":{}}}],["apiproperty({type",{"_index":617,"title":{},"body":{"entities/Role.html":{}}}],["apiresponse",{"_index":56,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["apitags",{"_index":57,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["apitags('account",{"_index":65,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apitags('images",{"_index":450,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apitags('social",{"_index":556,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('videos",{"_index":780,"title":{},"body":{"controllers/VideosController.html":{}}}],["app",{"_index":964,"title":{},"body":{"miscellaneous/functions.html":{}}}],["app.controller",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["appability",{"_index":342,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["appcontroller",{"_index":176,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":179,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps/.../action.enum.ts",{"_index":950,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../auth.interface.ts",{"_index":990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../casl",{"_index":988,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../constants.ts",{"_index":991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":957,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/.../repl.ts",{"_index":958,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../role.enum.ts",{"_index":951,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../roles.decorator.ts",{"_index":992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/api/src/api/accounts/accounts.controller.ts",{"_index":6,"title":{},"body":{"controllers/AccountsController.html":{},"coverage.html":{}}}],["apps/api/src/api/accounts/accounts.controller.ts:22",{"_index":45,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apps/api/src/api/accounts/accounts.controller.ts:32",{"_index":37,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apps/api/src/api/accounts/accounts.controller.ts:39",{"_index":42,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apps/api/src/api/accounts/accounts.controller.ts:45",{"_index":47,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apps/api/src/api/accounts/accounts.controller.ts:51",{"_index":27,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apps/api/src/api/accounts/accounts.module",{"_index":646,"title":{},"body":{"modules/SecurityModule.html":{}}}],["apps/api/src/api/accounts/accounts.module.ts",{"_index":96,"title":{},"body":{"modules/AccountsModule.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts",{"_index":112,"title":{},"body":{"injectables/AccountsService.html":{},"coverage.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:12",{"_index":132,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:18",{"_index":126,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:22",{"_index":136,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:26",{"_index":137,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:30",{"_index":128,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:34",{"_index":135,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/accounts.service.ts:7",{"_index":119,"title":{},"body":{"injectables/AccountsService.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts",{"_index":148,"title":{},"body":{"entities/Address.html":{},"coverage.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:12",{"_index":164,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:15",{"_index":157,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:18",{"_index":159,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:21",{"_index":158,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:24",{"_index":160,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:28",{"_index":167,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/address.entity.ts:9",{"_index":163,"title":{},"body":{"entities/Address.html":{}}}],["apps/api/src/api/accounts/entities/billing.entity.ts",{"_index":312,"title":{},"body":{"entities/Billing.html":{},"coverage.html":{}}}],["apps/api/src/api/accounts/entities/billing.entity.ts:12",{"_index":319,"title":{},"body":{"entities/Billing.html":{}}}],["apps/api/src/api/accounts/entities/billing.entity.ts:15",{"_index":318,"title":{},"body":{"entities/Billing.html":{}}}],["apps/api/src/api/accounts/entities/billing.entity.ts:18",{"_index":320,"title":{},"body":{"entities/Billing.html":{}}}],["apps/api/src/api/accounts/entities/billing.entity.ts:22",{"_index":322,"title":{},"body":{"entities/Billing.html":{}}}],["apps/api/src/api/accounts/entities/billing.entity.ts:9",{"_index":317,"title":{},"body":{"entities/Billing.html":{}}}],["apps/api/src/api/accounts/entities/profile.entity.ts",{"_index":583,"title":{},"body":{"entities/Profile.html":{},"coverage.html":{}}}],["apps/api/src/api/accounts/entities/profile.entity.ts:12",{"_index":587,"title":{},"body":{"entities/Profile.html":{}}}],["apps/api/src/api/accounts/entities/profile.entity.ts:15",{"_index":589,"title":{},"body":{"entities/Profile.html":{}}}],["apps/api/src/api/accounts/entities/profile.entity.ts:19",{"_index":591,"title":{},"body":{"entities/Profile.html":{}}}],["apps/api/src/api/accounts/entities/profile.entity.ts:9",{"_index":588,"title":{},"body":{"entities/Profile.html":{}}}],["apps/api/src/api/accounts/entities/user.entity",{"_index":614,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts",{"_index":711,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:31",{"_index":725,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:35",{"_index":741,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:39",{"_index":724,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:43",{"_index":727,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:48",{"_index":722,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:53",{"_index":729,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:59",{"_index":735,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:64",{"_index":716,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:69",{"_index":719,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:73",{"_index":732,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:81",{"_index":740,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:86",{"_index":742,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/accounts/entities/user.entity.ts:90",{"_index":726,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/api/images/images.controller.ts",{"_index":428,"title":{},"body":{"controllers/ImagesController.html":{},"coverage.html":{}}}],["apps/api/src/api/images/images.controller.ts:13",{"_index":447,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apps/api/src/api/images/images.controller.ts:18",{"_index":443,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apps/api/src/api/images/images.controller.ts:23",{"_index":445,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apps/api/src/api/images/images.controller.ts:28",{"_index":441,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apps/api/src/api/images/images.controller.ts:33",{"_index":437,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apps/api/src/api/images/images.module.ts",{"_index":458,"title":{},"body":{"modules/ImagesModule.html":{}}}],["apps/api/src/api/images/images.service.ts",{"_index":460,"title":{},"body":{"injectables/ImagesService.html":{},"coverage.html":{}}}],["apps/api/src/api/posts/dto/createposts.dto.ts",{"_index":400,"title":{},"body":{"classes/CreatePostsDto.html":{},"coverage.html":{}}}],["apps/api/src/api/posts/dto/createposts.dto.ts:10",{"_index":406,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["apps/api/src/api/posts/dto/createposts.dto.ts:14",{"_index":405,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["apps/api/src/api/posts/dto/createposts.dto.ts:6",{"_index":407,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["apps/api/src/api/posts/dto/updateposts.dto.ts",{"_index":707,"title":{},"body":{"classes/UpdatePostsDto.html":{},"coverage.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts",{"_index":509,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:22",{"_index":526,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:25",{"_index":528,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:28",{"_index":518,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:31",{"_index":517,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:35",{"_index":516,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:38",{"_index":527,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:41",{"_index":520,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:44",{"_index":529,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/entities/post.entity.ts:47",{"_index":521,"title":{},"body":{"entities/Post.html":{}}}],["apps/api/src/api/posts/posts.controller.ts",{"_index":542,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["apps/api/src/api/posts/posts.controller.ts:13",{"_index":545,"title":{},"body":{"controllers/PostsController.html":{}}}],["apps/api/src/api/posts/posts.controller.ts:18",{"_index":549,"title":{},"body":{"controllers/PostsController.html":{}}}],["apps/api/src/api/posts/posts.controller.ts:23",{"_index":553,"title":{},"body":{"controllers/PostsController.html":{}}}],["apps/api/src/api/posts/posts.controller.ts:28",{"_index":551,"title":{},"body":{"controllers/PostsController.html":{}}}],["apps/api/src/api/posts/posts.controller.ts:33",{"_index":547,"title":{},"body":{"controllers/PostsController.html":{}}}],["apps/api/src/api/posts/posts.module.ts",{"_index":566,"title":{},"body":{"modules/PostsModule.html":{}}}],["apps/api/src/api/posts/posts.service.ts",{"_index":570,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["apps/api/src/api/posts/posts.service.ts:12",{"_index":576,"title":{},"body":{"injectables/PostsService.html":{}}}],["apps/api/src/api/posts/posts.service.ts:16",{"_index":580,"title":{},"body":{"injectables/PostsService.html":{}}}],["apps/api/src/api/posts/posts.service.ts:20",{"_index":577,"title":{},"body":{"injectables/PostsService.html":{}}}],["apps/api/src/api/posts/posts.service.ts:24",{"_index":578,"title":{},"body":{"injectables/PostsService.html":{}}}],["apps/api/src/api/posts/posts.service.ts:28",{"_index":579,"title":{},"body":{"injectables/PostsService.html":{}}}],["apps/api/src/api/posts/posts.service.ts:7",{"_index":574,"title":{},"body":{"injectables/PostsService.html":{}}}],["apps/api/src/api/videos/videos.controller.ts",{"_index":762,"title":{},"body":{"controllers/VideosController.html":{},"coverage.html":{}}}],["apps/api/src/api/videos/videos.controller.ts:13",{"_index":766,"title":{},"body":{"controllers/VideosController.html":{}}}],["apps/api/src/api/videos/videos.controller.ts:18",{"_index":777,"title":{},"body":{"controllers/VideosController.html":{}}}],["apps/api/src/api/videos/videos.controller.ts:23",{"_index":773,"title":{},"body":{"controllers/VideosController.html":{}}}],["apps/api/src/api/videos/videos.controller.ts:28",{"_index":775,"title":{},"body":{"controllers/VideosController.html":{}}}],["apps/api/src/api/videos/videos.controller.ts:33",{"_index":771,"title":{},"body":{"controllers/VideosController.html":{}}}],["apps/api/src/api/videos/videos.controller.ts:38",{"_index":769,"title":{},"body":{"controllers/VideosController.html":{}}}],["apps/api/src/api/videos/videos.module.ts",{"_index":789,"title":{},"body":{"modules/VideosModule.html":{}}}],["apps/api/src/api/videos/videos.service.ts",{"_index":791,"title":{},"body":{"injectables/VideosService.html":{},"coverage.html":{}}}],["apps/api/src/app.controller.ts",{"_index":177,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/api/src/app.module.ts",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/api/src/main.ts",{"_index":801,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/media/media.controller.ts",{"_index":489,"title":{},"body":{"controllers/MediaController.html":{},"coverage.html":{}}}],["apps/api/src/media/media.controller.ts:9",{"_index":493,"title":{},"body":{"controllers/MediaController.html":{}}}],["apps/api/src/media/media.module.ts",{"_index":501,"title":{},"body":{"modules/MediaModule.html":{}}}],["apps/api/src/media/media.service.ts",{"_index":503,"title":{},"body":{"injectables/MediaService.html":{},"coverage.html":{}}}],["apps/api/src/media/media.service.ts:6",{"_index":504,"title":{},"body":{"injectables/MediaService.html":{}}}],["apps/api/src/repl.ts",{"_index":807,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["apps/api/src/security/constants.ts",{"_index":808,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/security/dto/login.dto.ts",{"_index":481,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["apps/api/src/security/dto/login.dto.ts:14",{"_index":483,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/security/dto/login.dto.ts:19",{"_index":485,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/security/dto/login.dto.ts:8",{"_index":486,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/security/dto/register.dto.ts",{"_index":595,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["apps/api/src/security/dto/register.dto.ts:15",{"_index":601,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/security/dto/register.dto.ts:21",{"_index":602,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/security/dto/register.dto.ts:28",{"_index":599,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/security/dto/register.dto.ts:34",{"_index":604,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/security/dto/register.dto.ts:9",{"_index":605,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/security/dto/token.dto.ts",{"_index":696,"title":{},"body":{"classes/TokenDto.html":{},"coverage.html":{}}}],["apps/api/src/security/dto/token.dto.ts:11",{"_index":702,"title":{},"body":{"classes/TokenDto.html":{}}}],["apps/api/src/security/dto/token.dto.ts:5",{"_index":701,"title":{},"body":{"classes/TokenDto.html":{}}}],["apps/api/src/security/dto/token.dto.ts:8",{"_index":700,"title":{},"body":{"classes/TokenDto.html":{}}}],["apps/api/src/security/guards/auth.guard.ts",{"_index":262,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["apps/api/src/security/guards/auth.guard.ts:14",{"_index":268,"title":{},"body":{"guards/AuthGuard.html":{}}}],["apps/api/src/security/guards/auth.guard.ts:17",{"_index":271,"title":{},"body":{"guards/AuthGuard.html":{}}}],["apps/api/src/security/guards/auth.guard.ts:44",{"_index":275,"title":{},"body":{"guards/AuthGuard.html":{}}}],["apps/api/src/security/guards/roles.guard.ts",{"_index":626,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["apps/api/src/security/guards/roles.guard.ts:10",{"_index":629,"title":{},"body":{"guards/RolesGuard.html":{}}}],["apps/api/src/security/guards/roles.guard.ts:7",{"_index":628,"title":{},"body":{"guards/RolesGuard.html":{}}}],["apps/api/src/security/interfaces/auth.interface.ts",{"_index":810,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/security/interfaces/requestwithuser.interface.ts",{"_index":613,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["apps/api/src/security/interfaces/tokenpayload.interface.ts",{"_index":704,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["apps/api/src/security/roles/casl/casl",{"_index":326,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/security/roles/decorators/roles.decorator.ts",{"_index":811,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/security/roles/entities/role.entity.ts",{"_index":615,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["apps/api/src/security/roles/entities/role.entity.ts:14",{"_index":616,"title":{},"body":{"entities/Role.html":{}}}],["apps/api/src/security/roles/entities/role.entity.ts:19",{"_index":621,"title":{},"body":{"entities/Role.html":{}}}],["apps/api/src/security/roles/enum/action.enum.ts",{"_index":952,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/api/src/security/roles/enum/role.enum.ts",{"_index":954,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/api/src/security/roles/roles.module.ts",{"_index":638,"title":{},"body":{"modules/RolesModule.html":{}}}],["apps/api/src/security/security.module.ts",{"_index":645,"title":{},"body":{"modules/SecurityModule.html":{}}}],["apps/api/src/security/security.service.ts",{"_index":658,"title":{},"body":{"injectables/SecurityService.html":{},"coverage.html":{}}}],["apps/api/src/security/security.service.ts:12",{"_index":676,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:21",{"_index":673,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:30",{"_index":669,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:34",{"_index":670,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:38",{"_index":671,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:42",{"_index":667,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:46",{"_index":674,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/security.service.ts:9",{"_index":665,"title":{},"body":{"injectables/SecurityService.html":{}}}],["apps/api/src/security/strategies/local.strategy.ts",{"_index":462,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["apps/api/src/security/strategies/local.strategy.ts:12",{"_index":469,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["apps/api/src/security/strategies/local.strategy.ts:7",{"_index":466,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["appwrite",{"_index":910,"title":{},"body":{"dependencies.html":{}}}],["assigning",{"_index":298,"title":{},"body":{"guards/AuthGuard.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"controllers/ImagesController.html":{},"injectables/LocalStrategy.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SecurityService.html":{},"controllers/VideosController.html":{}}}],["authguard",{"_index":202,"title":{"guards/AuthGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"coverage.html":{}}}],["author",{"_index":401,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{},"properties.html":{}}}],["authorid",{"_index":351,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"entities/Post.html":{}}}],["authservice",{"_index":467,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["autoloadentities",{"_index":426,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["available",{"_index":976,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":584,"title":{},"body":{"entities/Profile.html":{}}}],["await",{"_index":305,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"injectables/PostsService.html":{},"injectables/SecurityService.html":{}}}],["axios",{"_index":505,"title":{},"body":{"injectables/MediaService.html":{},"dependencies.html":{}}}],["axios.get('http://localhost:8081/v1/vhosts",{"_index":507,"title":{},"body":{"injectables/MediaService.html":{}}}],["basic",{"_index":67,"title":{},"body":{"controllers/AccountsController.html":{}}}],["bcrypt",{"_index":677,"title":{},"body":{"injectables/SecurityService.html":{},"dependencies.html":{}}}],["bcrypt.hash(register.password",{"_index":686,"title":{},"body":{"injectables/SecurityService.html":{}}}],["bearer",{"_index":311,"title":{},"body":{"guards/AuthGuard.html":{}}}],["beforeinsert",{"_index":530,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["billing",{"_index":104,"title":{"entities/Billing.html":{}},"body":{"modules/AccountsModule.html":{},"entities/Billing.html":{},"entities/User.html":{},"coverage.html":{}}}],["billing.entity",{"_index":748,"title":{},"body":{"entities/User.html":{}}}],["billing.user",{"_index":758,"title":{},"body":{"entities/User.html":{}}}],["billing.user)@joincolumn({name",{"_index":717,"title":{},"body":{"entities/User.html":{}}}],["billing_id",{"_index":759,"title":{},"body":{"entities/User.html":{}}}],["billing_id'})@apiproperty",{"_index":718,"title":{},"body":{"entities/User.html":{}}}],["bio",{"_index":585,"title":{},"body":{"entities/Profile.html":{}}}],["body",{"_index":494,"title":{},"body":{"controllers/MediaController.html":{}}}],["boolean",{"_index":390,"title":{},"body":{"injectables/ConfigurationService.html":{},"entities/Post.html":{},"guards/RolesGuard.html":{},"entities/User.html":{}}}],["booleans",{"_index":760,"title":{},"body":{"entities/User.html":{}}}],["bootstrap",{"_index":803,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":974,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":971,"title":{},"body":{"modules.html":{}}}],["build",{"_index":343,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["bull",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["cache",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["can(action.manage",{"_index":345,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.read",{"_index":349,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.update",{"_index":350,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["canactivate",{"_index":263,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":269,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["cannot(action.delete",{"_index":353,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["cascade",{"_index":737,"title":{},"body":{"entities/User.html":{}}}],["casl/ability",{"_index":336,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"dependencies.html":{}}}],["caslabilityfactory",{"_index":325,"title":{"injectables/CaslAbilityFactory.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{}}}],["catch",{"_index":309,"title":{},"body":{"guards/AuthGuard.html":{}}}],["chalk",{"_index":805,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["city",{"_index":150,"title":{},"body":{"entities/Address.html":{}}}],["class",{"_index":71,"title":{"classes/CreatePostsDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/TokenDto.html":{},"classes/UpdatePostsDto.html":{}},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":357,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/CreatePostsDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/TokenDto.html":{},"classes/UpdatePostsDto.html":{},"overview.html":{}}}],["classic",{"_index":826,"title":{},"body":{"dependencies.html":{}}}],["clsx",{"_index":877,"title":{},"body":{"dependencies.html":{}}}],["cluster_accountsmodule",{"_index":90,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_exports",{"_index":91,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_providers",{"_index":92,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_configurationmodule",{"_index":365,"title":{},"body":{"modules/ConfigurationModule.html":{},"overview.html":{}}}],["cluster_configurationmodule_exports",{"_index":366,"title":{},"body":{"modules/ConfigurationModule.html":{},"overview.html":{}}}],["cluster_configurationmodule_providers",{"_index":367,"title":{},"body":{"modules/ConfigurationModule.html":{},"overview.html":{}}}],["cluster_imagesmodule",{"_index":456,"title":{},"body":{"modules/ImagesModule.html":{},"overview.html":{}}}],["cluster_imagesmodule_providers",{"_index":457,"title":{},"body":{"modules/ImagesModule.html":{},"overview.html":{}}}],["cluster_mediamodule",{"_index":499,"title":{},"body":{"modules/MediaModule.html":{},"overview.html":{}}}],["cluster_mediamodule_providers",{"_index":500,"title":{},"body":{"modules/MediaModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":563,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":564,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_providers",{"_index":565,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_securitymodule",{"_index":641,"title":{},"body":{"modules/SecurityModule.html":{},"overview.html":{}}}],["cluster_securitymodule_exports",{"_index":644,"title":{},"body":{"modules/SecurityModule.html":{},"overview.html":{}}}],["cluster_securitymodule_imports",{"_index":642,"title":{},"body":{"modules/SecurityModule.html":{},"overview.html":{}}}],["cluster_securitymodule_providers",{"_index":643,"title":{},"body":{"modules/SecurityModule.html":{},"overview.html":{}}}],["cluster_videosmodule",{"_index":787,"title":{},"body":{"modules/VideosModule.html":{},"overview.html":{}}}],["cluster_videosmodule_providers",{"_index":788,"title":{},"body":{"modules/VideosModule.html":{},"overview.html":{}}}],["column",{"_index":168,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Post.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["column()@apiproperty",{"_index":156,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Profile.html":{},"entities/User.html":{}}}],["column()@apiproperty()@exclude",{"_index":728,"title":{},"body":{"entities/User.html":{}}}],["column()@apiproperty({type",{"_index":723,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":720,"title":{},"body":{"entities/User.html":{}}}],["compression",{"_index":879,"title":{},"body":{"dependencies.html":{}}}],["condition",{"_index":291,"title":{},"body":{"guards/AuthGuard.html":{}}}],["configmodule",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule.forroot",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":412,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_host",{"_index":418,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_name",{"_index":423,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_password",{"_index":422,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_port",{"_index":419,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_schema",{"_index":424,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_user",{"_index":420,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configuration.service",{"_index":370,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configurationmodule",{"_index":364,"title":{"modules/ConfigurationModule.html":{}},"body":{"modules/ConfigurationModule.html":{},"modules.html":{},"overview.html":{}}}],["configurationservice",{"_index":368,"title":{"injectables/ConfigurationService.html":{}},"body":{"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"coverage.html":{},"overview.html":{}}}],["connection",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["const",{"_index":285,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/LocalStrategy.html":{},"injectables/MediaService.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{}}}],["constants",{"_index":281,"title":{},"body":{"guards/AuthGuard.html":{},"modules/SecurityModule.html":{}}}],["constructor",{"_index":116,"title":{},"body":{"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/ConfigurationService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/SecurityService.html":{}}}],["constructor(authservice",{"_index":464,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(env",{"_index":375,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["constructor(jwtservice",{"_index":265,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(postsrepository",{"_index":573,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":72,"title":{},"body":{"controllers/AccountsController.html":{},"guards/AuthGuard.html":{},"controllers/ImagesController.html":{},"injectables/LocalStrategy.html":{},"controllers/MediaController.html":{},"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"controllers/VideosController.html":{}}}],["constructor(reflector",{"_index":627,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(userrepository",{"_index":117,"title":{},"body":{"injectables/AccountsService.html":{}}}],["constructor(userservice",{"_index":664,"title":{},"body":{"injectables/SecurityService.html":{}}}],["content",{"_index":402,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{}}}],["context",{"_index":272,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":289,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":288,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":292,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AccountsController.html":{},"controllers/AppController.html":{},"controllers/ImagesController.html":{},"controllers/MediaController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}},"body":{"controllers/AccountsController.html":{},"controllers/AppController.html":{},"controllers/ImagesController.html":{},"controllers/MediaController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{},"coverage.html":{}}}],["controller('accounts",{"_index":69,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["controller('media",{"_index":497,"title":{},"body":{"controllers/MediaController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"overview.html":{}}}],["cookie",{"_index":881,"title":{},"body":{"dependencies.html":{}}}],["country",{"_index":151,"title":{},"body":{"entities/Address.html":{}}}],["county",{"_index":152,"title":{},"body":{"entities/Address.html":{}}}],["cover",{"_index":586,"title":{},"body":{"entities/Profile.html":{}}}],["coverage",{"_index":792,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cpx",{"_index":884,"title":{},"body":{"dependencies.html":{}}}],["create",{"_index":113,"title":{},"body":{"injectables/AccountsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/VideosController.html":{},"miscellaneous/enumerations.html":{}}}],["create(user",{"_index":125,"title":{},"body":{"injectables/AccountsService.html":{}}}],["created",{"_index":75,"title":{},"body":{"controllers/AccountsController.html":{}}}],["created.'})@apioperation({summary",{"_index":33,"title":{},"body":{"controllers/AccountsController.html":{}}}],["createdat",{"_index":510,"title":{},"body":{"entities/Post.html":{}}}],["createforuser",{"_index":328,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createforuser(user",{"_index":329,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createposts.dto",{"_index":709,"title":{},"body":{"classes/UpdatePostsDto.html":{}}}],["createpostsdto",{"_index":399,"title":{"classes/CreatePostsDto.html":{}},"body":{"classes/CreatePostsDto.html":{},"classes/UpdatePostsDto.html":{},"coverage.html":{}}}],["crypto",{"_index":886,"title":{},"body":{"dependencies.html":{}}}],["csurf",{"_index":888,"title":{},"body":{"dependencies.html":{}}}],["database",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["database/database",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["database_host",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["database_name",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["database_password",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["database_port",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["database_schema",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["database_user",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":182,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":519,"title":{},"body":{"entities/Post.html":{}}}],["decorators",{"_index":17,"title":{},"body":{"controllers/AccountsController.html":{},"entities/Address.html":{},"entities/Billing.html":{},"classes/CreatePostsDto.html":{},"controllers/ImagesController.html":{},"classes/LoginDto.html":{},"controllers/MediaController.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"classes/TokenDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{}}}],["default",{"_index":386,"title":{},"body":{"injectables/ConfigurationService.html":{},"entities/Role.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":377,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["defaultstrategy",{"_index":652,"title":{},"body":{"modules/SecurityModule.html":{}}}],["defined",{"_index":26,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"controllers/ImagesController.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{}}}],["delete",{"_index":12,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/VideosController.html":{},"miscellaneous/enumerations.html":{}}}],["delete('delete",{"_index":83,"title":{},"body":{"controllers/AccountsController.html":{}}}],["delete('image:delete",{"_index":455,"title":{},"body":{"controllers/ImagesController.html":{}}}],["delete('image:delete:soft",{"_index":454,"title":{},"body":{"controllers/ImagesController.html":{}}}],["delete('post:delete",{"_index":562,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('post:delete:soft",{"_index":561,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('video:delete",{"_index":786,"title":{},"body":{"controllers/VideosController.html":{}}}],["delete('video:delete:soft",{"_index":785,"title":{},"body":{"controllers/VideosController.html":{}}}],["deletedat",{"_index":511,"title":{},"body":{"entities/Post.html":{}}}],["dependencies",{"_index":89,"title":{"dependencies.html":{}},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/ImagesModule.html":{},"modules/MediaModule.html":{},"modules/PostsModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":24,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Role.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"properties.html":{}}}],["details",{"_index":360,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["detection#use",{"_index":356,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["detectsubjecttype",{"_index":361,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["discord",{"_index":922,"title":{},"body":{"dependencies.html":{}}}],["discord.js",{"_index":890,"title":{},"body":{"dependencies.html":{}}}],["docker",{"_index":912,"title":{},"body":{"dependencies.html":{}}}],["docs",{"_index":970,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":793,"title":{},"body":{"coverage.html":{}}}],["docusaurus/core",{"_index":823,"title":{},"body":{"dependencies.html":{}}}],["docusaurus/preset",{"_index":825,"title":{},"body":{"dependencies.html":{}}}],["dom",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["dotenv",{"_index":892,"title":{},"body":{"dependencies.html":{}}}],["dto/login.dto",{"_index":679,"title":{},"body":{"injectables/SecurityService.html":{}}}],["dto/register.dto",{"_index":678,"title":{},"body":{"injectables/SecurityService.html":{}}}],["ejs",{"_index":257,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["elliptic",{"_index":895,"title":{},"body":{"dependencies.html":{}}}],["email",{"_index":131,"title":{},"body":{"injectables/AccountsService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["emitter",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["entities",{"_index":147,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"modules/DatabaseModule.html":{},"entities/Post.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/address.entity",{"_index":107,"title":{},"body":{"modules/AccountsModule.html":{}}}],["entities/billing.entity",{"_index":105,"title":{},"body":{"modules/AccountsModule.html":{}}}],["entities/post.entity",{"_index":568,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["entities/profile.entity",{"_index":103,"title":{},"body":{"modules/AccountsModule.html":{}}}],["entities/role.entity",{"_index":639,"title":{},"body":{"modules/RolesModule.html":{}}}],["entities/user.entity",{"_index":102,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{}}}],["entity",{"_index":146,"title":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Post.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Post.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('address",{"_index":173,"title":{},"body":{"entities/Address.html":{}}}],["entity('billing",{"_index":323,"title":{},"body":{"entities/Billing.html":{}}}],["entity('post",{"_index":536,"title":{},"body":{"entities/Post.html":{}}}],["entity('profile",{"_index":592,"title":{},"body":{"entities/Profile.html":{}}}],["entity('roles",{"_index":622,"title":{},"body":{"entities/Role.html":{}}}],["entity('user",{"_index":753,"title":{},"body":{"entities/User.html":{}}}],["enum/action.enum",{"_index":338,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["enumerations",{"_index":949,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":379,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["everything",{"_index":348,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["exclude",{"_index":749,"title":{},"body":{"entities/User.html":{}}}],["executioncontext",{"_index":270,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["expires_in",{"_index":698,"title":{},"body":{"classes/TokenDto.html":{}}}],["expiresin",{"_index":656,"title":{},"body":{"modules/SecurityModule.html":{}}}],["export",{"_index":70,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{}}}],["exports",{"_index":98,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ConfigurationModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{}}}],["express",{"_index":279,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/RequestWithUser.html":{},"dependencies.html":{}}}],["extends",{"_index":476,"title":{},"body":{"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdatePostsDto.html":{}}}],["extensions",{"_index":256,"title":{},"body":{"modules/AppModule.html":{}}}],["extractsubjecttype",{"_index":334,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["extracttokenfromheader",{"_index":264,"title":{},"body":{"guards/AuthGuard.html":{}}}],["extracttokenfromheader(request",{"_index":273,"title":{},"body":{"guards/AuthGuard.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"coverage.html":{}}}],["findone",{"_index":114,"title":{},"body":{"injectables/AccountsService.html":{}}}],["findone(username",{"_index":129,"title":{},"body":{"injectables/AccountsService.html":{}}}],["firstname",{"_index":596,"title":{},"body":{"classes/RegisterDto.html":{},"entities/User.html":{}}}],["forbidden",{"_index":77,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["forbidden.'})@delete('delete",{"_index":25,"title":{},"body":{"controllers/AccountsController.html":{}}}],["forbidden.'})@delete('image:delete",{"_index":436,"title":{},"body":{"controllers/ImagesController.html":{}}}],["forbidden.'})@delete('image:delete:soft",{"_index":440,"title":{},"body":{"controllers/ImagesController.html":{}}}],["forbidden.'})@delete('post:delete",{"_index":546,"title":{},"body":{"controllers/PostsController.html":{}}}],["forbidden.'})@delete('post:delete:soft",{"_index":550,"title":{},"body":{"controllers/PostsController.html":{}}}],["forbidden.'})@delete('video:delete",{"_index":768,"title":{},"body":{"controllers/VideosController.html":{}}}],["forbidden.'})@delete('video:delete:soft",{"_index":770,"title":{},"body":{"controllers/VideosController.html":{}}}],["forbidden.'})@get",{"_index":41,"title":{},"body":{"controllers/AccountsController.html":{}}}],["forbidden.'})@get('image:view",{"_index":446,"title":{},"body":{"controllers/ImagesController.html":{}}}],["forbidden.'})@get('post:read",{"_index":548,"title":{},"body":{"controllers/PostsController.html":{}}}],["forbidden.'})@get('video:watch",{"_index":776,"title":{},"body":{"controllers/VideosController.html":{}}}],["forbidden.'})@post('image:upload",{"_index":444,"title":{},"body":{"controllers/ImagesController.html":{}}}],["forbidden.'})@post('login",{"_index":36,"title":{},"body":{"controllers/AccountsController.html":{}}}],["forbidden.'})@post('post:create",{"_index":544,"title":{},"body":{"controllers/PostsController.html":{}}}],["forbidden.'})@post('register",{"_index":44,"title":{},"body":{"controllers/AccountsController.html":{}}}],["forbidden.'})@post('video:create",{"_index":765,"title":{},"body":{"controllers/VideosController.html":{}}}],["forbidden.'})@post('video:upload",{"_index":774,"title":{},"body":{"controllers/VideosController.html":{}}}],["forbidden.'})@put('image:update",{"_index":442,"title":{},"body":{"controllers/ImagesController.html":{}}}],["forbidden.'})@put('post:update",{"_index":552,"title":{},"body":{"controllers/PostsController.html":{}}}],["forbidden.'})@put('update",{"_index":46,"title":{},"body":{"controllers/AccountsController.html":{}}}],["forbidden.'})@put('video:update",{"_index":772,"title":{},"body":{"controllers/VideosController.html":{}}}],["forgotpassword",{"_index":659,"title":{},"body":{"injectables/SecurityService.html":{}}}],["function",{"_index":802,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":956,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('image:view",{"_index":451,"title":{},"body":{"controllers/ImagesController.html":{}}}],["get('post:read",{"_index":559,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('v1/vhosts",{"_index":492,"title":{},"body":{"controllers/MediaController.html":{}}}],["get('video:watch",{"_index":782,"title":{},"body":{"controllers/VideosController.html":{}}}],["get(key",{"_index":380,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getall",{"_index":115,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getarray",{"_index":372,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getarray(key",{"_index":383,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getboolean",{"_index":373,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getboolean(key",{"_index":388,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getnumber",{"_index":374,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getnumber(key",{"_index":391,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getpost",{"_index":571,"title":{},"body":{"injectables/PostsService.html":{}}}],["getposts",{"_index":572,"title":{},"body":{"injectables/PostsService.html":{}}}],["getting",{"_index":965,"title":{"index.html":{}},"body":{}}],["getvhosts",{"_index":491,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["global",{"_index":654,"title":{},"body":{"modules/SecurityModule.html":{}}}],["graph",{"_index":975,"title":{},"body":{"modules.html":{}}}],["grpc",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["grpc/grpc",{"_index":827,"title":{},"body":{"dependencies.html":{}}}],["grpc/proto",{"_index":830,"title":{},"body":{"dependencies.html":{}}}],["grpc_host",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["grpc_package",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["grpc_proto_path",{"_index":239,"title":{},"body":{"modules/AppModule.html":{}}}],["guard",{"_index":260,"title":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":261,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["guest",{"_index":955,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hads",{"_index":899,"title":{},"body":{"dependencies.html":{}}}],["handlers",{"_index":303,"title":{},"body":{"guards/AuthGuard.html":{}}}],["hard",{"_index":434,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["harddelete",{"_index":429,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["hashedpassword",{"_index":685,"title":{},"body":{"injectables/SecurityService.html":{}}}],["helmet",{"_index":901,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":301,"title":{},"body":{"guards/AuthGuard.html":{}}}],["host",{"_index":417,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["https://casl.js.org/v5/en/guide/subject",{"_index":355,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["id",{"_index":512,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["id'})@apiproperty({description",{"_index":523,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["identifier",{"_index":525,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["image",{"_index":435,"title":{},"body":{"controllers/ImagesController.html":{}}}],["image'})@apiresponse({status",{"_index":439,"title":{},"body":{"controllers/ImagesController.html":{}}}],["images.controller",{"_index":459,"title":{},"body":{"modules/ImagesModule.html":{}}}],["images.service",{"_index":449,"title":{},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{}}}],["imagescontroller",{"_index":427,"title":{"controllers/ImagesController.html":{}},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"coverage.html":{}}}],["imagesmodule",{"_index":183,"title":{"modules/ImagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ImagesModule.html":{},"modules.html":{},"overview.html":{}}}],["imagesservice",{"_index":448,"title":{"injectables/ImagesService.html":{}},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"coverage.html":{},"overview.html":{}}}],["implements",{"_index":284,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":48,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{}}}],["imports",{"_index":108,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"controllers/ImagesController.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":963,"title":{},"body":{"miscellaneous/functions.html":{}}}],["infersubjects",{"_index":335,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{}}}],["inject",{"_index":414,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["injectable",{"_index":110,"title":{"injectables/AccountsService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"injectables/MediaService.html":{},"injectables/PostsService.html":{},"injectables/SecurityService.html":{},"injectables/VideosService.html":{}},"body":{"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"injectables/MediaService.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"injectables/VideosService.html":{},"coverage.html":{}}}],["injectables",{"_index":111,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"injectables/MediaService.html":{},"injectables/PostsService.html":{},"injectables/SecurityService.html":{},"injectables/VideosService.html":{},"overview.html":{}}}],["injectrepository",{"_index":138,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":581,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(user",{"_index":140,"title":{},"body":{"injectables/AccountsService.html":{}}}],["interface",{"_index":610,"title":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":612,"title":{},"body":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"overview.html":{}}}],["interfaces/auth.interface",{"_index":283,"title":{},"body":{"guards/AuthGuard.html":{}}}],["ioredis",{"_index":903,"title":{},"body":{"dependencies.html":{}}}],["is_public_key",{"_index":282,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isadmin",{"_index":712,"title":{},"body":{"entities/User.html":{}}}],["isemail",{"_index":487,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isglobal",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":408,"title":{},"body":{"classes/CreatePostsDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty()@isstring()@minlength(16)@apiproperty",{"_index":603,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isnotempty()@isstring()@minlength(3)@apiproperty",{"_index":600,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isnotempty()@isstring()@minlength(8)@isemail()@apiproperty",{"_index":598,"title":{},"body":{"classes/RegisterDto.html":{}}}],["ispublic",{"_index":286,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ispublished",{"_index":354,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"entities/Post.html":{}}}],["isstring",{"_index":409,"title":{},"body":{"classes/CreatePostsDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isnotempty",{"_index":404,"title":{},"body":{"classes/CreatePostsDto.html":{}}}],["isstring()@isnotempty()@apiproperty",{"_index":484,"title":{},"body":{"classes/LoginDto.html":{}}}],["isstring()@isnotempty()@isemail()@apiproperty",{"_index":482,"title":{},"body":{"classes/LoginDto.html":{}}}],["item",{"_index":362,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["item.constructor",{"_index":363,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["joi",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.number().required",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":252,"title":{},"body":{"modules/AppModule.html":{}}}],["joincolumn",{"_index":531,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["jointable",{"_index":743,"title":{},"body":{"entities/User.html":{}}}],["js",{"_index":828,"title":{},"body":{"dependencies.html":{}}}],["js/react",{"_index":834,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":226,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["jwt_expiration_time",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_secret",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtconstants",{"_index":280,"title":{},"body":{"guards/AuthGuard.html":{},"modules/SecurityModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":308,"title":{},"body":{"guards/AuthGuard.html":{},"modules/SecurityModule.html":{}}}],["jwtmodule",{"_index":648,"title":{},"body":{"modules/SecurityModule.html":{}}}],["jwtmodule.register",{"_index":653,"title":{},"body":{"modules/SecurityModule.html":{}}}],["jwtservice",{"_index":266,"title":{},"body":{"guards/AuthGuard.html":{}}}],["k",{"_index":393,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["kafka",{"_index":245,"title":{},"body":{"modules/AppModule.html":{}}}],["kafka_client_id",{"_index":247,"title":{},"body":{"modules/AppModule.html":{}}}],["kafka_host",{"_index":246,"title":{},"body":{"modules/AppModule.html":{}}}],["kafkajs",{"_index":906,"title":{},"body":{"dependencies.html":{}}}],["key",{"_index":382,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["lastname",{"_index":597,"title":{},"body":{"classes/RegisterDto.html":{},"entities/User.html":{}}}],["length",{"_index":625,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["libs/.../microservice.ts",{"_index":959,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../nodemailer.ts",{"_index":960,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../swagger.ts",{"_index":961,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/configuration/src/configuration.module.ts",{"_index":369,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["libs/configuration/src/configuration.service.ts",{"_index":371,"title":{},"body":{"injectables/ConfigurationService.html":{},"coverage.html":{}}}],["libs/configuration/src/configuration.service.ts:10",{"_index":381,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["libs/configuration/src/configuration.service.ts:14",{"_index":392,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["libs/configuration/src/configuration.service.ts:18",{"_index":389,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["libs/configuration/src/configuration.service.ts:22",{"_index":385,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["libs/configuration/src/configuration.service.ts:4",{"_index":378,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["libs/configuration/src/function/microservice.ts",{"_index":813,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/configuration/src/function/nodemailer.ts",{"_index":815,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/configuration/src/function/swagger.ts",{"_index":817,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/database/src/database.module.ts",{"_index":411,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["license",{"_index":984,"title":{},"body":{"properties.html":{}}}],["literal",{"_index":376,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["load",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["loader",{"_index":831,"title":{},"body":{"dependencies.html":{}}}],["local",{"_index":474,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/SecurityModule.html":{},"dependencies.html":{}}}],["localstrategy",{"_index":461,"title":{"injectables/LocalStrategy.html":{}},"body":{"injectables/LocalStrategy.html":{},"modules/SecurityModule.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":13,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/SecurityService.html":{}}}],["login(login",{"_index":668,"title":{},"body":{"injectables/SecurityService.html":{}}}],["login.password",{"_index":694,"title":{},"body":{"injectables/SecurityService.html":{}}}],["logindto",{"_index":480,"title":{"classes/LoginDto.html":{}},"body":{"classes/LoginDto.html":{},"injectables/SecurityService.html":{},"coverage.html":{}}}],["logout",{"_index":660,"title":{},"body":{"injectables/SecurityService.html":{}}}],["manage",{"_index":953,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["management",{"_index":66,"title":{},"body":{"controllers/AccountsController.html":{}}}],["manager",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["manytomany",{"_index":744,"title":{},"body":{"entities/User.html":{}}}],["manytomany(undefined",{"_index":736,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":532,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":514,"title":{},"body":{"entities/Post.html":{}}}],["matching",{"_index":85,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":618,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["mdx",{"_index":833,"title":{},"body":{"dependencies.html":{}}}],["media",{"_index":490,"title":{},"body":{"controllers/MediaController.html":{}}}],["media.controller",{"_index":502,"title":{},"body":{"modules/MediaModule.html":{}}}],["media.service",{"_index":496,"title":{},"body":{"controllers/MediaController.html":{},"modules/MediaModule.html":{}}}],["media/media.module",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["mediacontroller",{"_index":488,"title":{"controllers/MediaController.html":{}},"body":{"controllers/MediaController.html":{},"modules/MediaModule.html":{},"coverage.html":{}}}],["mediamodule",{"_index":184,"title":{"modules/MediaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MediaModule.html":{},"modules.html":{},"overview.html":{}}}],["mediaservice",{"_index":495,"title":{"injectables/MediaService.html":{}},"body":{"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"coverage.html":{},"overview.html":{}}}],["metadata",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"controllers/ImagesController.html":{},"injectables/LocalStrategy.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"controllers/VideosController.html":{}}}],["microservices",{"_index":814,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["minlength",{"_index":606,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minlength(16",{"_index":609,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minlength(3",{"_index":607,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minlength(8",{"_index":608,"title":{},"body":{"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":948,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":86,"title":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/ImagesModule.html":{},"modules/MediaModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/ImagesModule.html":{},"modules/MediaModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":88,"title":{"modules.html":{}},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/ImagesModule.html":{},"modules/MediaModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{},"modules.html":{},"overview.html":{}}}],["mqtt",{"_index":248,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["mqtt_host",{"_index":249,"title":{},"body":{"modules/AppModule.html":{}}}],["name",{"_index":121,"title":{},"body":{"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/LocalStrategy.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["nestjs/axios",{"_index":836,"title":{},"body":{"dependencies.html":{}}}],["nestjs/bull",{"_index":838,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":51,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/cqrs",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["nestjs/event",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":278,"title":{},"body":{"guards/AuthGuard.html":{},"modules/SecurityModule.html":{},"dependencies.html":{}}}],["nestjs/microservices",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":471,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/SecurityModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":58,"title":{},"body":{"controllers/AccountsController.html":{},"entities/Address.html":{},"entities/Billing.html":{},"controllers/ImagesController.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"classes/TokenDto.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["nestjs/throttler",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":101,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/RolesModule.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":43,"title":{},"body":{"controllers/AccountsController.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/SecurityService.html":{},"controllers/VideosController.html":{},"coverage.html":{}}}],["node",{"_index":909,"title":{},"body":{"dependencies.html":{}}}],["node_port",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["nodemailer",{"_index":915,"title":{},"body":{"dependencies.html":{}}}],["npm",{"_index":968,"title":{},"body":{"index.html":{}}}],["null",{"_index":684,"title":{},"body":{"injectables/SecurityService.html":{}}}],["number",{"_index":161,"title":{},"body":{"entities/Address.html":{},"injectables/ConfigurationService.html":{},"classes/TokenDto.html":{}}}],["number(this.get(key",{"_index":396,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["nxie",{"_index":967,"title":{},"body":{"index.html":{}}}],["object",{"_index":300,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["onetomany",{"_index":745,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":730,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":169,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Profile.html":{},"entities/User.html":{}}}],["onetoone(undefined",{"_index":165,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Profile.html":{},"entities/User.html":{}}}],["only]'})@apiresponse({status",{"_index":22,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["optional",{"_index":123,"title":{},"body":{"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":95,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/ImagesModule.html":{},"modules/MediaModule.html":{},"modules/PostsModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{},"overview.html":{}}}],["ovenlivekit",{"_index":917,"title":{},"body":{"dependencies.html":{}}}],["ovenplayer",{"_index":919,"title":{},"body":{"dependencies.html":{}}}],["overview",{"_index":977,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":821,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":120,"title":{},"body":{"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"miscellaneous/functions.html":{}}}],["parser",{"_index":882,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":708,"title":{},"body":{"classes/UpdatePostsDto.html":{}}}],["partialtype(createpostsdto",{"_index":710,"title":{},"body":{"classes/UpdatePostsDto.html":{}}}],["passport",{"_index":473,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":647,"title":{},"body":{"modules/SecurityModule.html":{}}}],["passportmodule.register",{"_index":651,"title":{},"body":{"modules/SecurityModule.html":{}}}],["passportstrategy",{"_index":470,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":477,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["password",{"_index":421,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/SecurityService.html":{},"entities/User.html":{}}}],["path",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":299,"title":{},"body":{"guards/AuthGuard.html":{}}}],["permissions",{"_index":623,"title":{},"body":{"entities/Role.html":{}}}],["pg",{"_index":928,"title":{},"body":{"dependencies.html":{}}}],["port",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["post",{"_index":49,"title":{"entities/Post.html":{}},"body":{"controllers/AccountsController.html":{},"injectables/CaslAbilityFactory.html":{},"controllers/ImagesController.html":{},"controllers/MediaController.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"coverage.html":{}}}],["post'})@apiresponse({status",{"_index":543,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('image:upload",{"_index":453,"title":{},"body":{"controllers/ImagesController.html":{}}}],["post('login",{"_index":79,"title":{},"body":{"controllers/AccountsController.html":{}}}],["post('post:create",{"_index":558,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('register",{"_index":78,"title":{},"body":{"controllers/AccountsController.html":{}}}],["post('video:create",{"_index":781,"title":{},"body":{"controllers/VideosController.html":{}}}],["post('video:upload",{"_index":784,"title":{},"body":{"controllers/VideosController.html":{}}}],["post.authorid",{"_index":731,"title":{},"body":{"entities/User.html":{}}}],["postcode",{"_index":153,"title":{},"body":{"entities/Address.html":{}}}],["postgres",{"_index":416,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["posts",{"_index":557,"title":{},"body":{"controllers/PostsController.html":{},"entities/User.html":{}}}],["posts.controller",{"_index":567,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":555,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/entities/post.entity",{"_index":752,"title":{},"body":{"entities/User.html":{}}}],["postscontroller",{"_index":541,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":185,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":575,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":554,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/MediaController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["primarycolumn",{"_index":170,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Post.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["primarycolumn('uuid",{"_index":522,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["primarycolumn()@apiproperty",{"_index":162,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Profile.html":{}}}],["prism",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["private",{"_index":141,"title":{},"body":{"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/ConfigurationService.html":{},"injectables/PostsService.html":{}}}],["profile",{"_index":14,"title":{"entities/Profile.html":{}},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Profile.html":{},"entities/User.html":{},"coverage.html":{}}}],["profile'})@apiresponse({status",{"_index":40,"title":{},"body":{"controllers/AccountsController.html":{}}}],["profile.entity",{"_index":746,"title":{},"body":{"entities/User.html":{}}}],["profile.user",{"_index":754,"title":{},"body":{"entities/User.html":{}}}],["profile.user)@joincolumn({name",{"_index":733,"title":{},"body":{"entities/User.html":{}}}],["profile_id",{"_index":755,"title":{},"body":{"entities/User.html":{}}}],["profile_id'})@apiproperty",{"_index":734,"title":{},"body":{"entities/User.html":{}}}],["promise",{"_index":134,"title":{},"body":{"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SecurityService.html":{}}}],["promise.resolve(undefined",{"_index":145,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/PostsService.html":{},"injectables/SecurityService.html":{}}}],["properties",{"_index":149,"title":{"properties.html":{}},"body":{"entities/Address.html":{},"entities/Billing.html":{},"classes/CreatePostsDto.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"properties.html":{}}}],["propertyno",{"_index":154,"title":{},"body":{"entities/Address.html":{}}}],["provide",{"_index":258,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":97,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/ImagesModule.html":{},"modules/MediaModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{}}}],["public",{"_index":59,"title":{},"body":{"controllers/AccountsController.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@apiresponse({status",{"_index":29,"title":{},"body":{"controllers/AccountsController.html":{}}}],["put",{"_index":50,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["put('image:update",{"_index":452,"title":{},"body":{"controllers/ImagesController.html":{}}}],["put('post:update",{"_index":560,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('update",{"_index":81,"title":{},"body":{"controllers/AccountsController.html":{}}}],["put('video:update",{"_index":783,"title":{},"body":{"controllers/VideosController.html":{}}}],["rabbitmq",{"_index":240,"title":{},"body":{"modules/AppModule.html":{}}}],["rabbitmq_host",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["rabbitmq_password",{"_index":244,"title":{},"body":{"modules/AppModule.html":{}}}],["rabbitmq_queue",{"_index":242,"title":{},"body":{"modules/AppModule.html":{}}}],["rabbitmq_username",{"_index":243,"title":{},"body":{"modules/AppModule.html":{}}}],["react",{"_index":931,"title":{},"body":{"dependencies.html":{}}}],["read",{"_index":346,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{},"miscellaneous/enumerations.html":{}}}],["readonly",{"_index":73,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"controllers/ImagesController.html":{},"injectables/LocalStrategy.html":{},"controllers/MediaController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["record",{"_index":31,"title":{},"body":{"controllers/AccountsController.html":{}}}],["redis",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_host",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_password",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_port",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_username",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["reflect",{"_index":935,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":267,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":661,"title":{},"body":{"injectables/SecurityService.html":{}}}],["refreshtoken",{"_index":699,"title":{},"body":{"classes/TokenDto.html":{}}}],["register",{"_index":15,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/SecurityService.html":{}}}],["register(register",{"_index":672,"title":{},"body":{"injectables/SecurityService.html":{}}}],["register.email",{"_index":691,"title":{},"body":{"injectables/SecurityService.html":{}}}],["register.username",{"_index":689,"title":{},"body":{"injectables/SecurityService.html":{}}}],["registerdto",{"_index":594,"title":{"classes/RegisterDto.html":{}},"body":{"classes/RegisterDto.html":{},"injectables/SecurityService.html":{},"coverage.html":{}}}],["registration",{"_index":68,"title":{},"body":{"controllers/AccountsController.html":{}}}],["render",{"_index":178,"title":{},"body":{"controllers/AppController.html":{}}}],["renderer",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["renderpath",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["repository",{"_index":118,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/PostsService.html":{}}}],["request",{"_index":274,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/RequestWithUser.html":{}}}],["request.headers.authorization?.split",{"_index":310,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request['user",{"_index":304,"title":{},"body":{"guards/AuthGuard.html":{}}}],["requestwithuser",{"_index":611,"title":{"interfaces/RequestWithUser.html":{}},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["require('chalk",{"_index":993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requiredroles",{"_index":633,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":635,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":94,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/ImagesModule.html":{},"modules/MediaModule.html":{},"modules/PostsModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{},"overview.html":{}}}],["resetpassword",{"_index":662,"title":{},"body":{"injectables/SecurityService.html":{}}}],["response",{"_index":506,"title":{},"body":{"injectables/MediaService.html":{}}}],["response.data",{"_index":508,"title":{},"body":{"injectables/MediaService.html":{}}}],["result",{"_index":683,"title":{},"body":{"injectables/SecurityService.html":{}}}],["results",{"_index":84,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":142,"title":{},"body":{"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"injectables/LocalStrategy.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{}}}],["returns",{"_index":28,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"controllers/ImagesController.html":{},"injectables/LocalStrategy.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"controllers/VideosController.html":{}}}],["rimraf",{"_index":938,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":63,"title":{"entities/Role.html":{}},"body":{"controllers/AccountsController.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["roles",{"_index":61,"title":{},"body":{"controllers/AccountsController.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":82,"title":{},"body":{"controllers/AccountsController.html":{}}}],["roles(role.admin)@apioperation({summary",{"_index":19,"title":{},"body":{"controllers/AccountsController.html":{}}}],["roles(role.user",{"_index":80,"title":{},"body":{"controllers/AccountsController.html":{}}}],["roles(role.user)@apioperation({summary",{"_index":38,"title":{},"body":{"controllers/AccountsController.html":{}}}],["roles/decorators/roles.decorator",{"_index":632,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles/entities/role.entity",{"_index":630,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles/roles.module",{"_index":650,"title":{},"body":{"modules/SecurityModule.html":{}}}],["roles_key",{"_index":631,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":204,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesmodule",{"_index":637,"title":{"modules/RolesModule.html":{}},"body":{"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"modules.html":{},"overview.html":{}}}],["rootpath",{"_index":251,"title":{},"body":{"modules/AppModule.html":{}}}],["route",{"_index":302,"title":{},"body":{"guards/AuthGuard.html":{}}}],["run",{"_index":969,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":940,"title":{},"body":{"dependencies.html":{}}}],["schema",{"_index":174,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"modules/DatabaseModule.html":{},"entities/Post.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["secret",{"_index":307,"title":{},"body":{"guards/AuthGuard.html":{},"modules/SecurityModule.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["security.service",{"_index":475,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/SecurityModule.html":{}}}],["security/guards/auth.guard",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["security/guards/roles.guard",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["security/interfaces/auth.interface",{"_index":60,"title":{},"body":{"controllers/AccountsController.html":{}}}],["security/roles/decorators/roles.decorator",{"_index":62,"title":{},"body":{"controllers/AccountsController.html":{}}}],["security/roles/entities/role.entity",{"_index":751,"title":{},"body":{"entities/User.html":{}}}],["security/roles/enum/role.enum",{"_index":64,"title":{},"body":{"controllers/AccountsController.html":{}}}],["security/security.module",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["securitymodule",{"_index":186,"title":{"modules/SecurityModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SecurityModule.html":{},"modules.html":{},"overview.html":{}}}],["securityservice",{"_index":465,"title":{"injectables/SecurityService.html":{}},"body":{"injectables/LocalStrategy.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"coverage.html":{},"overview.html":{}}}],["see",{"_index":290,"title":{},"body":{"guards/AuthGuard.html":{}}}],["separator",{"_index":384,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["servestaticmodule",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":250,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticoptions",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["session",{"_index":897,"title":{},"body":{"dependencies.html":{}}}],["setmetadata(is_public_key",{"_index":994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setupnodemailer",{"_index":816,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswagger",{"_index":818,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswagger(app",{"_index":962,"title":{},"body":{"miscellaneous/functions.html":{}}}],["signoptions",{"_index":655,"title":{},"body":{"modules/SecurityModule.html":{}}}],["social",{"_index":537,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{},"entities/User.html":{}}}],["socket.io",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["soft",{"_index":438,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["softdelete",{"_index":430,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["sortcode",{"_index":316,"title":{},"body":{"entities/Billing.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"modules/SecurityModule.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"classes/UpdatePostsDto.html":{},"entities/User.html":{},"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{}}}],["sqlite3",{"_index":942,"title":{},"body":{"dependencies.html":{}}}],["started",{"_index":966,"title":{"index.html":{}},"body":{}}],["statements",{"_index":794,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":198,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["status",{"_index":74,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["strategies/local.strategy",{"_index":649,"title":{},"body":{"modules/SecurityModule.html":{}}}],["strategy",{"_index":472,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["street",{"_index":155,"title":{},"body":{"entities/Address.html":{}}}],["string",{"_index":130,"title":{},"body":{"injectables/AccountsService.html":{},"entities/Address.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":358,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["subjects",{"_index":341,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["successfully",{"_index":32,"title":{},"body":{"controllers/AccountsController.html":{}}}],["summary",{"_index":76,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"controllers/VideosController.html":{}}}],["super",{"_index":478,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["support",{"_index":972,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":973,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":425,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["table",{"_index":820,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":819,"title":{},"body":{"coverage.html":{}}}],["this.authservice.validateuser(username",{"_index":479,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.defaults[key",{"_index":395,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["this.env[key",{"_index":394,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["this.extracttokenfromheader(request",{"_index":294,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.get(key",{"_index":397,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["this.get(key).split(separator",{"_index":398,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["this.id",{"_index":539,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":306,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.mediaservice.getvhosts",{"_index":498,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.postsrepository.find",{"_index":582,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":287,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":634,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.userrepository.findone",{"_index":143,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.userrepository.save(user",{"_index":144,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.userservice.create(user",{"_index":692,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.userservice.findone(login.username",{"_index":693,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.userservice.findone(username",{"_index":681,"title":{},"body":{"injectables/SecurityService.html":{}}}],["throw",{"_index":295,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["title",{"_index":403,"title":{},"body":{"classes/CreatePostsDto.html":{},"entities/Post.html":{}}}],["token",{"_index":293,"title":{},"body":{"guards/AuthGuard.html":{}}}],["tokendto",{"_index":695,"title":{"classes/TokenDto.html":{}},"body":{"classes/TokenDto.html":{},"coverage.html":{}}}],["tokenpayload",{"_index":703,"title":{"interfaces/TokenPayload.html":{}},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["transformer",{"_index":750,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["true",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"modules/DatabaseModule.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/SecurityModule.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["true})@jointable({name",{"_index":738,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":296,"title":{},"body":{"guards/AuthGuard.html":{}}}],["twitter",{"_index":926,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":122,"title":{},"body":{"injectables/AccountsService.html":{},"entities/Address.html":{},"guards/AuthGuard.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ConfigurationService.html":{},"classes/CreatePostsDto.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"classes/TokenDto.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":986,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":139,"title":{},"body":{"injectables/AccountsService.html":{},"entities/Address.html":{},"entities/Billing.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Profile.html":{},"entities/Role.html":{},"entities/User.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":100,"title":{},"body":{"modules/AccountsModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":569,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":640,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":109,"title":{},"body":{"modules/AccountsModule.html":{}}}],["typeormmodule.forrootasync",{"_index":413,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":359,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["unauthorizedexception",{"_index":277,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":276,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/ConfigurationService.html":{}}}],["unique",{"_index":524,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["unity",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["unknown",{"_index":127,"title":{},"body":{"injectables/AccountsService.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"injectables/PostsService.html":{},"injectables/SecurityService.html":{}}}],["unlicensed",{"_index":985,"title":{},"body":{"properties.html":{}}}],["update",{"_index":16,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/ImagesController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/VideosController.html":{},"miscellaneous/enumerations.html":{}}}],["updatedat",{"_index":513,"title":{},"body":{"entities/Post.html":{}}}],["updatepostsdto",{"_index":706,"title":{"classes/UpdatePostsDto.html":{}},"body":{"classes/UpdatePostsDto.html":{},"coverage.html":{}}}],["upload",{"_index":431,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/VideosController.html":{}}}],["useclass",{"_index":259,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":415,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["user",{"_index":34,"title":{"entities/User.html":{}},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"entities/Address.html":{},"entities/Billing.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/LocalStrategy.html":{},"entities/Post.html":{},"entities/Profile.html":{},"interfaces/RequestWithUser.html":{},"guards/RolesGuard.html":{},"injectables/SecurityService.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user.address",{"_index":175,"title":{},"body":{"entities/Address.html":{}}}],["user.address)@apiproperty",{"_index":166,"title":{},"body":{"entities/Address.html":{}}}],["user.billing",{"_index":324,"title":{},"body":{"entities/Billing.html":{}}}],["user.billing)@apiproperty",{"_index":321,"title":{},"body":{"entities/Billing.html":{}}}],["user.email",{"_index":690,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.entity",{"_index":172,"title":{},"body":{"entities/Address.html":{},"entities/Billing.html":{},"entities/Profile.html":{}}}],["user.id",{"_index":352,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["user.isadmin",{"_index":344,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["user.password",{"_index":682,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.posts",{"_index":540,"title":{},"body":{"entities/Post.html":{}}}],["user.posts)@joincolumn({name",{"_index":515,"title":{},"body":{"entities/Post.html":{}}}],["user.profile",{"_index":593,"title":{},"body":{"entities/Profile.html":{}}}],["user.profile)@apiproperty",{"_index":590,"title":{},"body":{"entities/Profile.html":{}}}],["user.roles?.includes(role",{"_index":636,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.username",{"_index":688,"title":{},"body":{"injectables/SecurityService.html":{}}}],["userid",{"_index":705,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["username",{"_index":133,"title":{},"body":{"injectables/AccountsService.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/SecurityService.html":{},"entities/User.html":{}}}],["userrepository",{"_index":124,"title":{},"body":{"injectables/AccountsService.html":{}}}],["users_roles",{"_index":739,"title":{},"body":{"entities/User.html":{}}}],["userservice",{"_index":666,"title":{},"body":{"injectables/SecurityService.html":{}}}],["uuid",{"_index":534,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["v4",{"_index":533,"title":{},"body":{"entities/Post.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["validate",{"_index":463,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(username",{"_index":468,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateuser",{"_index":663,"title":{},"body":{"injectables/SecurityService.html":{}}}],["validateuser(username",{"_index":675,"title":{},"body":{"injectables/SecurityService.html":{}}}],["validation",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["validationschema",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":410,"title":{},"body":{"classes/CreatePostsDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["value",{"_index":387,"title":{},"body":{"injectables/ConfigurationService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":804,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":989,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verified",{"_index":713,"title":{},"body":{"entities/User.html":{}}}],["version",{"_index":982,"title":{},"body":{"properties.html":{}}}],["video",{"_index":767,"title":{},"body":{"controllers/VideosController.html":{}}}],["video'})@apiresponse({status",{"_index":764,"title":{},"body":{"controllers/VideosController.html":{}}}],["videos.controller",{"_index":790,"title":{},"body":{"modules/VideosModule.html":{}}}],["videos.service",{"_index":779,"title":{},"body":{"controllers/VideosController.html":{},"modules/VideosModule.html":{}}}],["videoscontroller",{"_index":761,"title":{"controllers/VideosController.html":{}},"body":{"controllers/VideosController.html":{},"modules/VideosModule.html":{},"coverage.html":{}}}],["videosmodule",{"_index":187,"title":{"modules/VideosModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VideosModule.html":{},"modules.html":{},"overview.html":{}}}],["videosservice",{"_index":778,"title":{"injectables/VideosService.html":{}},"body":{"controllers/VideosController.html":{},"modules/VideosModule.html":{},"injectables/VideosService.html":{},"coverage.html":{},"overview.html":{}}}],["view",{"_index":432,"title":{},"body":{"controllers/ImagesController.html":{}}}],["watch",{"_index":763,"title":{},"body":{"controllers/VideosController.html":{}}}],["we're",{"_index":297,"title":{},"body":{"guards/AuthGuard.html":{}}}],["web/www",{"_index":253,"title":{},"body":{"modules/AppModule.html":{}}}],["webgl",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["write",{"_index":347,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["zoom",{"_index":93,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/ImagesModule.html":{},"modules/MediaModule.html":{},"modules/PostsModule.html":{},"modules/SecurityModule.html":{},"modules/VideosModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AccountsController.html":{"url":"controllers/AccountsController.html","title":"controller - AccountsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AccountsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/accounts/accounts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                accounts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                profile\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Admin)@ApiOperation({summary: 'Delete Account Profile [Admin Only]'})@ApiResponse({status: 403, description: 'Forbidden.'})@Delete('delete')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@ApiResponse({status: 200, description: 'The record has been successfully created.'})@ApiOperation({summary: 'Login User Account.'})@ApiResponse({status: 403, description: 'Forbidden.'})@Post('login')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    profile()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.User)@ApiOperation({summary: 'Access Account Profile'})@ApiResponse({status: 403, description: 'Forbidden.'})@Get()\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@ApiResponse({status: 200, description: 'The record has been successfully created.'})@ApiOperation({summary: 'Register A New Account.'})@ApiResponse({status: 403, description: 'Forbidden.'})@Post('register')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.User)@ApiOperation({summary: 'Update Account Profile'})@ApiResponse({status: 403, description: 'Forbidden.'})@Put('update')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Post, Put } from '@nestjs/common';\nimport { AccountsService } from './accounts.service';\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { Public } from '../../security/interfaces/auth.interface';\nimport { Roles } from '../../security/roles/decorators/roles.decorator';\nimport { Role } from '../../security/roles/enum/role.enum';\n\n@ApiTags('Account Management: Basic Account Registration & Login')\n@Controller('accounts')\nexport class AccountsController {\n  constructor(private readonly accountsService: AccountsService) {}\n\n  // ACCOUNT REGISTRATION & LOGIN\n  @Public()\n  @ApiResponse({\n    status: 200,\n    description: 'The record has been successfully created.',\n  })\n  @ApiOperation({ summary: 'Register A New Account.' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Post('register')\n  async register() {}\n\n  @Public()\n  @ApiResponse({\n    status: 200,\n    description: 'The record has been successfully created.',\n  })\n  @ApiOperation({ summary: 'Login User Account.' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Post('login')\n  async login() {}\n\n  // ACCOUNT MANAGEMENT\n  @Roles(Role.User)\n  @ApiOperation({ summary: 'Access Account Profile' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Get()\n  async profile() {}\n\n  @Roles(Role.User)\n  @ApiOperation({ summary: 'Update Account Profile' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Put('update')\n  async update() {}\n\n  @Roles(Role.Admin)\n  @ApiOperation({ summary: 'Delete Account Profile [Admin Only]' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Delete('delete')\n  async delete() {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AccountsModule.html":{"url":"modules/AccountsModule.html","title":"module - AccountsModule","body":"\n                   \n\n\n\n\n    Modules\n    AccountsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\n\nAccountsService \n\nAccountsService \n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/api/accounts/accounts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AccountsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AccountsService } from './accounts.service';\nimport { AccountsController } from './accounts.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { Profile } from './entities/profile.entity';\nimport { Billing } from './entities/billing.entity';\nimport { Address } from './entities/address.entity';\n\n@Module({\n  controllers: [AccountsController],\n  providers: [AccountsService],\n  imports: [TypeOrmModule.forFeature([User, Profile, Billing, Address])],\n  exports: [AccountsService],\n})\nexport class AccountsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountsService.html":{"url":"injectables/AccountsService.html","title":"injectable - AccountsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/accounts/accounts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                profile\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/api/accounts/accounts.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(username: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    profile()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/accounts/accounts.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class AccountsService {\n  constructor(\n    @InjectRepository(User) private userRepository: Repository,\n  ) {}\n\n  async findOne(username: string, email: string): Promise {\n    return this.userRepository.findOne({\n      where: [{ username }, { email }],\n    });\n  }\n\n  async create(user: User) {\n    return this.userRepository.save(user);\n  }\n\n  async profile() {\n    return Promise.resolve(undefined);\n  }\n\n  async update() {\n    return Promise.resolve(undefined);\n  }\n\n  async delete() {\n    return Promise.resolve(undefined);\n  }\n\n  async getAll() {\n    return Promise.resolve(undefined);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Address.html":{"url":"entities/Address.html","title":"entity - Address","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/accounts/entities/address.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                            \n                                country\n                            \n                            \n                                county\n                            \n                            \n                                postcode\n                            \n                            \n                                propertyNo\n                            \n                            \n                                street\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        county\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postcode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        propertyNo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        street\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.address)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/address.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToOne, PrimaryColumn } from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { User } from './user.entity';\n\n@Entity('address', { schema: 'accounts' })\nexport class Address {\n  @PrimaryColumn()\n  @ApiProperty()\n  propertyNo: number;\n  @Column()\n  @ApiProperty()\n  street: string;\n  @Column()\n  @ApiProperty()\n  city: string;\n  @Column()\n  @ApiProperty()\n  county: string;\n  @Column()\n  @ApiProperty()\n  country: string;\n  @Column()\n  @ApiProperty()\n  postcode: string;\n\n  @OneToOne(() => User, (user) => user.address)\n  @ApiProperty()\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get, Render } from '@nestjs/common';\n\n@Controller('')\nexport class AppController {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nImagesModule\n\nImagesModule\n\nAppModule -->\n\nImagesModule->AppModule\n\n\n\n\n\nMediaModule\n\nMediaModule\n\nAppModule -->\n\nMediaModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nSecurityModule\n\nSecurityModule\n\nAppModule -->\n\nSecurityModule->AppModule\n\n\n\n\n\nVideosModule\n\nVideosModule\n\nAppModule -->\n\nVideosModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                        \n                            ImagesModule\n                        \n                        \n                            MediaModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            SecurityModule\n                        \n                        \n                            VideosModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport * as Joi from 'joi';\nimport { APP_GUARD } from '@nestjs/core';\nimport { DatabaseModule } from '@database/database';\nimport { AppController } from './app.controller';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { SecurityModule } from './security/security.module';\nimport { AuthGuard } from './security/guards/auth.guard';\nimport { RolesGuard } from './security/guards/roles.guard';\nimport { PostsModule } from './api/posts/posts.module';\nimport { VideosModule } from './api/videos/videos.module';\nimport { ImagesModule } from './api/images/images.module';\nimport { MediaModule } from './media/media.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [],\n      validationSchema: Joi.object({\n        // DATABASE VALIDATION\n        DATABASE_HOST: Joi.string().required(),\n        DATABASE_PORT: Joi.number().required(),\n        DATABASE_USER: Joi.string().required(),\n        DATABASE_PASSWORD: Joi.string().required(),\n        DATABASE_NAME: Joi.string().required(),\n        DATABASE_SCHEMA: Joi.string().required(),\n        // JWT VALIDATION\n        JWT_SECRET: Joi.string().required(),\n        JWT_EXPIRATION_TIME: Joi.string().required(),\n        // PORT VALIDATION\n        NODE_PORT: Joi.number().required(),\n        // REDIS VALIDATION\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PORT: Joi.number().required(),\n        REDIS_PASSWORD: Joi.string().required(),\n        REDIS_USERNAME: Joi.string().required(),\n        // GRPC VALIDATION\n        GRPC_HOST: Joi.string().required(),\n        GRPC_PACKAGE: Joi.string().required(),\n        GRPC_PROTO_PATH: Joi.string().required(),\n        // RABBITMQ VALIDATION\n        RABBITMQ_HOST: Joi.string().required(),\n        RABBITMQ_QUEUE: Joi.string().required(),\n        RABBITMQ_USERNAME: Joi.string().required(),\n        RABBITMQ_PASSWORD: Joi.string().required(),\n        // KAFKA VALIDATION\n        KAFKA_HOST: Joi.string().required(),\n        KAFKA_CLIENT_ID: Joi.string().required(),\n        // MQTT VALIDATION\n        MQTT_HOST: Joi.string().required(),\n      }),\n    }),\n    DatabaseModule,\n    SecurityModule,\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'web/www'),\n      renderPath: '/',\n      serveStaticOptions: {\n        extensions: ['ejs'],\n      },\n    }),\n    PostsModule,\n    VideosModule,\n    ImagesModule,\n    MediaModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: AuthGuard,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/api/src/security/guards/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/security/guards/auth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/guards/auth.guard.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                    \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/guards/auth.guard.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport { Reflector } from '@nestjs/core';\nimport { jwtConstants } from '../constants';\nimport { IS_PUBLIC_KEY } from '../interfaces/auth.interface';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private jwtService: JwtService, private reflector: Reflector) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      // 💡 See this condition\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      // 💡 We're assigning the payload to the request object here\n      // so that we can access it in our route handlers\n      request['user'] = await this.jwtService.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Billing.html":{"url":"entities/Billing.html","title":"entity - Billing","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Billing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/accounts/entities/billing.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accountName\n                            \n                            \n                                accountNumber\n                            \n                            \n                                accountType\n                            \n                            \n                                sortCode\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accountName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/billing.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        accountNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/billing.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        accountType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/billing.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sortCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/billing.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.billing)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/billing.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToOne, PrimaryColumn } from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { User } from './user.entity';\n\n@Entity('billing', { schema: 'accounts' })\nexport class Billing {\n  @PrimaryColumn()\n  @ApiProperty()\n  accountName: string;\n  @Column()\n  @ApiProperty()\n  accountType: string;\n  @Column()\n  @ApiProperty()\n  accountNumber: string;\n  @Column()\n  @ApiProperty()\n  sortCode: string;\n\n  @OneToOne(() => User, (user) => user.billing)\n  @ApiProperty()\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslAbilityFactory.html":{"url":"injectables/CaslAbilityFactory.html","title":"injectable - CaslAbilityFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaslAbilityFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/roles/casl/casl-ability.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/roles/casl/casl-ability.factory.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Action } from '../enum/action.enum';\nimport { User } from '../../../api/accounts/entities/user.entity';\nimport { Post } from '../../../api/posts/entities/post.entity';\n\ntype Subjects = InferSubjects | 'all';\n\nexport type AppAbility = Ability;\n\n@Injectable()\nexport class CaslAbilityFactory {\n  createForUser(user: User) {\n    const { can, cannot, build } = new AbilityBuilder\n    >(Ability as AbilityClass);\n\n    if (user.isAdmin) {\n      can(Action.Manage, 'all'); // read-write access to everything\n    } else {\n      can(Action.Read, 'all'); // read-only access to everything\n    }\n\n    can(Action.Update, Post, { authorId: user.id });\n    cannot(Action.Delete, Post, { isPublished: true });\n\n    return build({\n      // Read https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types for details\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigurationModule.html":{"url":"modules/ConfigurationModule.html","title":"module - ConfigurationModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigurationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConfigurationModule\n\n\n\ncluster_ConfigurationModule_exports\n\n\n\ncluster_ConfigurationModule_providers\n\n\n\n\nConfigurationService \n\nConfigurationService \n\n\n\nConfigurationModule\n\nConfigurationModule\n\nConfigurationService  -->\n\nConfigurationModule->ConfigurationService \n\n\n\n\n\nConfigurationService\n\nConfigurationService\n\nConfigurationModule -->\n\nConfigurationService->ConfigurationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/configuration/src/configuration.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConfigurationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ConfigurationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigurationService } from './configuration.service';\n\n@Module({\n  providers: [ConfigurationService],\n  exports: [ConfigurationService],\n})\nexport class ConfigurationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigurationService.html":{"url":"injectables/ConfigurationService.html","title":"injectable - ConfigurationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConfigurationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/configuration/src/configuration.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                getArray\n                            \n                            \n                                getBoolean\n                            \n                            \n                                getNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(env: literal type, defaults: literal type)\n                    \n                \n                        \n                            \n                                Defined in libs/configuration/src/configuration.service.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        env\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaults\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/configuration/src/configuration.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getArray\n                        \n                    \n                \n            \n            \n                \ngetArray(key: string, separator: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/configuration/src/configuration.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    separator\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ','\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBoolean\n                        \n                    \n                \n            \n            \n                \ngetBoolean(key: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/configuration/src/configuration.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNumber\n                        \n                    \n                \n            \n            \n                \ngetNumber(key: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/configuration/src/configuration.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ConfigurationService {\n  constructor(\n    private readonly env: { [k: string]: string | undefined },\n    private readonly defaults: { [k: string]: string | undefined } = {},\n  ) {}\n\n  get(key: string): string {\n    return this.env[key] || this.defaults[key];\n  }\n\n  getNumber(key: string): number {\n    return Number(this.get(key));\n  }\n\n  getBoolean(key: string): boolean {\n    return this.get(key) === 'true';\n  }\n\n  getArray(key: string, separator = ','): string[] {\n    return this.get(key).split(separator);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostsDto.html":{"url":"classes/CreatePostsDto.html","title":"class - CreatePostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/posts/dto/createPosts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                author\n                            \n                            \n                                    Readonly\n                                content\n                            \n                            \n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/dto/createPosts.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/dto/createPosts.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/dto/createPosts.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostsDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly content: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly author: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/database/src/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DATABASE_HOST'),\n        port: configService.get('DATABASE_PORT'),\n        username: configService.get('DATABASE_USER'),\n        password: configService.get('DATABASE_PASSWORD'),\n        database: configService.get('DATABASE_NAME'),\n        schema: configService.get('DATABASE_SCHEMA'),\n        entities: [],\n        synchronize: true,\n        autoLoadEntities: true,\n      }),\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ImagesController.html":{"url":"controllers/ImagesController.html","title":"controller - ImagesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ImagesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/images/images.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                accounts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                hardDelete\n                            \n                            \n                                    Async\n                                softDelete\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                upload\n                            \n                            \n                                    Async\n                                view\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hardDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    hardDelete()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: '[Hard] Delete A Image [Admin Only]'})@ApiResponse({status: 403, description: 'Forbidden.'})@Delete('image:delete')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/images/images.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    softDelete()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: '[Soft] Delete A Image'})@ApiResponse({status: 403, description: 'Forbidden.'})@Delete('image:delete:soft')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/images/images.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update A Image'})@ApiResponse({status: 403, description: 'Forbidden.'})@Put('image:update')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/images/images.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                    \n                    upload()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Upload A Image'})@ApiResponse({status: 403, description: 'Forbidden.'})@Post('image:upload')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/images/images.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        view\n                        \n                    \n                \n            \n            \n                \n                    \n                    view()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'View An Image'})@ApiResponse({status: 403, description: 'Forbidden.'})@Get('image:view')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/images/images.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Post, Put } from '@nestjs/common';\nimport { ImagesService } from './images.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Images: View, Update, Upload, Delete')\n@Controller('accounts')\nexport class ImagesController {\n  constructor(private readonly imagesService: ImagesService) {}\n\n  @ApiOperation({ summary: 'View An Image' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Get('image:view')\n  async view() {}\n\n  @ApiOperation({ summary: 'Update A Image' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Put('image:update')\n  async update() {}\n\n  @ApiOperation({ summary: 'Upload A Image' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Post('image:upload')\n  async upload() {}\n\n  @ApiOperation({ summary: '[Soft] Delete A Image' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Delete('image:delete:soft')\n  async softDelete() {}\n\n  @ApiOperation({ summary: '[Hard] Delete A Image [Admin Only]' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Delete('image:delete')\n  async hardDelete() {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ImagesModule.html":{"url":"modules/ImagesModule.html","title":"module - ImagesModule","body":"\n                   \n\n\n\n\n    Modules\n    ImagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ImagesModule\n\n\n\ncluster_ImagesModule_providers\n\n\n\n\nImagesService\n\nImagesService\n\n\n\nImagesModule\n\nImagesModule\n\nImagesModule -->\n\nImagesService->ImagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/api/images/images.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ImagesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ImagesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ImagesService } from './images.service';\nimport { ImagesController } from './images.controller';\n\n@Module({\n  controllers: [ImagesController],\n  providers: [ImagesService]\n})\nexport class ImagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ImagesService.html":{"url":"injectables/ImagesService.html","title":"injectable - ImagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ImagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/images/images.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ImagesService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: SecurityService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/security/strategies/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        SecurityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/strategies/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { SecurityService } from '../security.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: SecurityService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/login.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/login.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/login.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty()\n  username: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MediaController.html":{"url":"controllers/MediaController.html","title":"controller - MediaController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MediaController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/media/media.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                media\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getVhosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getVhosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVhosts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('v1/vhosts')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/media/media.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post } from '@nestjs/common';\nimport { MediaService } from './media.service';\n\n@Controller('media')\nexport class MediaController {\n  constructor(private readonly mediaService: MediaService) {}\n\n  @Get('v1/vhosts')\n  async getVhosts() {\n    return await this.mediaService.getVhosts();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MediaModule.html":{"url":"modules/MediaModule.html","title":"module - MediaModule","body":"\n                   \n\n\n\n\n    Modules\n    MediaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MediaModule\n\n\n\ncluster_MediaModule_providers\n\n\n\n\nMediaService\n\nMediaService\n\n\n\nMediaModule\n\nMediaModule\n\nMediaModule -->\n\nMediaService->MediaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/media/media.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MediaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MediaController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MediaService } from './media.service';\nimport { MediaController } from './media.controller';\n\n@Module({\n  controllers: [MediaController],\n  providers: [MediaService]\n})\nexport class MediaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MediaService.html":{"url":"injectables/MediaService.html","title":"injectable - MediaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MediaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/media/media.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getVhosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getVhosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVhosts()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/media/media.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport axios from 'axios';\n\n@Injectable()\nexport class MediaService {\n  async getVhosts() {\n    const response = await axios.get('http://localhost:8081/v1/vhosts');\n    return response.data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/posts/entities/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                authorId\n                            \n                            \n                                content\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                id\n                            \n                            \n                                isPublished\n                            \n                            \n                                title\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts)@JoinColumn({name: 'authorId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid', {name: 'id'})@ApiProperty({description: 'unique identifier'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPublished\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/posts/entities/post.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeInsert,\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryColumn,\n} from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { v4 } from 'uuid';\nimport { User } from \"../../accounts/entities/user.entity\";\n\n@Entity('post', { schema: 'social' })\nexport class Post {\n  @BeforeInsert()\n  addId() {\n    this.id = v4();\n  }\n\n  @PrimaryColumn('uuid', { name: 'id' })\n  @ApiProperty({ description: 'unique identifier' })\n  id: string;\n\n  @Column()\n  title: string;\n\n  @Column()\n  content: string;\n\n  @Column()\n  authorId: string;\n\n  @ManyToOne(() => User, (user) => user.posts)\n  @JoinColumn({ name: 'authorId' })\n  author: User;\n\n  @Column()\n  isPublished: boolean;\n\n  @Column()\n  createdAt: Date;\n\n  @Column()\n  updatedAt: Date;\n\n  @Column()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                accounts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                hardDelete\n                            \n                            \n                                    Async\n                                read\n                            \n                            \n                                    Async\n                                softDelete\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create A New Social Post'})@ApiResponse({status: 403, description: 'Forbidden.'})@Post('post:create')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hardDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    hardDelete()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: '[Hard] Delete A Social Post [Admin Only]'})@ApiResponse({status: 403, description: 'Forbidden.'})@Delete('post:delete')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        read\n                        \n                    \n                \n            \n            \n                \n                    \n                    read()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Read A Social Post'})@ApiResponse({status: 403, description: 'Forbidden.'})@Get('post:read')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    softDelete()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: '[Soft] Delete A Social Post'})@ApiResponse({status: 403, description: 'Forbidden.'})@Delete('post:delete:soft')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update A Social Post'})@ApiResponse({status: 403, description: 'Forbidden.'})@Put('post:update')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Post, Put } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Social Posts: Create, Read, Update, Delete')\n@Controller('accounts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @ApiOperation({ summary: 'Create A New Social Post' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Post('post:create')\n  async create() {}\n\n  @ApiOperation({ summary: 'Read A Social Post' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Get('post:read')\n  async read() {}\n\n  @ApiOperation({ summary: 'Update A Social Post' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Put('post:update')\n  async update() {}\n\n  @ApiOperation({ summary: '[Soft] Delete A Social Post' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Delete('post:delete:soft')\n  async softDelete() {}\n\n  @ApiOperation({ summary: '[Hard] Delete A Social Post [Admin Only]' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Delete('post:delete')\n  async hardDelete() {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPostsService \n\nPostsService \n\n\n\nPostsModule\n\nPostsModule\n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/api/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './entities/post.entity';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [TypeOrmModule.forFeature([Post])],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                getPost\n                            \n                            \n                                    Async\n                                getPosts\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/api/posts/posts.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPost\n                        \n                    \n                \n            \n            \n                \ngetPost()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPosts()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/api/posts/posts.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Post } from './entities/post.entity';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    @InjectRepository(Post) private postsRepository: Repository,\n  ) {}\n\n  create() {\n    return Promise.resolve(undefined);\n  }\n\n  update() {\n    return Promise.resolve(undefined);\n  }\n\n  delete() {\n    return Promise.resolve(undefined);\n  }\n\n  getPost() {\n    return Promise.resolve(undefined);\n  }\n\n  async getPosts() {\n    return await this.postsRepository.find();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Profile.html":{"url":"entities/Profile.html","title":"entity - Profile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/accounts/entities/profile.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                cover\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/profile.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/profile.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/profile.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.profile)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/profile.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToOne, PrimaryColumn } from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { User } from './user.entity';\n\n@Entity('profile', { schema: 'accounts' })\nexport class Profile {\n  @PrimaryColumn()\n  @ApiProperty()\n  bio: string;\n  @Column()\n  @ApiProperty()\n  avatar: string;\n  @Column()\n  @ApiProperty()\n  cover: string;\n\n  @OneToOne(() => User, (user) => user.profile)\n  @ApiProperty()\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstname\n                            \n                            \n                                lastname\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(8)@IsEmail()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/register.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(3)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/register.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(3)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/register.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(16)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/register.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(3)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/register.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class RegisterDto {\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @ApiProperty()\n  username: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @ApiProperty()\n  firstname: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @ApiProperty()\n  lastname: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(8)\n  @IsEmail()\n  @ApiProperty()\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(16)\n  @ApiProperty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/interfaces/requestWithUser.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { User } from 'apps/api/src/api/accounts/entities/user.entity';\nimport { Request } from 'express';\n\nexport interface RequestWithUser extends Request {\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/roles/entities/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid', {name: 'id'})@ApiProperty({description: 'unique identifier'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/roles/entities/role.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, maxLength: 64})@Column({length: 64})@Index({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/roles/entities/role.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BeforeInsert, Column, Entity, Index, PrimaryColumn } from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { v4 } from 'uuid';\n\n@Entity('roles', { schema: 'permissions' })\nexport default class Role {\n  @BeforeInsert()\n  addId() {\n    this.id = v4();\n  }\n\n  @PrimaryColumn('uuid', { name: 'id' })\n  @ApiProperty({ description: 'unique identifier' })\n  id: string;\n\n  @ApiProperty({ type: String, maxLength: 64 })\n  @Column({ length: 64 })\n  @Index({ unique: true })\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/api/src/security/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/security/guards/roles.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/guards/roles.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport Role from '../roles/entities/role.entity';\nimport { ROLES_KEY } from '../roles/decorators/roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    const { user } = context.switchToHttp().getRequest();\n    return requiredRoles.some((role) => user.roles?.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/security/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport Role from './entities/role.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role])],\n  controllers: [],\n  providers: [],\n  exports: [],\n})\nexport class RolesModule {\n  constructor() {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SecurityModule.html":{"url":"modules/SecurityModule.html","title":"module - SecurityModule","body":"\n                   \n\n\n\n\n    Modules\n    SecurityModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SecurityModule\n\n\n\ncluster_SecurityModule_imports\n\n\n\ncluster_SecurityModule_providers\n\n\n\ncluster_SecurityModule_exports\n\n\n\n\nAccountsModule\n\nAccountsModule\n\n\n\nSecurityModule\n\nSecurityModule\n\nSecurityModule -->\n\nAccountsModule->SecurityModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nSecurityModule -->\n\nRolesModule->SecurityModule\n\n\n\n\n\nSecurityService \n\nSecurityService \n\nSecurityService  -->\n\nSecurityModule->SecurityService \n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nSecurityModule -->\n\nLocalStrategy->SecurityModule\n\n\n\n\n\nSecurityService\n\nSecurityService\n\nSecurityModule -->\n\nSecurityService->SecurityModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/security/security.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LocalStrategy\n                        \n                        \n                            SecurityService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AccountsModule\n                        \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SecurityService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SecurityService } from './security.service';\nimport { AccountsModule } from 'apps/api/src/api/accounts/accounts.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { RolesModule } from './roles/roles.module';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    AccountsModule,\n    RolesModule,\n    PassportModule.register({ defaultStrategy: 'local' }),\n    JwtModule.register({\n      global: true,\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  providers: [SecurityService, LocalStrategy],\n  exports: [SecurityService],\n})\nexport class SecurityModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SecurityService.html":{"url":"injectables/SecurityService.html","title":"injectable - SecurityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SecurityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/security.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: AccountsService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/security/security.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        AccountsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    forgotPassword()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(login: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    login\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(register: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    register\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/security/security.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { RegisterDto } from './dto/register.dto';\nimport { LoginDto } from './dto/login.dto';\nimport { AccountsService } from '../api/accounts/accounts.service';\nimport { User } from '../api/accounts/entities/user.entity';\n\n@Injectable()\nexport class SecurityService {\n  constructor(private userService: AccountsService) {}\n\n  async validateUser(username: string, password: string): Promise {\n    const user = await this.userService.findOne(username, password);\n    if (user && user.password === password) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async register(register: RegisterDto): Promise {\n    const hashedPassword = await bcrypt.hash(register.password, 10);\n    const user = new User();\n    user.username = register.username;\n    user.email = register.email;\n    user.password = hashedPassword;\n    return this.userService.create(user);\n  }\n\n  async login(login: LoginDto): Promise {\n    return this.userService.findOne(login.username, login.password);\n  }\n\n  async logout() {\n    return Promise.resolve(undefined);\n  }\n\n  async refresh() {\n    return Promise.resolve(undefined);\n  }\n\n  async forgotPassword() {\n    return Promise.resolve(undefined);\n  }\n\n  async resetPassword() {\n    return Promise.resolve(undefined);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenDto.html":{"url":"classes/TokenDto.html","title":"class - TokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/dto/token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                            \n                                expires_in\n                            \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/token.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/token.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/security/dto/token.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class TokenDto {\n  @ApiProperty()\n  expires_in: number;\n\n  @ApiProperty()\n  accessToken: string;\n\n  @ApiProperty()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/security/interfaces/tokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayload {\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostsDto.html":{"url":"classes/UpdatePostsDto.html","title":"class - UpdatePostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/posts/dto/updatePosts.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePostsDto } from \"./createPosts.dto\";\n\nexport class UpdatePostsDto extends PartialType(CreatePostsDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/accounts/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                billing\n                            \n                            \n                                    Optional\n                                email\n                            \n                            \n                                firstname\n                            \n                            \n                                id\n                            \n                            \n                                isAdmin\n                            \n                            \n                                lastname\n                            \n                            \n                                password\n                            \n                            \n                                    Public\n                                    Optional\n                                posts\n                            \n                            \n                                profile\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                            \n                                verified\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, address => address.user)@JoinColumn({name: 'address_id'})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        billing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Billing\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, billing => billing.user)@JoinColumn({name: 'billing_id'})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, length: 64})@ApiProperty({type: String, maxLength: 64})@Index({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty({type: String, maxLength: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid', {name: 'id'})@ApiProperty({description: 'unique identifier'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isAdmin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty({type: String, maxLength: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.authorId)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Profile\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, profile => profile.user)@JoinColumn({name: 'profile_id'})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, {cascade: true})@JoinTable({name: 'users_roles'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty({type: String, maxLength: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty({type: Boolean})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/api/accounts/entities/user.entity.ts:86\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeInsert,\n  Column,\n  Entity,\n  Index,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  OneToMany,\n  OneToOne,\n  PrimaryColumn,\n} from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { v4 } from 'uuid';\nimport { Profile } from './profile.entity';\nimport { Address } from './address.entity';\nimport { Billing } from './billing.entity';\nimport { Exclude } from 'class-transformer';\nimport Role from '../../../security/roles/entities/role.entity';\nimport { Post } from '../../posts/entities/post.entity';\n\n@Entity('user', { schema: 'accounts' })\nexport class User {\n  @BeforeInsert()\n  addId() {\n    this.id = v4();\n  }\n\n  @PrimaryColumn('uuid', { name: 'id' })\n  @ApiProperty({ description: 'unique identifier' })\n  id: string;\n\n  @Column()\n  @ApiProperty({ type: String, maxLength: 64 })\n  username: string;\n\n  @Column()\n  @ApiProperty({ type: String, maxLength: 64 })\n  firstname: string;\n\n  @Column()\n  @ApiProperty({ type: String, maxLength: 64 })\n  lastname: string;\n\n  @Column({ unique: true, length: 64 })\n  @ApiProperty({ type: String, maxLength: 64 })\n  @Index({ unique: true })\n  email?: string;\n\n  @Column()\n  @ApiProperty()\n  @Exclude()\n  password: string;\n\n  // OTHER ENTITIES\n  @OneToOne(() => Profile, (profile) => profile.user)\n  @JoinColumn({ name: 'profile_id' })\n  @ApiProperty()\n  profile: Profile;\n\n  @OneToOne(() => Address, (address) => address.user)\n  @JoinColumn({ name: 'address_id' })\n  @ApiProperty()\n  address: Address;\n\n  @OneToOne(() => Billing, (billing) => billing.user)\n  @JoinColumn({ name: 'billing_id' })\n  @ApiProperty()\n  billing: Billing;\n\n  // // SOCIAL ENTITIES\n  @OneToMany(() => Post, (post: Post) => post.authorId)\n  public posts?: Post[];\n\n  @ManyToMany(() => Role, {\n    cascade: true,\n  })\n  @JoinTable({\n    name: 'users_roles',\n  })\n  roles: Role[];\n\n  // BOOLEANS\n  @Column()\n  @ApiProperty({ type: Boolean })\n  verified: boolean;\n\n  @Column()\n  @ApiProperty()\n  isAdmin: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/VideosController.html":{"url":"controllers/VideosController.html","title":"controller - VideosController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  VideosController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/videos/videos.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                accounts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                hardDelete\n                            \n                            \n                                    Async\n                                softDelete\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                upload\n                            \n                            \n                                    Async\n                                watch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create A New Video'})@ApiResponse({status: 403, description: 'Forbidden.'})@Post('video:create')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/videos/videos.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hardDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    hardDelete()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: '[Hard] Delete A Video [Admin Only]'})@ApiResponse({status: 403, description: 'Forbidden.'})@Delete('video:delete')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/videos/videos.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    softDelete()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: '[Soft] Delete A Video'})@ApiResponse({status: 403, description: 'Forbidden.'})@Delete('video:delete:soft')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/videos/videos.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update A Video'})@ApiResponse({status: 403, description: 'Forbidden.'})@Put('video:update')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/videos/videos.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                    \n                    upload()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Upload A Video'})@ApiResponse({status: 403, description: 'Forbidden.'})@Post('video:upload')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/videos/videos.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        watch\n                        \n                    \n                \n            \n            \n                \n                    \n                    watch()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Watch A Video'})@ApiResponse({status: 403, description: 'Forbidden.'})@Get('video:watch')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/api/videos/videos.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Post, Put } from '@nestjs/common';\nimport { VideosService } from './videos.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Videos: Create, Read, Update, Upload, Delete')\n@Controller('accounts')\nexport class VideosController {\n  constructor(private readonly videosService: VideosService) {}\n\n  @ApiOperation({ summary: 'Create A New Video' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Post('video:create')\n  async create() {}\n\n  @ApiOperation({ summary: 'Watch A Video' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Get('video:watch')\n  async watch() {}\n\n  @ApiOperation({ summary: 'Update A Video' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Put('video:update')\n  async update() {}\n\n  @ApiOperation({ summary: 'Upload A Video' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Post('video:upload')\n  async upload() {}\n\n  @ApiOperation({ summary: '[Soft] Delete A Video' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Delete('video:delete:soft')\n  async softDelete() {}\n\n  @ApiOperation({ summary: '[Hard] Delete A Video [Admin Only]' })\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\n  @Delete('video:delete')\n  async hardDelete() {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VideosModule.html":{"url":"modules/VideosModule.html","title":"module - VideosModule","body":"\n                   \n\n\n\n\n    Modules\n    VideosModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VideosModule\n\n\n\ncluster_VideosModule_providers\n\n\n\n\nVideosService\n\nVideosService\n\n\n\nVideosModule\n\nVideosModule\n\nVideosModule -->\n\nVideosService->VideosModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/api/videos/videos.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            VideosService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            VideosController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { VideosService } from './videos.service';\nimport { VideosController } from './videos.controller';\n\n@Module({\n  controllers: [VideosController],\n  providers: [VideosService]\n})\nexport class VideosModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VideosService.html":{"url":"injectables/VideosService.html","title":"injectable - VideosService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VideosService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/api/videos/videos.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class VideosService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/api/src/api/accounts/accounts.controller.ts\n            \n            controller\n            AccountsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/api/accounts/accounts.service.ts\n            \n            injectable\n            AccountsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                apps/api/src/api/accounts/entities/address.entity.ts\n            \n            entity\n            Address\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/accounts/entities/billing.entity.ts\n            \n            entity\n            Billing\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/accounts/entities/profile.entity.ts\n            \n            entity\n            Profile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/accounts/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/images/images.controller.ts\n            \n            controller\n            ImagesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/api/images/images.service.ts\n            \n            injectable\n            ImagesService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/posts/dto/createPosts.dto.ts\n            \n            class\n            CreatePostsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/api/posts/dto/updatePosts.dto.ts\n            \n            class\n            UpdatePostsDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/posts/entities/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/api/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/api/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                apps/api/src/api/videos/videos.controller.ts\n            \n            controller\n            VideosController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                apps/api/src/api/videos/videos.service.ts\n            \n            injectable\n            VideosService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            chalk\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/media/media.controller.ts\n            \n            controller\n            MediaController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/media/media.service.ts\n            \n            injectable\n            MediaService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/repl.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/security/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/security/dto/token.dto.ts\n            \n            class\n            TokenDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/security/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/security/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/api/src/security/interfaces/auth.interface.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/interfaces/auth.interface.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/interfaces/requestWithUser.interface.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/security/interfaces/tokenPayload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/security/roles/casl/casl-ability.factory.ts\n            \n            injectable\n            CaslAbilityFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/security/roles/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/roles/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/roles/entities/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/security/security.service.ts\n            \n            injectable\n            SecurityService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                apps/api/src/security/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                libs/configuration/src/configuration.service.ts\n            \n            injectable\n            ConfigurationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                libs/configuration/src/function/microservice.ts\n            \n            function\n            microServices\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/configuration/src/function/nodemailer.ts\n            \n            function\n            setupNodemailer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/configuration/src/function/swagger.ts\n            \n            function\n            setupSwagger\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @casl/ability : ^6.4.0\n        \n            @docusaurus/core : 2.4.0\n        \n            @docusaurus/preset-classic : 2.4.0\n        \n            @grpc/grpc-js : ^1.8.14\n        \n            @grpc/proto-loader : ^0.7.6\n        \n            @mdx-js/react : ^1.6.22\n        \n            @nestjs/axios : ^2.0.0\n        \n            @nestjs/bull : ^0.6.3\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.3.1\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/cqrs : ^9.0.3\n        \n            @nestjs/event-emitter : ^1.4.1\n        \n            @nestjs/jwt : ^10.0.2\n        \n            @nestjs/microservices : ^9.3.10\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/platform-socket.io : ^9.3.10\n        \n            @nestjs/schedule : ^2.2.0\n        \n            @nestjs/serve-static : ^3.0.1\n        \n            @nestjs/swagger : ^6.2.1\n        \n            @nestjs/terminus : ^9.2.2\n        \n            @nestjs/throttler : ^4.0.0\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @nestjs/websockets : ^9.3.10\n        \n            amqp-connection-manager : ^4.1.12\n        \n            amqplib : ^0.10.3\n        \n            axios : ^1.3.5\n        \n            bcrypt : ^5.1.0\n        \n            bull : ^4.10.4\n        \n            cache-manager : ^5.1.7\n        \n            chalk : ^4.1.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            clsx : ^1.2.1\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.6\n        \n            cpx : ^1.5.0\n        \n            crypto-js : ^4.1.1\n        \n            csurf : ^1.11.0\n        \n            discord.js : ^14.9.0\n        \n            dotenv : ^16.0.3\n        \n            ejs : ^3.1.9\n        \n            elliptic : ^6.5.4\n        \n            express-session : ^1.17.3\n        \n            hads : ^3.0.3\n        \n            helmet : ^6.0.1\n        \n            ioredis : ^5.3.1\n        \n            joi : ^17.8.4\n        \n            kafkajs : ^2.2.4\n        \n            mqtt : ^4.3.7\n        \n            node-appwrite : ^8.2.0\n        \n            node-docker-api : ^1.1.22\n        \n            nodemailer : ^6.9.1\n        \n            ovenlivekit : ^1.1.0\n        \n            ovenplayer : ^0.10.26\n        \n            passport : ^0.6.0\n        \n            passport-discord : ^0.1.4\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            passport-twitter : ^1.0.4\n        \n            pg : ^8.10.0\n        \n            prism-react-renderer : ^1.3.5\n        \n            react : ^17.0.2\n        \n            react-dom : ^17.0.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            sqlite3 : ^5.1.6\n        \n            typeorm : ^0.3.12\n        \n            unity-webgl : ^3.3.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (apps/.../action.enum.ts)\n                        \n                        \n                            Role   (apps/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/security/roles/enum/action.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Action\n                    \n                \n                        \n                            \n                                 Manage\n                            \n                        \n                        \n                            \n                                Value : manage\n                            \n                        \n                        \n                            \n                                 Create\n                            \n                        \n                        \n                            \n                                Value : create\n                            \n                        \n                        \n                            \n                                 Read\n                            \n                        \n                        \n                            \n                                Value : read\n                            \n                        \n                        \n                            \n                                 Update\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 Delete\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n\n    apps/api/src/security/roles/enum/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 Guest\n                            \n                        \n                        \n                            \n                                Value : guest\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                        \n                            bootstrap   (apps/.../repl.ts)\n                        \n                        \n                            microServices   (libs/.../microservice.ts)\n                        \n                        \n                            setupNodemailer   (libs/.../nodemailer.ts)\n                        \n                        \n                            setupSwagger   (libs/.../swagger.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    apps/api/src/repl.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    libs/configuration/src/function/microservice.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        microServices\n                        \n                    \n                \n            \n            \n                \nmicroServices()\n                \n            \n\n\n\n\n        \n    \n    libs/configuration/src/function/nodemailer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setupNodemailer\n                        \n                    \n                \n            \n            \n                \nsetupNodemailer()\n                \n            \n\n\n\n\n        \n    \n    libs/configuration/src/function/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setupSwagger\n                        \n                    \n                \n            \n            \n                \nsetupSwagger(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNXiE\nnpm run docs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AccountsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigurationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ImagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MediaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SecurityModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VideosModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_ConfigurationModule\n\n\n\ncluster_ConfigurationModule_exports\n\n\n\ncluster_ConfigurationModule_providers\n\n\n\ncluster_ImagesModule\n\n\n\ncluster_ImagesModule_providers\n\n\n\ncluster_MediaModule\n\n\n\ncluster_MediaModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_SecurityModule\n\n\n\ncluster_SecurityModule_imports\n\n\n\ncluster_SecurityModule_exports\n\n\n\ncluster_SecurityModule_providers\n\n\n\ncluster_VideosModule\n\n\n\ncluster_VideosModule_providers\n\n\n\n\nAccountsService \n\nAccountsService \n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nSecurityModule\n\nSecurityModule\n\nSecurityModule -->\n\nAccountsModule->SecurityModule\n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nImagesModule\n\nImagesModule\n\nAppModule -->\n\nImagesModule->AppModule\n\n\n\n\n\nMediaModule\n\nMediaModule\n\nAppModule -->\n\nMediaModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\nAppModule -->\n\nSecurityModule->AppModule\n\n\n\n\n\nSecurityService \n\nSecurityService \n\nSecurityService  -->\n\nSecurityModule->SecurityService \n\n\n\n\n\nVideosModule\n\nVideosModule\n\nAppModule -->\n\nVideosModule->AppModule\n\n\n\n\n\nConfigurationService \n\nConfigurationService \n\n\n\nConfigurationModule\n\nConfigurationModule\n\nConfigurationService  -->\n\nConfigurationModule->ConfigurationService \n\n\n\n\n\nConfigurationService\n\nConfigurationService\n\nConfigurationModule -->\n\nConfigurationService->ConfigurationModule\n\n\n\n\n\nImagesService\n\nImagesService\n\nImagesModule -->\n\nImagesService->ImagesModule\n\n\n\n\n\nMediaService\n\nMediaService\n\nMediaModule -->\n\nMediaService->MediaModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nSecurityModule -->\n\nRolesModule->SecurityModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nSecurityModule -->\n\nLocalStrategy->SecurityModule\n\n\n\n\n\nSecurityService\n\nSecurityService\n\nSecurityModule -->\n\nSecurityService->SecurityModule\n\n\n\n\n\nVideosService\n\nVideosService\n\nVideosModule -->\n\nVideosService->VideosModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (apps/.../casl-ability.factory.ts)\n                        \n                        \n                            Subjects   (apps/.../casl-ability.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/security/roles/casl/casl-ability.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Subjects\n                \n            \n            \n                \n                            InferSubjects | \"all\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            chalk   (apps/.../main.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (apps/.../auth.interface.ts)\n                        \n                        \n                            jwtConstants   (apps/.../constants.ts)\n                        \n                        \n                            module   (apps/.../main.ts)\n                        \n                        \n                            Public   (apps/.../auth.interface.ts)\n                        \n                        \n                            Roles   (apps/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (apps/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        chalk\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('chalk')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    apps/api/src/security/interfaces/auth.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/security/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: 'secretKey',\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/security/roles/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
